/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:Harmony Home Theaters
System Name: SqueezeBox Server
System Number: 7.4
Programmer: JWM 
Comments:
	
	(c) 2009 Jason Melvin    

	This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/




/////////////////////Compiler Directives
// #SYMBOL_NAME "SqueezeBox Server"
// #HINT ""
// #CATEGORY "" 
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #HELP_PDF_FILE ""
// #DEFAULT_NONVOLATILE
#OUTPUT_SHIFT 5
#ENABLE_DYNAMIC
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING

#DEFINE_CONSTANT Nowplaying_refresh_enable_time 1000

#PRINT_TO_TRACE
//#ENABLE_TRACE

/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

///////////  Include Libraries
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/////////////// Inputs & Outputs
DIGITAL_INPUT _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_;
DIGITAL_INPUT TCPIP_Connect;
DIGITAL_INPUT TCPIP_ReconnectEnable;

DIGITAL_INPUT Playlist_Save_Enable;

DIGITAL_OUTPUT TCPIP_Connected;
ANALOG_OUTPUT TCPIP_Status;

//ANALOG_OUTPUT debugINT;
//STRING_OUTPUT debug;

DIGITAL_INPUT Play, Pause_On, Pause_Off, Pause_Tog, Stop, Next, Prev, FFW, REW, Pwr_On, Pwr_Off;
DIGITAL_INPUT Repeat_Off, Repeat_Track, Repeat_All, Shuffle_Off, Shuffle_Track, Shuffle_Album;

// DIGITAL_INPUT PlaylistSave;
// DIGITAL_INPUT DynamicRefresh;

DIGITAL_INPUT List_PgUp, List_PgDn, List_Back;
DIGITAL_INPUT Nowplaying_Refresh, Nowplaying_PgUp, Nowplaying_PgDn; //, NowplayingCheckCurrent;

DIGITAL_INPUT Jump_Home;//display the home list
DIGITAL_INPUT Jump_Genres;//, Genres_PgUp, Genres_PgDn;
DIGITAL_INPUT Jump_Artists;//, Artists_PgUp, Artists_PgDn;
DIGITAL_INPUT Jump_Albums;//, Albums_PgUp, Albums_PgDn;
DIGITAL_INPUT Jump_Tracks;//, Titles_PgUp, Titles_PgDn;
DIGITAL_INPUT Jump_Playlists;//, Playlists_PgUp, Playlists_PgDn;
DIGITAL_INPUT Jump_Dynamic;//, Dynamic_PgUp, Dynamic_PgDn;
DIGITAL_INPUT Jump_Pandora;
DIGITAL_INPUT Jump_Favorites;

DIGITAL_INPUT BrowseCurrentSongGenre,BrowseCurrentSongArtist,BrowseCurrentSongAlbum;

//DIGITAL_INPUT //INPUTS FOR CURRENTSONG GENRE,ARTIST,ALBUM

STRING_INPUT PlaylistPlay$[256], PlaylistResume$[256], DynamicResume$[256];

DIGITAL_INPUT PandoraRate_Up, PandoraRate_Dn;

DIGITAL_INPUT search_clear;
DIGITAL_INPUT search_backspace;
BUFFER_INPUT search_in$[64];
STRING_OUTPUT search_in_fb;


ANALOG_INPUT InPageList;
ANALOG_INPUT InPageNowplaying;

ANALOG_INPUT NowplayingShowPrev;

ANALOG_OUTPUT OutListCount, OutListBar;
ANALOG_OUTPUT OutNowplayingCount, OutNowplayingBar;

STRING_OUTPUT ListName$;

DIGITAL_OUTPUT mode_play_fb;
DIGITAL_OUTPUT mode_pause_fb;
DIGITAL_OUTPUT mode_stop_fb;

DIGITAL_OUTPUT repeat_off_fb;
DIGITAL_OUTPUT repeat_track_fb;
DIGITAL_OUTPUT repeat_all_fb;

DIGITAL_OUTPUT shuffle_off_fb;
DIGITAL_OUTPUT shuffle_track_fb;
DIGITAL_OUTPUT shuffle_album_fb;

DIGITAL_OUTPUT CurrentsongRemote_fb;
DIGITAL_OUTPUT CurrentsongIsPandora;

STRING_OUTPUT CurrentsongTitle;
STRING_OUTPUT CurrentsongTitleFormatted;
STRING_OUTPUT CurrentsongAlbum;
STRING_OUTPUT CurrentsongArtist;
STRING_OUTPUT CurrentsongGenre;
STRING_OUTPUT CurrentsongCoverURL;
STRING_OUTPUT CurrentsongTime;
STRING_OUTPUT CurrentsongRate;
STRING_OUTPUT CurrentsongDuration;


DIGITAL_OUTPUT NowplayingPageFlip;
STRING_OUTPUT NowplayingTitle$[10];
STRING_OUTPUT NowplayingArtist$[10];
STRING_OUTPUT NowplayingAlbum$[10];
DIGITAL_OUTPUT NowplayingCurrentSong[10,10];

DIGITAL_INPUT NowplayingPlay[10];
DIGITAL_INPUT NowplayingRemove[10];
DIGITAL_INPUT NowplayingMoveUp[10];
DIGITAL_INPUT NowPlayingMoveDown[10];

STRING_OUTPUT List$[10,10];

DIGITAL_INPUT ListSelect[10];
DIGITAL_INPUT ListPlay[10];
DIGITAL_INPUT ListAdd[10];
DIGITAL_INPUT ListInsert[10,10];

///////////////////////////// Parameters

STRING_PARAMETER PlayerID$[17], SqueezeCenterIPAddr$[16];   //for PlayerID please use the MAC address as found on SB Server player information page.
INTEGER_PARAMETER SqueezeCenterPort;
INTEGER_PARAMETER NumberOfList, NumberOfNowplaying;
//, NumberOfGenres, NumberOfArtists, NumberOfAlbums, NumberOfTitles, NumberOfPlaylists, NumberOfDynamic, NumberOfSearch;

/////////////////////////// Sockets
TCP_CLIENT TCPClient[16384];

////////////////// Global Variables
INTEGER FirstGenre, TotalGenres, GenreFirstNumber, ActiveGenreID;
INTEGER FirstArtist, TotalArtists, ArtistFirstNumber, ActiveArtistID;
INTEGER FirstAlbum, TotalAlbums, AlbumFirstNumber, ActiveAlbumID;
INTEGER FirstTitle, TotalTitles, TitleFirstNumber, ActiveTrackID;
INTEGER FirstPlaylist, TotalPlaylists, PlaylistFirstNumber, ActivePlaylistID;
INTEGER FirstNowplaying, TotalNowplaying, NowplayingFirstNumber;
INTEGER FirstDynamic, TotalDynamic, DynamicFirstNumber;
INTEGER FirstSearch, TotalSearch, SearchFirstNumber;
INTEGER FirstPandora, TotalPandora, PandoraFirstNumber;
INTEGER FirstFavorites, TotalFavorites, FavoritesFirstNumber;
INTEGER progGenres, progArtists, progAlbums, progTitles, progPlaylists, progNowplaying, progDynamic, progSearch;
INTEGER CurrentsongIndex, CurrentGenreID, CurrentArtistID, CurrentAlbumID, CurrentTrackID;
INTEGER Repeat, Shuffle, CurrentTrackRemote, CurrentTrackIsPandora;
INTEGER status_request_time;

INTEGER NumberOfGenres, NumberOfArtists, NumberOfAlbums, NumberOfTitles, NumberOfPlaylists, NumberOfDynamic, NumberOfSearch;
INTEGER NumberOfPandora;
INTEGER NumberOfFavorites;

INTEGER nextChar;
STRING search_in[64];

INTEGER OutGenreCount, OutGenresBar;
INTEGER OutArtistCount, OutArtistsBar;
INTEGER OutAlbumCount, OutAlbumsBar;
INTEGER OutTitleCount, OutTitlesBar;
INTEGER OutPlaylistCount, OutPlaylistsBar;
INTEGER OutDynamicCount, OutDynamicBar;
INTEGER OutSearchCount, OutSearchBar; 
INTEGER OutPandoraCount,OutPandoraBar;
INTEGER OutFavoritesCount,OutFavoritesBar;

INTEGER Nowplaying_refresh_enable;

Integer DisplayNowplaying, DisplayNowplaying_old;

INTEGER ListType[5], ListFirst[5];
INTEGER GenreID[10], ArtistID[10], AlbumID[10], TitleAlbumID[10], TitleTracknum[10], TrackID[10], PlaylistID[10], SearchID[10], SearchIDType[10], NowplayingIndex[10], NowplayingID[10];
INTEGER PandoraIsAudio[10], PandoraHasItems[10];
INTEGER FavoritesIsAudio[10], FavoritesHasItems[10];

STRING PlayerIDOut[32];
STRING Mode$[8],CurrentTrackTime$[32],CurrentTrackRate$[8],CurrentTrackDuration$[32],CurrentTrackTitle$[256],CurrentTrackGenre$[256],CurrentTrackArtist$[256],CurrentTrackAlbum$[256];
STRING CurrentTrackRemoteCover$[512], CurrentTrackURL$[256];

STRING restrictorGenres[256], restrictorArtists[256], restrictorAlbums[256], restrictorTitles[256], restrictorPlaylists[256], restrictorSearch[256];
STRING restrictorPandora[256];
STRING restrictorFavorites[256];
STRING ListName[5][256], ListRestrictor[5][256], ListHome[10][16];
STRING ActiveGenre[128], ActiveArtist[128], ActiveAlbum[128], ActiveTitle[128], ActivePlaylist[128], ActiveDynamic[128], ActiveDynamicFile[128];
STRING ActivePandoraName[256], ActivePandoraID[256], PandoraTitle[256];
STRING ActiveFavoritesName[256], ActiveFavoritesID[256], FavoritesTitle[256];

STRING Genre[10][256], Artist[10][256], Album[10][256], Title[10][256], Playlist[10][256],PlaylistRaw[10][256], DynamicName[10][256], DynamicFile[10][256], Search[10][256];
STRING NowplayingTitle[10][256], NowplayingArtist[10][256], NowplayingAlbum[10][256];
STRING OUT$[1024], IN$[16384], Dynamic$Internal[256][256], DynamicID[256][256];
STRING PandoraName[10][256], PandoraID[10][64], PandoraType[10][256];
STRING FavoritesName[10][256], FavoritesID[10][64], FavoritesType[10][256];

////////////// TCPIP Connection
PUSH TCPIP_Connect
{
    SIGNED_INTEGER status;
    status = SocketConnectClient (TCPClient, SqueezeCenterIPAddr$, SqueezeCenterPort, TCPIP_ReconnectEnable);
    if (status < 0)
        Print("Error connecting socket to address %s on port  %d", 
            SqueezeCenterIPAddr$, SqueezeCenterPort);
}

RELEASE TCPIP_Connect
{
    SIGNED_INTEGER status;
    status = SocketDisconnectClient (TCPClient);
if (status < 0)
    Print("Error disconnecting socket to address %s on port  %d", 
            SqueezeCenterIPAddr$, SqueezeCenterPort);
}

SOCKETCONNECT TCPClient
{
    SIGNED_LONG_INTEGER PortNumber;
    SIGNED_INTEGER LocalStatus;
    STRING RemoteIPAddress[20];
    STRING RequestedAddress[256];
    TCPIP_Connected = 1;
    LocalStatus = SocketGetAddressAsRequested(TCPClient, RequestedAddress);
    if (LocalStatus < 0)
        Print("Error getting remote ip address. %d\n", LocalStatus);
    Print("OnConnect: Connect call to %s successful\n", RequestedAddress);
    PortNumber = SocketGetPortNumber(TCPClient);
    if (PortNumber < 0)
        Print("Error getting client port number. %ld\n", PortNumber);
    LocalStatus = SocketGetRemoteIPAddress(TCPClient, RemoteIPAddress);
    if (LocalStatus < 0)
        Print("Error getting remote ip address. %d\n", LocalStatus);
    Print("OnConnect: Connected to port %ld on address %s\n", 
                PortNumber, RemoteIPAddress);
//SOCKET Startup procedure
//
//	SocketSend(TCPClient, "subscribe playlist newsong\n");
//
//	above line commented out as a test: verify that the current song feedback stays reliable
//
	Makestring(out$,"%s status - 1 tags:pgsaeluK charset:ascii subscribe:0\n",PlayerID$);  //subscribe to status updates including currentsong (different than other subscribes)
	SocketSend(TCPClient, out$);
}

SOCKETDISCONNECT TCPClient
{
    TCPIP_Connected = 0;
    if (TCPIP_Connect)
        Print("Socket disconnected remotely");
    Else
        Print("Local disconnect complete.");
}

SOCKETSTATUS TCPClient
{
    SIGNED_INTEGER Status;
    Status = SocketGetStatus();
    TCPIP_Status = Status;
    Print("The SocketGetStatus returns:       %d\n", Status);
    Print("The TCPClient.SocketStatus returns: %d\n", TCPClient.SocketStatus);
}


//////////////////////// FUNCTIONS

Function ListShiftFwd_fn()
{
	Integer i;
	For (i = 0 to 3)
	{
		ListType[5-i] = ListType[4-i];
		ListName[5-i] = ListName[4-i];
		ListRestrictor[5-i] = ListRestrictor[4-i];
		ListFirst[5-i] = ListFirst[4-i];
//		trace("History %u = Type: %u, Name: %s, Restr: %s, 1st: %u",5-i,ListType[4-i],ListName[4-i],ListRestrictor[4-i],ListFirst[4-i]);
	}
}

Function ListShiftBk_fn()
{
	Integer i;//
	For (i = 1 to 4)
	{
		ListType[i] = ListType[i+1];
		ListName[i] = ListName[i+1];
		ListRestrictor[i] = ListRestrictor[i+1];
		ListFirst[i] = ListFirst[i+1];
//		trace("History %u = Type: %u, Name: %s, Restr: %s, 1st: %u",i,ListType[i],ListName[i],ListRestrictor[i],ListFirst[i]);
	}
	ListType[5] = 0;
	ListName[5] = "Home";
	ListRestrictor[5] = "";
	ListFirst[5] = 0;
	ListName$ = ListName[1];

	If (ListType[1] = 0)
	{
		SetArray(List$," ");
		For (i = 1 to 10)
		{
			List$[i] = ListHome[i];
		} 		
	}
	Else If (ListType[1] = 1)
	{
		FirstGenre = ListFirst[1];
		restrictorGenres = ListRestrictor[1];
	}
	Else If (ListType[1] = 2)
	{
		FirstArtist = ListFirst[1];
		restrictorArtists = ListRestrictor[1];
	}
	Else If (ListType[1] = 3)
	{
		FirstAlbum = ListFirst[1];
		restrictorAlbums = ListRestrictor[1];
	}
	Else If (ListType[1] = 4)
	{
		FirstTitle = ListFirst[1];
		restrictorTitles = ListRestrictor[1];
	}
	Else If (ListType[1] = 5)
	{
		FirstPlaylist = ListFirst[1];
		restrictorPlaylists = ListRestrictor[1];
	}
	Else If (ListType[1] = 6)
	{
		FirstDynamic = ListFirst[1];
	}
//	Else If (listType[1] = 7)
//  ...some code for nowplaying list type
//
	Else If (ListType[1] = 8)
	{
		FirstSearch = ListFirst[1];
		restrictorSearch = ListRestrictor[1];
	}
	Else If (ListType[1] = 9) {
		FirstPandora = ListFirst[1];
		restrictorPandora = ListRestrictor[1];
	} 
	Else If (ListType[1] = 10) {
		FirstFavorites = ListFirst[1];
		restrictorFavorites = ListRestrictor[1];
	}

}



Function GenresRefresh_fn()
{
	ListName$ = ListName[1];
	makestring(OUT$,"genres %u %u %s charset:ascii \n", FirstGenre, NumberOfGenres, restrictorGenres);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
//	ListType = 1;
}

Function ArtistsRefresh_fn()
{
	ListName$ = ListName[1];
	makestring(OUT$,"artists %u %u %s charset:ascii \n", FirstArtist, NumberOfArtists, restrictorArtists);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
//	ListType = 2;
}

Function AlbumsRefresh_fn()
{
	ListName$ = ListName[1];
	makestring(OUT$,"albums %u %u %s charset:ascii \n",FirstAlbum, NumberOfAlbums, restrictorAlbums);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
//	ListType = 3;
}

Function TitlesRefresh_fn()
{
	ListName$ = ListName[1];
	makestring(OUT$,"titles %u %u %s charset:ascii \n", FirstTitle, NumberOfTitles, restrictorTitles);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
//	ListType = 4;
}

Function PlaylistsRefresh_fn()
{
	ListName$ = ListName[1];
	makestring (OUT$,"playlists %u %u %s charset:ascii \n",FirstPlaylist, NumberOfPlaylists, restrictorPlaylists);
	trace("sending: %s",OUT$);
	SocketSend (TCPClient,OUT$);
//	ListType = 5;
}

Function DynamicRefresh_fn()
{
	ListName$ = ListName[1];
	makestring(OUT$,"dynamicplaylist playlists 1 %u %u charset:ascii \n",FirstDynamic, NumberOfDynamic);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
//	ListType = 6
}

Function SearchRefresh_fn()
{
	ListName$ = ListName[1];
	makestring(OUT$,"search %u %u term:%s charset:ascii \n",FirstSearch,NumberOfSearch, search_in);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
//	ListType = 8
} //yyy
Function PandoraRefresh_fn() 
{
	ListName$ = ListName[1];
	makestring(OUT$,"pandora items %u %u %s charset:ascii \n",FirstPandora,NumberOfPandora, restrictorPandora);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}   

Function FavoritesRefresh_fn() 
{
	ListName$ = ListName[1];
	makestring(OUT$,"favorites items %u %u %s charset:ascii \n",FirstFavorites,NumberOfFavorites, restrictorFavorites);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}


Function NowplayingRefresh_fn()
{
//	makestring (Out$,"%s status - %u tags:al \n",PlayerID$, NumberOfNowplaying);
	If (CurrentsongIndex - NowplayingShowPrev S< 0)
		FirstNowplaying = 0;
	Else
		FirstNowplaying = CurrentsongIndex - NowplayingShowPrev;
	makestring (Out$,"%s status %u %u tags:al charset:ascii \n",PlayerID$,FirstNowplaying, NumberOfNowplaying);
	trace("sending: %s",OUT$);
	SocketSend (TCPClient,OUT$);
}

Function ListRefresh_fn()
{
	If (ListType[1] = 1)
	{
		GenresRefresh_fn();
	}
	Else If (ListType[1] = 2)
	{
		ArtistsRefresh_fn();
	}
	Else If (ListType[1] = 3)
	{
		AlbumsRefresh_fn();
	}
	Else If (ListType[1] = 4)
	{
		TitlesRefresh_fn();
	}
	Else If (ListType[1] = 5)
	{
		PlaylistsRefresh_fn();
	}
	Else If (ListType[1] = 6)
	{
		DynamicRefresh_fn();
	}
//	Else If (ListType[1] = 7)
//	{
//	nowplaying
//	}
	Else If (ListType[1] = 8)
	{
		SearchRefresh_fn();
	}
	Else If (ListType[1] = 9)
	{
		PandoraRefresh_fn();
	}  
	Else If (ListType[1] = 10)
	{
		FavoritesRefresh_fn();
	}

}
 
Function Home_PgReset_fn()
{
	Integer i;
	ListShiftFwd_fn();
	ListType[1] = 0;
	ListName[1] = "Home";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	ListName$ = ListName[1];
	SetArray(List$," ");
	For (i = 1 to 10)
	{
		List$[i] = ListHome[i];
	}
}

Function Genres_PgReset_fn()
{
	FirstGenre = 0;
	restrictorGenres = "";
    ListShiftFwd_fn();
	ListType[1] = 1;
	ListName[1] = "All Genres";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	GenresRefresh_fn();
}

Function Artists_PgReset_fn()
{
	FirstArtist = 0;
	restrictorArtists = "";
    ListShiftFwd_fn();
	ListType[1] = 2;
	ListName[1] = "All Artists";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	ArtistsRefresh_fn();
}

Function Albums_PgReset_fn()
{
	FirstAlbum = 0;
	restrictorAlbums = "";
    ListShiftFwd_fn();
	ListType[1] = 3;
	ListName[1] = "All Albums";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	AlbumsRefresh_fn();
}

Function Titles_PgReset_fn()
{
	FirstTitle = 0;
	restrictorTitles = "tags:te";
    ListShiftFwd_fn();
	ListType[1] = 4;
	ListName[1] = "All Titles";
	ListRestrictor[1] = "tags:te";
	ListFirst[1] = 0;
	TitlesRefresh_fn();
}

Function Playlists_PgReset_fn()
{
	FirstPlaylist = 0;
	restrictorPlaylists = "";
    ListShiftFwd_fn();
	ListType[1] = 5;
	ListName[1] = "All Playlists";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	PlaylistsRefresh_fn();
}

Function Dynamic_PgReset_fn()
{
	FirstDynamic = 0;
    ListShiftFwd_fn();
	ListType[1] = 6;
	ListName[1] = "All DynamicPlaylists";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	DynamicRefresh_fn();
}
Function Pandora_PgReset_fn() {
	FirstPandora = 0;
    ListShiftFwd_fn();
	ListType[1] = 9;
	ListName[1] = "Pandora";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	PandoraRefresh_fn();
	
} 
Function Favorites_PgReset_fn() {
	FirstFavorites = 0;
    ListShiftFwd_fn();
	ListType[1] = 10;
	ListName[1] = "Favorites";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	FavoritesRefresh_fn();
	
}


Function Nowplaying_PgReset_fn()
{
	FirstNowplaying = 0;
    Nowplaying_refresh_enable = 1;
	NowplayingRefresh_fn();
}



Function Genres_PgUp_fn()
{
    If (FirstGenre < NumberOfGenres)
	{
		FirstGenre = (TotalGenres / NumberOfGenres) * NumberOfGenres;
	}
	Else
	{
		FirstGenre = FirstGenre - NumberOfGenres;
    }
	ListFirst[1] = FirstGenre;
	GenresRefresh_fn();
}

Function Artists_PgUp_fn()
{
    If (FirstArtist < NumberOfArtists)
	{		
		FirstArtist = (TotalArtists / NumberOfArtists) * NumberOfArtists;
	}
	Else
	{
		FirstArtist = FirstArtist - NumberOfArtists;
    }
	ListFirst[1] = FirstArtist;
	ArtistsRefresh_fn();
}

Function Albums_PgUp_fn()
{
    If (FirstAlbum < NumberOfAlbums)
	{
		FirstAlbum = (TotalAlbums / NumberOfAlbums) * NumberOfAlbums;
	}
	Else
	{
		FirstAlbum = FirstAlbum - NumberOfAlbums;
    }
	ListFirst[1] = FirstAlbum;
	AlbumsRefresh_fn();
}

Function Titles_PgUp_fn()
{
    If (FirstTitle < NumberOfTitles)
	{
		FirstTitle = (TotalTitles / NumberOfTitles) * NumberOfTitles;
	}
	Else
	{
		FirstTitle = FirstTitle - NumberOfTitles;
    }
	ListFirst[1] = FirstTitle;
	TitlesRefresh_fn();
}

Function Playlists_PgUp_fn()
{
    If (FirstPlaylist < NumberOfPlaylists)
	{
		FirstPlaylist = (TotalPlaylists / NumberOfPlaylists) * NumberOfPlaylists;
	}
	Else
	{
		FirstPlaylist = FirstPlaylist - NumberOfPlaylists;
    }
	ListFirst[1] = FirstPlaylist;
	PlaylistsRefresh_fn();
}

Function Dynamic_PgUp_fn()
{
    If (FirstDynamic < NumberOfDynamic)
	{
		FirstDynamic = (TotalDynamic / NumberOfDynamic) * NumberOfDynamic;
	}
	Else
	{
		FirstDynamic = FirstDynamic - NumberOfDynamic;
    }
	ListFirst[1] = FirstDynamic;
	DynamicRefresh_fn();
}

Function Search_PgUp_fn()
{
    If (FirstSearch < NumberOfSearch)
	{
		FirstSearch = (TotalSearch / NumberOfSearch) * NumberOfSearch;
	}
	Else
	{
		FirstSearch = FirstSearch - NumberOfSearch;
    }
	ListFirst[1] = FirstSearch;
	SearchRefresh_fn();
}

Function Nowplaying_PgUp_fn()
{
//	Cancelwait(Nowplaying_refresh_enable_timer_pgup);
    Nowplaying_refresh_enable = 0;
	If (FirstNowplaying < NumberOfNowplaying)
	{
		FirstNowplaying = (TotalNowplaying / NumberOfNowplaying) * NumberOfNowplaying;
	}
	Else
	{
		FirstNowplaying = FirstNowplaying - NumberOfNowplaying;
    }
	makestring (Out$,"%s status %u %u tags:al charset:ascii \n",PlayerID$,FirstNowplaying, NumberOfNowplaying);
//	trace("sending: %s",OUT$);
	SocketSend (TCPClient,OUT$);

	Wait(Nowplaying_refresh_enable_time,Nowplaying_refresh_enable_timer_pgup)
	{
			Nowplaying_refresh_enable = 1;
	}
}
Function Pandora_PgUp_fn(){
    If (FirstPandora < NumberOfPandora)
	{
		FirstPandora = (TotalPandora / NumberOfPandora) * NumberOfPandora;
	}
	Else
	{
		FirstPandora = FirstPandora - NumberOfPandora;
    }
	ListFirst[1] = FirstPandora;
	PandoraRefresh_fn();
}
Function Favorites_PgUp_fn(){
    If (FirstFavorites < NumberOfFavorites)
	{
		FirstFavorites = (TotalFavorites / NumberOfFavorites) * NumberOfFavorites;
	}
	Else
	{
		FirstFavorites = FirstFavorites - NumberOfFavorites;
    }
	ListFirst[1] = FirstFavorites;
	FavoritesRefresh_fn();
}


Function Genres_PgDn_fn()
{
	If (FirstGenre + NumberOfGenres <= TotalGenres)
	{
    	FirstGenre = FirstGenre + NumberOfGenres;
	}
	Else
	{
		FirstGenre = 0;
	}
	ListFirst[1] = FirstGenre;
	GenresRefresh_fn();
}

Function Artists_PgDn_fn()
{
	If (FirstArtist + NumberOfArtists <= TotalArtists)
	{
    	FirstArtist = FirstArtist + NumberOfArtists;
	}
	Else
	{
		FirstArtist = 0;
	}
	ListFirst[1] = FirstArtist;
	ArtistsRefresh_fn();
}

Function Albums_PgDn_fn()
{
	If (FirstAlbum + NumberOfAlbums <= TotalAlbums)
	{
    	FirstAlbum = FirstAlbum + NumberOfAlbums;
	}
	Else
	{
		FirstAlbum = 0;
	}
	ListFirst[1] = FirstAlbum;
	AlbumsRefresh_fn();
}


Function Titles_PgDn_fn()
{
	If (FirstTitle + NumberOfTitles <= TotalTitles)
	{
    	FirstTitle = FirstTitle + NumberOfTitles;
	}
	Else
	{
		FirstTitle = 0;
	}
	ListFirst[1] = FirstTitle;
	TitlesRefresh_fn();
}

Function Playlists_PgDn_fn()
{
	If (FirstPlaylist + NumberOfPlaylists <= TotalPlaylists)
	{
    	FirstPlaylist = FirstPlaylist + NumberOfPlaylists;
	}
	Else
	{
		FirstPlaylist = 0;
	}
	ListFirst[1] = FirstPlaylist;
	PlaylistsRefresh_fn();
}

Function Dynamic_PgDn_fn()
{
	If (FirstDynamic + NumberOfDynamic <= TotalDynamic)
	{
    	FirstDynamic = FirstDynamic + NumberOfDynamic;
	}
	Else
	{
		FirstDynamic = 0;
	}
	ListFirst[1] = FirstDynamic;
	DynamicRefresh_fn();
}
Function Search_PgDn_fn()
{
	If (FirstSearch + NumberOfSearch <= TotalSearch)
	{
    	FirstSearch = FirstSearch + NumberOfSearch;
	}
	Else
	{
		FirstSearch = 0;
	}
	ListFirst[1] = FirstSearch;
	SearchRefresh_fn();
}



Function Nowplaying_PgDn_fn()
{
//	Cancelwait(Nowplaying_refresh_enable_timer);
    Nowplaying_refresh_enable = 0;

    If (FirstNowplaying + NumberOfNowplaying <= TotalNowplaying)
	{
		FirstNowplaying = FirstNowplaying + NumberOfNowplaying;
	}
	Else
	{
		FirstNowplaying = 0;
    }
	makestring (Out$,"%s status %u %u tags:al charset:ascii \n",PlayerID$,FirstNowplaying, NumberOfNowplaying);
//	trace("sending: %s",OUT$);
	SocketSend (TCPClient,OUT$);

	Wait(Nowplaying_refresh_enable_time,Nowpplaying_refresh_enable_timer_pgdn)
	{
			Nowplaying_refresh_enable = 1;
	}
}
Function Pandora_PgDn_fn()
{
	If (FirstPandora + NumberOfPandora <= TotalPandora)
	{
    	FirstPandora = FirstPandora + NumberOfPandora;
	}
	Else
	{
		FirstPandora = 0;
	}
	ListFirst[1] = FirstPandora;
	PandoraRefresh_fn();
}   
Function Favorites_PgDn_fn()
{
	If (FirstFavorites + NumberOfFavorites <= TotalFavorites)
	{
    	FirstFavorites = FirstFavorites + NumberOfFavorites;
	}
	Else
	{
		FirstFavorites = 0;
	}
	ListFirst[1] = FirstFavorites;
	FavoritesRefresh_fn();
}

Function HomeListSelect_fn()
{
	Integer i;

	ListShiftFwd_fn();
	ListFirst[1] = 0;
	
	For (i = 1 to NumberofList)
	{
		If (ListSelect[i] = 1)
		{
			If (i=1){Favorites_PgReset_fn();}
			Else If (i=2){Genres_PgReset_fn();}
			Else If (i=3){Artists_PgReset_fn();}
			Else If (i=4){Albums_PgReset_fn();}
			Else If (i=5){Playlists_PgReset_fn();}
			Else If (i=6){Dynamic_PgReset_fn();}
			Else If (i=7){Pandora_PgReset_fn();}  
			Else If (i=8){Titles_PgReset_fn();}
		}
	}
}

Function GenreListSelect_fn()
{
	Integer i;

    ListShiftFwd_fn();
	ListType[1] = 2;
	ListFirst[1] = 0;
	
	For (i = 1 to NumberOfList)
	{
    	If (ListSelect[i] = 1)
		{
			ActiveGenreID = GenreID[i];
			ActiveGenre = Genre[i];
			makestring(ListName[1], "Artists in %s",ActiveGenre);
			makestring(restrictorArtists,"genre_id:%u",GenreID[i]);
			ListRestrictor[1] = restrictorArtists;
			restrictorAlbums = restrictorArtists;
			restrictorTitles = restrictorArtists + " tags:te";
			FirstArtist = 0;
			ArtistsRefresh_fn();
/*			Wait(50,waitListGenreAlbums)
			{
				AlbumsRefresh_fn();
				Wait(50,waitListGenreTitles)
					TitlesRefresh_fn();
			}
*/
		}
	}
	ListName$ = ListName[1];
}

Function ArtistListSelect_fn()
{
	Integer i;

	ListShiftFwd_fn();	
	ListType[1] = 3;
	ListFirst[1] = 0;

	For (i = 1 to NumberOfList)
	{
    	If (ListSelect[i] = 1)
		{
			ActiveArtistID = ArtistID[i];
			ActiveArtist = Artist[i];
/*			If (restrictorArtists != "")
			{
				makestring(ListName[1],"%s: Albums for %s",ActiveGenre,ActiveArtist);
			}
			Else
				makestring(ListName[1], "Albums for %s",ActiveArtist);
			makestring(restrictorAlbums,"%s artist_id:%u",restrictorArtists,ArtistID[i]);
*/
			makestring(ListName[1], "Albums for %s",ActiveArtist);			
			makestring(restrictorAlbums,"artist_id:%u",ArtistID[i]);
			ListRestrictor[1] = restrictorAlbums;
			FirstAlbum = 0;
			AlbumsRefresh_fn();
/*			restrictorTitles = restrictorAlbums + " tags:te";
			Wait(20,waitListArtistTitles)
			TitlesRefresh_fn();
*/
		}
	}
	ListName$ = ListName[1];
}

Function AlbumListSelect_fn()
{
	Integer i;

	ListShiftFwd_fn();
	ListType[1] = 4;
	ListFirst[1] = 0;

	For (i = 1 to NumberOfList)
	{
    	If (ListSelect[i] = 1)
		{
			ActiveAlbumID = AlbumID[i];
			ActiveAlbum = Album[i];
			makestring(ListName[1],"Titles in %s",ActiveAlbum);
			makestring(restrictorTitles,"album_id:%u sort:tracknum tags:te",AlbumID[i]);
			ListRestrictor[1] = restrictorTitles;
			FirstTitle = 0;
			TitlesRefresh_fn();
		}
	}
	ListName$ = ListName[1];
}

Function TitleListSelect_fn()
{
	Integer i;

	For (i = 1 to NumberOfList)
	{
    	If (ListSelect[i] = 1)
		{
			ActiveAlbumID = TitleAlbumID[i];
			ActiveTrackID = TrackID[i];
			ActiveTitle = Title[i];
			ActivePlaylist = "";
			makestring(OUT$,"%s playlistcontrol cmd:load album_id:%u \n",PlayerID$, TitleAlbumID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			makestring(OUT$,"%s playlist index %u \n",PlayerID$, TitleTracknum[i] - 1);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
		}
	}
}

Function PlaylistListSelect_fn()
{
	Integer i;

	For (i = 1 to NumberOfList)
	{
    	If (ListSelect[i] = 1)
		{
			makestring(OUT$,"%s dynamicplaylist playlist stop\n",PlayerID$); //stop adding songs with the dynamic playlist plugin
			trace("sending: %s",OUT$);
			SocketSend(TCPClient, OUT$);

			ActivePlaylistID = PlaylistID[i]; //set the active playlist ID
			trace("ActivePlaylistID = %u",PlaylistID[i]);
			ActivePlaylist = PlaylistRaw[i]; //set the active playlist name
            trace("ActivePlaylist = %s",PlaylistRaw[i]);

//			makestring(OUT$,"%s playlist resume %s\n",PlayerID$,PlaylistRaw[i]); // play the selected playlist by resuming from it's last saved position

			// the following replaces the preceding line to enable iTunes playlists to work
			makestring(OUT$,"%s playlistcontrol cmd:load playlist_id:%u \n",PlayerID$,PlaylistID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient, OUT$);
			makestring(OUT$,"%s playlist index 0 \n",PlayerID$);
			// end fix for iTunes			

			trace("sending: %s",OUT$);
			SocketSend(TCPClient, OUT$);
			pulse(20,NowplayingPageFlip);
		}
	}
}

Function DynamicListSelect_fn()
{
	Integer i;
	For (i = 1 to NumberOfList)
	{
    	If (ListSelect[i] = 1)
		{
			ActiveDynamicFile = DynamicFile[i];
			ActiveDynamic = DynamicName[i];
			ActivePlaylist = "";
			makestring(OUT$,"%s dynamicplaylist playlist continue %s\n",PlayerID$, ActiveDynamicFile);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient, OUT$);
			pulse(20,NowplayingPageFlip);
		}
	}
}
Function SearchListSelect_fn() //yyy
{
	Integer i;

	ListShiftFwd_fn();
	ListFirst[1] = 0;
	
	trace("SearchListSelect_fn");

	For (i = 1 to NumberOfList)
	{
    	If (ListSelect[i] = 1)
		{
			If (SearchIDType[i] = 1) //searchID is an artist_id
			{
				ListType[1] = 3;
				ActiveArtistID = SearchID[i];
				ActiveArtist = Search[i];
				makestring(ListName[1], "Albums for %s",ActiveArtist);
				makestring(restrictorAlbums,"artist_id:%u",SearchID[i]);
				ListRestrictor[1] = restrictorAlbums;
// zzz  look for something that is leaving the "search:" in the albums when I click on a search result
//				restrictorTitles = restrictorAlbums + " tags:te";
				FirstAlbum = 0;
				AlbumsRefresh_fn();
			}
			Else If (SearchIDType[i] = 2) // SearchID is an album_id
			{
				ListType[1] = 4;
				ActiveAlbumID = SearchID[i];
				ActiveAlbum = Search[i];
				makestring(ListName[1],"Titles in %s",ActiveAlbum);
				makestring(restrictorTitles,"album_id:%u sort:tracknum tags:te",SearchID[i]);
				ListRestrictor[1] = restrictorTitles;
				FirstTitle = 0;
				TitlesRefresh_fn();
			}
			Else If (SearchIDType[i] = 3) //searchID is a track_id
			{	
				// insert then next track
				ActiveTrackID = SearchID[i];
				ActiveTitle = Search[i];
				ActivePlaylist = "";
				makestring(OUT$,"%s playlistcontrol cmd:insert track_id:%u \n",PlayerID$, SearchID[i]);
				trace("sending: %s",OUT$);
				SocketSend(TCPClient,OUT$);
				delay(10);
				makestring(OUT$,"%s playlist index +1\n", PlayerID$);
				trace("sending: %s",OUT$);
				SocketSend(TCPClient,OUT$);
			}
		}
	}
	ListName$ = ListName[1];
}
Function PandoraListSelect_fn(){

	Integer i;
	ListShiftFwd_fn();
	ListFirst[1] = 0;

	For (i = 1 to NumberOfList)	{
    	If (ListSelect[i] = 1){
			If (PandoraIsAudio[i] = 0){
				ActivePandoraID = PandoraID[i];
				ActivePandoraName = PandoraName[i];
				makestring(ListName[1],"Pandora: %s",PandoraTitle);
				makestring(restrictorPandora,"item_id:%s",PandoraID[i]);
				ListRestrictor[1] = restrictorPandora;
				FirstPandora = 0;
				PandoraRefresh_fn();
			}
			Else If (PandoraIsAudio[i] = 1){
				makestring(OUT$,"%s pandora playlist play item_id:%s\n",PlayerID$, PandoraID[i]);
				// 00%3A04%3A20%3A05%3Ab7%3A38 pandora playlist play item_id%3A66b996d3.0.0
				trace("sending: %s",OUT$);
				SocketSend(TCPClient, OUT$);
//				pulse(20,NowplayingPageFlip);
			}
		}
	}
	ListName$ = ListName[1];
}

Function FavoritesListSelect_fn(){

	Integer i;

	For (i = 1 to NumberOfList)	{
    	If (ListSelect[i] = 1){
			If (FavoritesIsAudio[i] = 0){
				ListShiftFwd_fn();
				ListFirst[1] = 0;
				ActiveFavoritesID = FavoritesID[i];
				ActiveFavoritesName = FavoritesName[i];
				makestring(ListName[1],"Favorites: %s",FavoritesTitle);
				makestring(restrictorFavorites,"item_id:%s",FavoritesID[i]);
				ListRestrictor[1] = restrictorFavorites;
				FirstFavorites = 0;
				FavoritesRefresh_fn();
				ListName$ = ListName[1];
			}
			Else If (FavoritesIsAudio[i] = 1){
				makestring(OUT$,"%s favorites playlist play item_id:%s\n",PlayerID$, FavoritesID[i]);
				// 00%3A04%3A20%3A05%3Ab7%3A38 Favorites playlist play item_id%3A66b996d3.0.0
				trace("sending: %s",OUT$);
				SocketSend(TCPClient, OUT$);
				pulse(20,NowplayingPageFlip);
			}
		}
	}
}

Function GenreListPlay_fn()
{
	Integer i;
	For (i = 1 to NumberOfGenres)
	{
    	If (ListPlay[i] = 1)
		{
			makestring(OUT$,"%s playlistcontrol cmd:load genre_id:%u \n",PlayerID$, GenreID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			ActiveGenreID = GenreID[i];
			ActivePlaylist = "";
		}
	}
}

Function ArtistListPlay_fn()
{
	Integer i;
	For (i = 1 to NumberOfArtists)
	{
    	If (ListPlay[i] = 1)
		{
			makestring(OUT$,"%s playlistcontrol cmd:load artist_id:%u \n",PlayerID$, ArtistID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			ActiveArtistID = ArtistID[i];
			ActivePlaylist = "";
		}
	}
}

Function AlbumListPlay_fn()
{
	Integer i;
	For (i = 1 to NumberOfAlbums)
	{
    	If (ListPlay[i] = 1)
		{
			makestring(OUT$,"%s playlistcontrol cmd:load album_id:%u \n",PlayerID$, AlbumID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			ActiveAlbumID = AlbumID[i];
			ActivePlaylist = "";
		}
	}
}

Function TitleListPlay_fn()
{
	Integer i;
	For (i = 1 to NumberOfTitles)
	{
    	If (ListPlay[i] = 1)
		{
			makestring(OUT$,"%s playlistcontrol cmd:insert track_id:%u \n",PlayerID$, TrackID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			delay(10);
			makestring(OUT$,"%s playlist index +1\n", PlayerID$);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			ActiveTrackID = TrackID[i];
			ActivePlaylist = "";
		}
	}
}

Function PlaylistListPlay_fn()
{
	Integer i;
	For (i = 1 to NumberOfPlaylists)
	{
    	If (ListPlay[i] = 1)
		{
			makestring(OUT$,"%s dynamicplaylist playlist stop\n",PlayerID$); //stop adding songs with the dynamic playlist plugin
			trace("sending: %s",OUT$);
			SocketSend(TCPClient, OUT$);

			makestring(OUT$,"%s playlistcontrol cmd:load playlist_id:%u \n",PlayerID$, PlaylistID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			ActivePlaylistID = PlaylistID[i];
			ActivePlaylist = PlaylistRaw[i];

			pulse(20,NowplayingPageFlip);
		}
	}
}

Function DynamicListPlay_fn()
{
	Integer i;
	For (i = 1 to NumberOfDynamic)
	{
    	If (ListPlay[i] = 1)
		{
			ActiveDynamicFile = DynamicFile[i];
			ActiveDynamic = DynamicName[i];
			ActivePlaylist = "";
			makestring(OUT$,"%s dynamicplaylist playlist continue %s\n",PlayerID$, ActiveDynamicFile);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient, OUT$);
		}
	}
}

Function FavoritesListPlay_fn(){
	Integer i;

	For (i = 1 to NumberOfList)	{
    	If (ListPlay[i] = 1){
			makestring(OUT$,"%s favorites playlist insert item_id:%s\n",PlayerID$, FavoritesID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient, OUT$);
//			pulse(20,NowplayingPageFlip);

			makestring(OUT$,"%s playlist index +1\n", PlayerID$);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);

		}
	}
}


Function SearchListPlay_fn(){
	Integer i;

	ActivePlaylist = "";
	ListShiftFwd_fn();
	ListFirst[1] = 0;
	
	trace("SearchListPLay_fn");

	For (i = 1 to NumberOfList)
	{
    	If (ListPlay[i] = 1)
		{
			If (SearchIDType[i] = 1) //searchID is an artist_id
			{
				makestring(OUT$,"%s playlistcontrol cmd:insert artist_id:%u \n",PlayerID$, SearchID[i]);
				trace("sending: %s",OUT$);
				SocketSend(TCPClient,OUT$);
				delay(10);
				makestring(OUT$,"%s playlist index +1\n", PlayerID$);
				trace("sending: %s",OUT$);
				SocketSend(TCPClient,OUT$);
			}
			Else If (SearchIDType[i] = 2) // SearchID is an album_id
			{
				makestring(OUT$,"%s playlistcontrol cmd:insert album_id:%u \n",PlayerID$, SearchID[i]);
				trace("sending: %s",OUT$);
				SocketSend(TCPClient,OUT$);
				delay(10);
				makestring(OUT$,"%s playlist index +1\n", PlayerID$);
				trace("sending: %s",OUT$);
				SocketSend(TCPClient,OUT$);
			}
			Else If (SearchIDType[i] = 3) //searchID is a track_id
			{	
				ActiveTrackID = SearchID[i];
				ActiveTitle = Search[i];
				makestring(OUT$,"%s playlistcontrol cmd:insert track_id:%u \n",PlayerID$, SearchID[i]);
				trace("sending: %s",OUT$);
				SocketSend(TCPClient,OUT$);
				delay(10);
				makestring(OUT$,"%s playlist index +1\n", PlayerID$);
				trace("sending: %s",OUT$);
				SocketSend(TCPClient,OUT$);
			}
		}
	}
}

Function GenreListAdd_fn()
{
	Integer i;
	For (i = 1 to NumberOfGenres)
	{
    	If (ListAdd[i] = 1)
		{
			makestring(OUT$,"%s playlistcontrol cmd:add genre_id:%u \n",PlayerID$, GenreID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			ActiveGenreID = GenreID[i];
			ActivePlaylist = "";
		}
	}

}

Function ArtistListAdd_fn()
{
	Integer i;
	For (i = 1 to NumberOfArtists)
	{
    	If (ListAdd[i] = 1)
		{
			makestring(OUT$,"%s playlistcontrol cmd:add artist_id:%u \n",PlayerID$, ArtistID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			ActiveArtistID = ArtistID[i];
			ActivePlaylist = "";
		}
	}

}

Function AlbumListAdd_fn()
{
	Integer i;
	For (i = 1 to NumberOfAlbums)
	{
    	If (ListAdd[i] = 1)
		{
			makestring(OUT$,"%s playlistcontrol cmd:add album_id:%u \n",PlayerID$, AlbumID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			ActiveAlbumID = AlbumID[i];
			ActivePlaylist = "";
		}
	}
}

Function TitleListAdd_fn()
{
	Integer i;
	For (i = 1 to NumberOfTitles)
	{
    	If (ListAdd[i] = 1)
		{
			makestring(OUT$,"%s playlistcontrol cmd:add track_id:%u \n",PlayerID$, TrackID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			ActiveTrackID = TrackID[i];
			ActivePlaylist = "";
		}
	}
}

Function PlaylistListAdd_fn()
{
	Integer i;
	For (i = 1 to NumberOfPlaylists)
	{
    	If (ListAdd[i] = 1)
		{
			makestring(OUT$,"%s playlistcontrol cmd:add playlist_id:%u \n",PlayerID$, PlaylistID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			ActivePlaylistID = 0; // clear the active playlist ID (used to set to PlaylistID[i])
			ActivePlaylist = ""; // clear the active playlist
		}
	}
}

Function FavoritesListAdd_fn(){

	Integer i;

	For (i = 1 to NumberOfList)	{
    	If (ListAdd[i] = 1){
			makestring(OUT$,"%s favorites playlist add item_id:%s\n",PlayerID$, FavoritesID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient, OUT$);
//			pulse(20,NowplayingPageFlip);
		}
	}
}


Function SearchListAdd_fn()
{
// add code here for add action of a search result
	Integer i;

	ActivePlaylist = "";
	ListShiftFwd_fn();
	ListFirst[1] = 0;
	
	trace("SearchListPLay_fn");

	For (i = 1 to NumberOfList)
	{
    	If (ListPlay[i] = 1)
		{
			If (SearchIDType[i] = 1) //searchID is an artist_id
			{
				makestring(OUT$,"%s playlistcontrol cmd:add artist_id:%u \n",PlayerID$, SearchID[i]);
				trace("sending: %s",OUT$);
				SocketSend(TCPClient,OUT$);
			}
			Else If (SearchIDType[i] = 2) // SearchID is an album_id
			{
				makestring(OUT$,"%s playlistcontrol cmd:add album_id:%u \n",PlayerID$, SearchID[i]);
				trace("sending: %s",OUT$);
				SocketSend(TCPClient,OUT$);
			}
			Else If (SearchIDType[i] = 3) //searchID is a track_id
			{	
				ActiveTrackID = SearchID[i];
				ActiveTitle = Search[i];
				makestring(OUT$,"%s playlistcontrol cmd:add track_id:%u \n",PlayerID$, SearchID[i]);
				trace("sending: %s",OUT$);
				SocketSend(TCPClient,OUT$);
			}
		}
	}

}

Function GenreListInsert_fn()
{
	Integer i;
	For (i = 1 to NumberOfGenres)
	{
    	If (ListInsert[i] = 1)
		{
			makestring(OUT$,"%s playlistcontrol cmd:insert genre_id:%u \n",PlayerID$, GenreID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			ActiveGenreID = GenreID[i];
			ActivePlaylist = "";
		}
	}
}

Function ArtistListInsert_fn()
{
	Integer i;
	For (i = 1 to NumberOfArtists)
	{
    	If (ListInsert[i] = 1)
		{
			makestring(OUT$,"%s playlistcontrol cmd:insert artist_id:%u \n",PlayerID$, ArtistID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			ActiveArtistID = ArtistID[i];
			ActivePlaylist = "";
		}
	}
}

Function AlbumListInsert_fn()
{
	Integer i;
	For (i = 1 to NumberOfAlbums)
	{
    	If (ListInsert[i] = 1)
		{
			makestring(OUT$,"%s playlistcontrol cmd:insert album_id:%u \n",PlayerID$, AlbumID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			ActiveAlbumID = AlbumID[i];
			ActivePlaylist = "";
		}
	}
}

Function TitleListInsert_fn()
{
	Integer i;
	For (i = 1 to NumberOfTitles)
	{
    	If (ListInsert[i] = 1)
		{
			makestring(OUT$,"%s playlistcontrol cmd:insert track_id:%u \n",PlayerID$, TrackID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			ActiveTrackID = TrackID[i];
			ActivePlaylist = "";
		}
	}
}

Function PlaylistListInsert_fn(){
	Integer i;
	For (i = 1 to NumberOfPlaylists)
	{
    	If (ListInsert[i] = 1)
		{
			makestring(OUT$,"%s playlistcontrol cmd:insert playlist_id:%u \n",PlayerID$, PlaylistID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
			ActivePlaylistID = 0; // clear the active playlist ID 
			ActivePlaylist = ""; // clear the active playlist
		}
	}
}

Function FavoritesListInsert_fn(){
	Integer i;

	For (i = 1 to NumberOfList)	{
    	If (ListInsert[i] = 1){
			makestring(OUT$,"%s favorites playlist insert item_id:%s\n",PlayerID$, FavoritesID[i]);
			trace("sending: %s",OUT$);
			SocketSend(TCPClient, OUT$);
//			pulse(20,NowplayingPageFlip);
		}
	}
}

Function SearchListInsert_fn(){
	Integer i;

	ActivePlaylist = "";
	ListShiftFwd_fn();
	ListFirst[1] = 0;
	
	trace("SearchListInsert_fn");

	For (i = 1 to NumberOfList)
	{
    	If (ListInsert[i] = 1)
		{
			If (SearchIDType[i] = 1) //searchID is an artist_id
			{
				makestring(OUT$,"%s playlistcontrol cmd:insert artist_id:%u \n",PlayerID$, SearchID[i]);
				trace("sending: %s",OUT$);
				SocketSend(TCPClient,OUT$);
			}
			Else If (SearchIDType[i] = 2) // SearchID is an album_id
			{
				makestring(OUT$,"%s playlistcontrol cmd:insert album_id:%u \n",PlayerID$, SearchID[i]);
				trace("sending: %s",OUT$);
				SocketSend(TCPClient,OUT$);
			}
			Else If (SearchIDType[i] = 3) //searchID is a track_id
			{	
				ActiveTrackID = SearchID[i];
				ActiveTitle = Search[i];
				makestring(OUT$,"%s playlistcontrol cmd:insert track_id:%u \n",PlayerID$, SearchID[i]);
				trace("sending: %s",OUT$);
				SocketSend(TCPClient,OUT$);
			}
		}
	}
}

Function NowplayingPlay_fn()
{
	Integer i;
	For (i = 1 to NumberOfNowplaying)
	{
		If (NowplayingPlay[i] = 1)
		{
			If (NowplayingIndex[i] = 65534){
				Nowplaying_PgReset_fn();
			}
			Else {
				makestring(OUT$,"%s playlist index %u \n",PlayerID$, NowplayingIndex[i]);
				trace("sending: %s",OUT$);
				SocketSend(TCPClient,OUT$);
			}
		}
	}
}

Function NowplayingRemove_fn()
{
	Integer i;
	For (i = 1 to NumberOfNowplaying)
	{
		If (NowplayingRemove[i] = 1 && NowplayingIndex[i] <> 65534)
		{
			Activeplaylist = "";
			makestring(OUT$,"%s playlist delete %u \n",PlayerID$, NowplayingIndex[i]);//xxx
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
		}
	}
}

Function NowplayingMoveUp_fn()
{
	Integer i;
	For (i = 1 to NumberOfNowplaying)
	{
		If (NowplayingMoveUp[i] = 1 && NowplayingIndex[i] <> 65534)
		{
			makestring(OUT$,"%s playlist move %u %u \n",PlayerID$, NowplayingIndex[i], NowplayingIndex[i]-1);//xxx
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
		}
	}
}

Function NowplayingMoveDown_fn()
{
	Integer i;
	For (i = 1 to NumberOfNowplaying)
	{
		If (NowplayingMoveDown[i] = 1 && NowplayingIndex[i] <> 65534)
		{
			makestring(OUT$,"%s playlist move %u %u \n",PlayerID$, NowplayingIndex[i], NowplayingIndex[i]+1);//xxx
			trace("sending: %s",OUT$);
			SocketSend(TCPClient,OUT$);
		}
	}
}

Function Search_fn()
{
	Integer i;
	If (ListType[1] != 8)
	{
		ListShiftFwd_fn(); //move the history forward to make room for the new entry
		ListType[1] = 8; //search list type = 8
		trace("adding search to history");
	}
	ListFirst[1]=0;
	makestring(ListName[1],"\"%s\" anywhere",search_in);
	makestring(restrictorSearch,"%s",search_in);
	ListRestrictor[1] = search_in;
	FirstSearch = 0;
	SearchRefresh_fn();
	ListName$ = ListName[1];
}

Function Search_genres_fn()
{
	Integer i;
	If (ListType[1] != 1)
	{
	    ListShiftFwd_fn();
		ListType[1] = 1;
	}
	ListFirst[1] = 0;
	makestring(ListName[1], "\"%s\" in Genres",search_in);
    makestring(restrictorGenres,"search:%s",search_in);
	ListRestrictor[1] = restrictorGenres;
	FirstGenre = 0;
	GenresRefresh_fn();
	ListName$ = ListName[1];
}

Function Search_artists_fn()
{
	Integer i;
	If (ListType[1] != 2)
	{
	    ListShiftFwd_fn();
		ListType[1] = 2;
	}
	ListFirst[1] = 0;
	makestring(ListName[1], "\"%s\" in Artists",search_in);
    makestring(restrictorArtists,"search:%s",search_in);
	ListRestrictor[1] = restrictorArtists;
	FirstArtist = 0;
	ArtistsRefresh_fn();
	ListName$ = ListName[1];
}

Function Search_albums_fn()
{
	Integer i;
	If (ListType[1] != 3)
	{
	    ListShiftFwd_fn();
		ListType[1] = 3;
	}
	ListFirst[1] = 0;
	makestring(ListName[1], "\"%s\" in Albums",search_in);
    makestring(restrictorAlbums,"search:%s",search_in);
	ListRestrictor[1] = restrictorAlbums;
	FirstAlbum = 0;
	AlbumsRefresh_fn();
	ListName$ = ListName[1];
}

Function Search_titles_fn()
{
	Integer i;
	If (ListType[1] != 4)
	{
	    ListShiftFwd_fn();
		ListType[1] = 4;
	}
	ListFirst[1] = 0;
	makestring(ListName[1], "\"%s\" in Titles",search_in);
    makestring(restrictorTitles,"search:%s tags:te",search_in);
	ListRestrictor[1] = restrictorTitles;
	FirstTitle = 0;
	TitlesRefresh_fn();
	ListName$ = ListName[1];
}

Function Search_playlists_fn()
{
	Integer i;
	If (ListType[1] != 5)
	{
    	ListShiftFwd_fn();
		ListType[1] = 5;
	}
	ListFirst[1] = 0;
	makestring(ListName[1], "\"%s\" in Playlists",search_in);
    makestring(restrictorPlaylists,"search:%s",search_in);
	ListRestrictor[1] = restrictorPlaylists;
	FirstPlaylist = 0;
	PlaylistsRefresh_fn();
	ListName$ = ListName[1];
}

String_Function ParsePercent(STRING Parse$)
{
	Integer i, length, char;
	String output$[256], char$[1], chunk$[6], dump[3];

	i = 1;
	output$ = "";
	While(i <= len(parse$))
	{
		char = Byte(parse$, i); // char = integer equivalent of the byte at position "in" from output$
		if (char = '%') // if char is the escape character, %
		{
			if (i > 1)
			{
				output$ = output$ + removebylength(i - 1,parse$);
			}
			output$ = output$ + Chr(HexToI(mid(Parse$,2,2)));
			dump = removebylength(3,parse$);
			i = 1;
		}
		else
		{
			i = i + 1;
		}
	}
	output$ = output$ + parse$;
	return (output$);
}


String_Function FormatPlayerID(String PlayerID)
{
	Integer i, indexMatch;
	String playeridLocal[32], dump$[256], KeepL$[256], output$[256], search$[1], replace$[3];

	PlayerIDLocal = PlayerID;

	While (Find(":",PlayerIDLocal))
	{
     	indexMatch = Find(":",PlayerIDLocal); // ##:$$ --> 3
		KeepL$ = RemoveByLength(indexMatch - 1,PlayerIDLocal); //  keepl$ = ##
		dump$ = RemoveByLength(1,PlayerIDLocal); // dump$ = :
		PlayerIDLocal = KeepL$ + "%3A" + PlayerIDLocal;
	}
	Return(PlayerIDLocal);
}

//////////////// Events 
PUSH Jump_Home
{
 	Home_PgReset_fn();
}

PUSH Jump_Genres
{
	Genres_PgReset_fn();
}

PUSH Jump_Artists
{
	Artists_PgReset_fn();
}

PUSH Jump_Albums
{
	Albums_PgReset_fn();
}

PUSH Jump_Tracks
{
	Titles_PgReset_fn();
}

PUSH Jump_Playlists
{
	Playlists_PgReset_fn();
}

PUSH Jump_Dynamic
{
	Dynamic_PgReset_fn();
}
PUSH Jump_Pandora{
	Pandora_PgReset_fn();
}   

PUSH Jump_Favorites{
	Favorites_PgReset_fn();
}


PUSH List_Back
{
	ListShiftBk_fn();
	ListRefresh_fn();	
}

PUSH Nowplaying_Refresh
{
	Nowplaying_PgReset_fn();
}

CHANGE InPageList
{
	If (ListType[1] = 1)
	{
	FirstGenre = (65535 - InPageList) * TotalGenres / 65535;
	ListFirst[1] = FirstGenre;
	GenresRefresh_fn();
	}
	Else If (ListType[1] = 2)
	{
	FirstArtist = (65535 - InPageList) * TotalArtists / 65535;
	ListFirst[1] = FirstArtist;
	ArtistsRefresh_fn();
	}
	Else If (ListType[1] = 3)
	{
	FirstAlbum = (65535 - InPageList) * TotalAlbums / 65535;
	ListFirst[1] = FirstAlbum;
	AlbumsRefresh_fn();
	}
	Else If (ListType[1] = 4)
	{
	FirstTitle = (65535 - InPageList) * TotalTitles / 65535;
	ListFirst[1] = FirstTitle;
	TitlesRefresh_fn();
	}
	Else If (ListType[1] = 5)
	{
	FirstPlaylist = (65535 - InPageList) * TotalPlaylists / 65535;
	ListFirst[1] = FirstPlaylist;
	PlaylistsRefresh_fn();
	}
	Else If (ListType[1] = 6)
	{
	FirstDynamic = (65535 - InPageList) * TotalDynamic / 65535;
	ListFirst[1] = FirstDynamic;
	DynamicRefresh_fn();
	}
	Else If (ListType[1] = 9)
	{
	FirstPandora = (65535 - InPageList) * TotalPandora / 65535;
	ListFirst[1] = FirstPandora;
	PandoraRefresh_fn();
	}             
	Else If (ListType[1] = 10)    //TODO: DEbug/test to find out the Favorites ListType
	{
	FirstFavorites = (65535 - InPageList) * TotalFavorites / 65535;
	ListFirst[1] = FirstFavorites;
	FavoritesRefresh_fn();
	}

}
CHANGE InPageNowplaying
{
	FirstNowplaying = (65535 - InPageNowplaying) * TotalNowplaying / 65535;
	NowplayingRefresh_fn();

}

PUSH List_PgUp
{
	If (ListType[1] = 1)
	{
		Genres_PgUp_fn(); //Genres code
	}
	Else If (ListType[1] = 2)
	{
		Artists_PgUp_fn(); //Artists code
	}
	Else If (ListType[1] = 3)
	{
		Albums_PgUp_fn();//Albums code
	}
	Else If (ListType[1] = 4)
	{
		Titles_PgUp_fn();//Titles code
	}
	Else If (ListType[1] = 5)
	{
		Playlists_PgUp_fn();//Playlists code
	}
	Else If (ListType[1] = 6)
	{
		Dynamic_PgUp_fn();//Dynamicplaylist code
	}
	Else If (ListType[1] = 8)
	{
		Search_PgUp_fn(); //Search results code
	}
	Else If (ListType[1] = 9)
	{
		Pandora_PgUp_fn(); //Pandora results code
    } 
    Else If (ListType[1] = 10)
	{
		Favorites_PgUp_fn(); //Favorites results code
    }

}

PUSH Nowplaying_PgUp
{
	Nowplaying_PgUp_fn();
}

PUSH List_PgDn
{
	If (ListType[1] = 1)
	{
		Genres_PgDn_fn();//Genres code
	}
	Else If (ListType[1] = 2)
	{
		Artists_PgDn_fn();//Artists code
	}
	Else If (ListType[1] = 3)
	{
		Albums_PgDn_fn();//Albums code
	}
	Else If (ListType[1] = 4)
	{
		Titles_PgDn_fn();//Titles code
	}
	Else If (ListType[1] = 5)
	{
		Playlists_PgDn_fn();//Playlists code
	}
	Else If (ListType[1] = 6)
	{
		Dynamic_PgDn_fn();//DynamicPlaylists code
	}
	Else If (ListType[1] = 8)
	{
		Search_PgDn_fn(); //Search results code
	}
	Else If (ListType[1] = 9)
	{
		Pandora_PgDn_fn(); //Pandora results code
    }   
    Else If (ListType[1] = 10)
	{
		Favorites_PgDn_fn(); //Favorites results code
    }

}
PUSH Nowplaying_PgDn
{
	Nowplaying_PgDn_fn();
}



PUSH ListSelect
{
	If (ListType[1] = 0)
	{
		HomeListSelect_fn();//Home page code
	}
	Else If (ListType[1] = 1)
	{
		GenreListSelect_fn();//Genres code
	}
	Else If (ListType[1] = 2)
	{
		ArtistListSelect_fn();//Artists code
	}
	Else If (ListType[1] = 3)
	{
		AlbumListSelect_fn();//Albums code
	}
	Else If (ListType[1] = 4)
	{
		TitleListSelect_fn();//Titles code
	}
	Else If (ListType[1] = 5)
	{
		PlaylistListSelect_fn();//Playlists code
	}
	Else If (ListType[1] = 6)
	{
		DynamicListSelect_fn(); //DynamicPlaylists code
	}
	Else If (ListType[1] = 8)
	{
		SearchListSelect_fn(); //Search results code
	}
	Else If (ListType[1] = 9)
	{
		PandoraListSelect_fn(); //Pandora results code
    }  
    Else If (ListType[1] = 10)
	{
		FavoritesListSelect_fn(); //Favorites results code
    }

}

PUSH ListPlay
{
	If (ListType[1] = 1)
	{
		GenreListPlay_fn(); //Genres code
	}
	Else If (ListType[1] = 2)
	{
		ArtistListPlay_fn(); //Artists code
	}
	Else If (ListType[1] = 3)
	{
		AlbumListPlay_fn(); //Albums code
	}
	Else If (ListType[1] = 4)
	{
		TitleListPlay_fn(); //Titles code
	}
	Else If (ListType[1] = 5)
	{
		PlaylistListPlay_fn(); //Playlists code
	}
	Else If (ListType[1] = 6)
	{
		DynamicListPlay_fn(); //DynamicPlaylists code
	}	
	Else If (ListType[1] = 8)
	{
		SearchListPlay_fn(); //Search results code
	}
	Else If (ListType[1] = 9)
	{
		PandoraListSelect_fn(); //Pandora results code
    }  
    Else If (ListType[1] = 10)
	{
		FavoritesListPlay_fn(); //Favorites results code
    }
}

PUSH ListAdd
{
	If (ListType[1] = 1)
	{
		GenreListAdd_fn(); //Genres code
	}
	Else If (ListType[1] = 2)
	{
		ArtistListAdd_fn(); //Artists code
	}
	Else If (ListType[1] = 3)
	{
		AlbumListAdd_fn(); //Albums code
	}
	Else If (ListType[1] = 4)
	{
		TitleListAdd_fn(); //Titles code
	}
	Else If (ListType[1] = 5)
	{
		PlaylistListAdd_fn(); //Playlists code
	}
	Else If (ListType[1] = 6)
	{
		DynamicListPlay_fn(); //DynamicPlaylists code
	}
	Else If (ListType[1] = 8)
	{
		SearchListAdd_fn(); //Search results code
	}
		Else If (ListType[1] = 9)
	{
		PandoraListSelect_fn(); //Pandora results code
    }  
    Else If (ListType[1] = 10)
	{
		FavoritesListAdd_fn(); //Favorites results code
    }
}

PUSH ListInsert
{
	If (ListType[1] = 1)
	{
		GenreListInsert_fn(); //Genres code
	}
	Else If (ListType[1] = 2)
	{
		ArtistListInsert_fn(); //Artists code
	}
	Else If (ListType[1] = 3)
	{
		AlbumListInsert_fn(); //Albums code
	}
	Else If (ListType[1] = 4)
	{
		TitleListInsert_fn(); //Titles code
	}
	Else If (ListType[1] = 5)
	{
		PlaylistListInsert_fn(); //Playlists code
	}
	Else If (ListType[1] = 6)
	{
		DynamicListPlay_fn(); //DynamicPlaylists code
	}
	Else If (ListType[1] = 8)
	{
		SearchListInsert_fn(); //Search results code
	}
	Else If (ListType[1] = 9)
	{
		PandoraListSelect_fn(); //Pandora results code
    }  
    Else If (ListType[1] = 10)
	{
		FavoritesListInsert_fn(); //Favorites results code
    }


}

PUSH NowplayingPlay {
	NowplayingPlay_fn();
}

PUSH NowplayingRemove {
	NowplayingRemove_fn();
}

PUSH NowplayingMoveUp {
	NowplayingMoveUp_fn();
}

PUSH NowplayingMoveDown {
	NowplayingMoveDown_fn();
}

PUSH Play {
	makestring(OUT$,"%s play\n", PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}

PUSH Pause_On {
	makestring(OUT$,"%s pause 1\n", PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);

	If (ActivePlaylist != "" && Playlist_Save_Enable = 1)
	{
		makestring(OUT$,"%s playlist save %s\n",PlayerID$, ActivePlaylist);
		trace("sending: %s",OUT$);
		SocketSend(TCPClient,OUT$);
		trace("saved playlist: %s",ActivePlaylist);
	}
}

PUSH Pause_Off {
	makestring(OUT$,"%s pause 0\n", PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}

PUSH Pause_Tog {
	If ((ActivePlaylist != "") && (mode$ = "play") && Playlist_Save_Enable = 1)
	{
		makestring(OUT$,"%s playlist save %s\n",PlayerID$, ActivePlaylist);
		trace("sending: %s",OUT$);
		SocketSend(TCPClient,OUT$);
		trace("saved playlist: %s",ActivePlaylist);
	}

	makestring(OUT$,"%s pause\n",PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}

PUSH Stop {
	ActivePlaylist = "";

	makestring(OUT$,"%s dynamicplaylist playlist stop\n",PlayerID$); //stop adding songs with the dynamic playlist plugin
	trace("sending: %s",OUT$);
	SocketSend(TCPClient, OUT$);

	makestring(OUT$,"%s stop\n", PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}

PUSH Next {
	makestring(OUT$,"%s playlist index +1\n", PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}

PUSH Prev {
	makestring(OUT$,"%s button rew.single\n", PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}

PUSH FFW {
//	makestring(OUT$,"%s rate 4\n", PlayerID$);
//	trace("sending: %s",OUT$);
//	SocketSend(TCPClient,OUT$);
}
RELEASE FFW {
//	makestring(OUT$,"%s rate 1\n", PlayerID$);
//	trace("sending: %s",OUT$);
//	SocketSend(TCPClient,OUT$);
}

PUSH REW {
//	makestring(OUT$,"%s rate -4\n", PlayerID$);
//	trace("sending: %s",OUT$);
//	SocketSend(TCPClient,OUT$);
}
RELEASE REW {
//	makestring(OUT$,"%s rate 1\n", PlayerID$);
//	trace("sending: %s",OUT$);
//	SocketSend(TCPClient,OUT$);
}

PUSH Pwr_On {
	makestring(OUT$,"%s power 1\n", PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}


PUSH Pwr_Off {
	makestring(OUT$,"%s power 0\n", PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}

PUSH Repeat_Off {
	makestring(OUT$,"%s playlist repeat 0\n", PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}

PUSH Repeat_Track {
	makestring(OUT$,"%s playlist repeat 1\n", PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}

PUSH Repeat_All {
	makestring(OUT$,"%s playlist repeat 2\n", PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}

PUSH Shuffle_Off {
	makestring(OUT$,"%s playlist shuffle 0\n", PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}

PUSH Shuffle_Track {
	makestring(OUT$,"%s playlist shuffle 1\n", PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}

PUSH Shuffle_Album {
	makestring(OUT$,"%s playlist shuffle 2\n", PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}

CHANGE PlaylistPlay$ {
	ActivePlaylist = "";

	makestring(OUT$,"%s dynamicplaylist playlist stop\n",PlayerID$); //stop adding songs with the dynamic playlist plugin
	trace("sending: %s",OUT$);
	SocketSend(TCPClient, OUT$);

	makestring(OUT$,"%s playlist play %s\n",PlayerID$,PlaylistPlay$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}


CHANGE PlaylistResume$ {
	If ((ActivePlaylist != "") && (Playlist_Save_Enable = 1))
	{
		makestring(OUT$,"%s playlist save %s\n",PlayerID$, ActivePlaylist);
		trace("sending: %s",OUT$);
		SocketSend(TCPClient,OUT$);
	}

	makestring(OUT$,"%s dynamicplaylist playlist stop\n",PlayerID$); //stop adding songs with the dynamic playlist plugin
	trace("sending: %s",OUT$);
	SocketSend(TCPClient, OUT$);

	makestring(OUT$,"%s playlist resume %s\n",PlayerID$, PlaylistResume$); // start the desired playlist where playing when last saved
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
	ActivePlaylist = PlaylistResume$;
	trace("active playlist: %s",ActivePlaylist);
}
/*
PUSH PlaylistSave
{
	makestring(OUT$,"%s playlist save %s\n",PlayerID$, ActivePlaylist);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient,OUT$);
}
*/

CHANGE DynamicResume$ {
	ActivePlaylist = "";
	makestring(OUT$,"%s dynamicplaylist playlist continue %s\n",PlayerID$, DynamicResume$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient, OUT$);
}

PUSH BrowseCurrentSongGenre {
// set artist restrictor to CurrentGenreID
// CurrentTrackGenre$ is the name of the Genre

	If (ListType[1] != 2)
	{
	    ListShiftFwd_fn();
		ListType[1] = 2;
	}
	ListFirst[1] = 0;

	ActiveGenreID = CurrentGenreID;
	ActiveGenre = CurrentTrackGenre$;
	makestring(ListName[1], "%s",CurrentTrackGenre$);
	makestring(restrictorArtists,"genre_id:%u",CurrentGenreID);
	ListRestrictor[1] = restrictorArtists;
	FirstArtist = 0;
	ArtistsRefresh_fn();
	ListName$ = ListName[1];
}

PUSH BrowseCurrentSongArtist {
	If (ListType[1] != 3)
	{
	    ListShiftFwd_fn();
		ListType[1] = 3;
	}
	ListFirst[1] = 0;

	ActiveArtistID = CurrentArtistID;
	ActiveArtist = CurrentTrackArtist$;
	makestring(ListName[1], "Albums for %s",CurrentTrackArtist$);
	makestring(restrictorAlbums,"artist_id:%u",CurrentArtistID);
	ListRestrictor[1] = restrictorAlbums;
	FirstAlbum = 0;
	AlbumsRefresh_fn();
	ListName$ = ListName[1];
}

PUSH BrowseCurrentSongAlbum {
	If (ListType[1] != 4)
	{
	    ListShiftFwd_fn();
		ListType[1] = 4;
	}
	ListFirst[1] = 0;

	ActiveAlbumID = CurrentAlbumID;
	ActiveAlbum = CurrentTrackAlbum$;
	makestring(ListName[1], "Titles in %s",CurrentTrackAlbum$);
	makestring(restrictorTitles,"album_id:%u sort:tracknum tags:te",CurrentAlbumID);
	ListRestrictor[1] = restrictorTitles;
	FirstTitle = 0;
	TitlesRefresh_fn();
	ListName$ = ListName[1];
}
               
PUSH PandoraRate_Up {
//	<playerid> <pandora> rate <0|1>
	makestring(OUT$,"%s pandora rate 1\n",PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient, OUT$);
}


PUSH PandoraRate_Dn {
	makestring(OUT$,"%s pandora rate 0\n",PlayerID$);
	trace("sending: %s",OUT$);
	SocketSend(TCPClient, OUT$);
}


PUSH search_clear {
	Clearbuffer(search_in$);
	search_in = "";
	search_in_fb = " ";
//	makestring(ListName[1],"\"%s\" anywhere",search_in);
//	makestring(search_in_fb,"%s",search_in);
	If (ListType[1] = 1)
	{
		makestring(ListName[1], "\"%s\" in Genres",search_in); //Genres code
		ListName$ = ListName[1];
	}
	Else If (ListType[1] = 2)
	{
		makestring(ListName[1], "\"%s\" in Artists",search_in); //Artists code
		ListName$ = ListName[1];
	}
	Else If (ListType[1] = 3)
	{
		makestring(ListName[1], "\"%s\" in Albums",search_in); //Albums code
		ListName$ = ListName[1];
	}
	Else If (ListType[1] = 4)
	{
		makestring(ListName[1], "\"%s\" in Tracks",search_in); //Titles code
		ListName$ = ListName[1];
	}
	Else If (ListType[1] = 8)
	{
		makestring(ListName[1],"\"%s\" anywhere",search_in); //DynamicPlaylists code
		ListName$ = ListName[1];
	}		
}

/*
PUSH search_resubmit
{
	If (ListType[1] = 1)
	{
		search_genres_fn(); //Genres code
	}
	Else If (ListType[1] = 2)
	{
		search_artists_fn(); //Artists code
	}
	Else If (ListType[1] = 3)
	{
		search_albums_fn(); //Albums code
	}
	Else If (ListType[1] = 4)
	{
		search_titles_fn(); //Titles code
	}
	Else If (ListType[1] = 5)
	{
		search_playlists_fn(); //Playlists code
	}
	Else If (ListType[1] = 6)
	{
		search_playlists_fn(); //DynamicPlaylists code
	}		
	Else If (ListType[1] = 8)
	{
		search_fn();
	}
}
*/

PUSH search_backspace {
	search_in = left(search_in,len(search_in)-1); //take the left portion of search_in, leaving out one character
	makestring(search_in_fb,"%s",search_in); // copy the search_in variable to the feedback output

	If (ListType[1] = 1)
	{
		search_genres_fn(); //Genres search code
	}
	Else If (ListType[1] = 2)
	{
		search_artists_fn(); //Artists search code
	}
	Else If (ListType[1] = 3)
	{
		search_albums_fn(); //Albums search code
	}
	Else If (ListType[1] = 4)
	{
		search_titles_fn(); //Titles search code
	}
	Else If (ListType[1] = 5)
	{
		search_playlists_fn(); //Playlists search code
	}
	Else If (ListType[1] = 6)
	{
		search_playlists_fn(); //DynamicPlaylists search code
	}
	Else If (ListType[1] = 0 || ListType[1] = 8)
	{
		search_fn(); //General Search function //yyy
	}
}

CHANGE search_in$ {
	do
	{
		nextChar = getc(search_in$);  //get the next character
		search_in = search_in + chr(nextChar); //add that character to the search_in variable
	} until (len(search_in$) = 0);  //empty the buffer
	trace("search_in = %s",search_in);
	
	makestring(search_in_fb,"%s",search_in); // copy the search_in variable to the feedback output

	If (ListType[1] = 1)
	{
		search_genres_fn(); //Genres search code
	}
	Else If (ListType[1] = 2)
	{
		search_artists_fn(); //Artists search code
	}
	Else If (ListType[1] = 3)
	{
		search_albums_fn(); //Albums search code
	}
	Else If (ListType[1] = 4)
	{
		search_titles_fn(); //Titles search code
	}
	Else If (ListType[1] = 5)
	{
		search_playlists_fn(); //Playlists search code
	}
	Else If (ListType[1] = 6)
	{
		search_playlists_fn(); //DynamicPlaylists search code
	}
	Else If (ListType[1] = 0 || ListType[1] = 8)
	{
		search_fn(); //General Search function //yyy
	}
}

SOCKETRECEIVE TCPClient {
	Integer delimited, i, progLocal, j;
	Integer LenInStatus$, LenInGenres$, LenInArtists$, LenInAlbums$, LenInTitles$, LenInPlaylists$, LenInNowplaying$, LenInDynamic$, LenInSearch$;
	Integer LenInPandora$; 
	Integer LenInFavorites$;
	Integer indexStart, indexEnd, Length;
	Integer indexTest;
	Integer Time_min, Time_sec, Time_rmd;	
	Integer ListLengthGenres, ListLengthArtists, ListLengthAlbums, ListLengthTitles, ListLengthPlaylists, ListLengthNowplaying, ListLengthDynamic, ListLengthSearch;
	Integer ListLengthPandora;   
	Integer ListLengthFavorites;

	String In$[16384], InGenres$[16384], InArtists$[16384], InAlbums$[16384], InTitles$[16384], InSearch$[16384]; 
	String InPlaylists$[16384], InDynamic$[16384], InNowplaying$[16384], InCurrentsong$[4096], InStatus$[4096], InTime$[2048]; 
	String InPandora$[16384];   
	String InFavorites$[16384];

	String  debugLocal[16384]; 
    string debug[16384];
	indexStart = 1;
	indexEnd = 1;
	In$ = Gather("\n",TCPClient.SocketRxBuf);
	ClearBuffer(TCPClient.SocketRxBuf);

debug = left(in$,256);  
If (find(" time ",debug,27) = 0){
	print ("from device: %s",debug);
}

If (Find("status - 1",In$,1) > 0) {
	trace("parsing status");
//
// ToDo: add parsing for additional ID values; CurrentGenreID, CurrentArtistID, CurrentAlbumID
// 
//
	InStatus$ = In$;
	In$ = "";
   	LenInStatus$ = Len(InStatus$);

	indexStart = Find(" mode%3A",InStatus$,26) + 8;
	indexEnd = Find(" ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	Mode$ = Mid(InStatus$,indexStart, Length);
	InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));
    
	indexStart = Find(" remote%3A",InStatus$,1);
	if(indexStart > 0) {
		indexStart = indexStart + 10;
		indexEnd = Find(" ",InStatus$,indexStart);
		Length = indexEnd - indexStart;
		CurrentTrackRemote = Atoi(Mid(InStatus$,indexStart,Length));
		InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));
	}
	Else {CurrentTrackRemote = 0;}
	
	indexStart = Find(" time%3A",InStatus$,1) + 8;
	indexEnd = Find(" ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	CurrentTrackTime$ = Mid(InStatus$,indexStart, Length);
	InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));

	indexStart = Find(" rate%3A",InStatus$,1) + 8;
	indexEnd = Find(" ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	CurrentTrackRate$ = Mid(InStatus$,indexStart, Length);
	InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));

	indexStart = Find(" duration%3A",InStatus$,1);
	if (indexStart > 0)	{
		indexStart = indexStart + 12;
		indexEnd = Find(" ",InStatus$,indexStart);
		Length = indexEnd - indexStart;
		CurrentTrackDuration$ = Mid(InStatus$,indexStart, Length);
		InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));
	}
	Else {CurrentTrackDuration$ = "<time unavailable>";}

	indexStart = Find(" playlist%20repeat%3A",InStatus$,1) + 21;
	indexEnd = Find(" ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	Repeat = Atoi(Mid(InStatus$,indexStart, Length));
	InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));

	indexStart = Find(" playlist%20shuffle%3A",InStatus$,1) + 22;
	indexEnd = Find(" ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	Shuffle = Atoi(Mid(InStatus$,indexStart, Length));
	InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));

	indexStart = Find(" playlist_cur_index%3A",InStatus$,1) + 22;
	indexEnd = Find(" ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	CurrentSongIndex = Atoi(Mid(InStatus$,indexStart, Length)); // use this to determine the individual outputs of NowplayingCurrentSong 
	InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd)); 

	indexStart = Find(" id%3A",InStatus$,1) + 6;
	indexEnd = Find(" ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	CurrentTrackID = Atoi(Mid(InStatus$,indexStart, Length));
	trace("current trackID = %u",CurrentTrackID);
// http://192.168.1.75:9000/music/154/cover.jpg
	makestring(CurrentsongCoverURL,"http://%s:9000/music/%u/cover.jpg",SqueezeCenterIPAddr$,CurrentTrackID);
	InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));

	indexStart = Find(" title%3A",InStatus$,1) + 9;
	indexEnd = Find(" ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	CurrentTrackTitle$ = ParsePercent(Mid(InStatus$,indexStart, Length));
	InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));

	indexStart = Find(" genre_id%3A",InStatus$,1);
	if(indexStart > 0) {
		indexStart = indexStart + 12;
		indexEnd = Find(" ",InStatus$,indexStart);
		if(indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentGenreID = Atoi(Mid(InStatus$,indexStart,Length));
			trace("current genreID = %u",CurrentGenreID);
			InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));
		}
		Else {
			CurrentGenreID = 0;			
		}
    }
	Else {CurrentGenreID = 0;}

	indexStart = Find(" genre%3A",InStatus$,1);
	if(indexStart > 0) {
		indexStart = indexStart + 9;
		indexEnd = Find(" ",InStatus$,indexStart);
		if(indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentTrackGenre$ = ParsePercent(Mid(InStatus$,indexStart, Length));
			InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));
		}
		Else {
			Length = len(InStatus$) - indexStart;
			CurrentTrackGenre$ = ParsePercent(Mid(InStatus$,indexStart, Length));
			InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));			
		}
    }
	Else {CurrentTrackGenre$ = "<genre unavailable>";}

	indexStart = Find(" artist_id%3A",InStatus$,1);
	if(indexStart > 0) {
		indexStart = indexStart + 13;
		indexEnd = Find(" ",InStatus$,indexStart);
		if(indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentArtistID = Atoi(Mid(InStatus$,indexStart,Length));
			trace("current ArtistID = %u",CurrentArtistID);
			InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));
		}
		Else {
			CurrentArtistID = 0;			
		}
    }
	Else {CurrentArtistID = 0;}


	indexStart = Find(" artist%3A",InStatus$,1);
	if(indexStart > 0) {
		indexStart = indexStart + 10;
		indexEnd = Find(" ",InStatus$,indexStart);
		if(indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentTrackArtist$ = ParsePercent(Mid(InStatus$,indexStart, Length));
			InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));
		}
		Else {
			Length = len(InStatus$) - indexStart;
			CurrentTrackArtist$ = ParsePercent(Mid(InStatus$,indexStart, Length));
			InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));			
		}
	}
	Else {CurrentTrackArtist$ = "<artist unavailable>";}

	indexStart = Find(" album_id%3A",InStatus$,1);
	if(indexStart > 0) {
		indexStart = indexStart + 12;
		indexEnd = Find(" ",InStatus$,indexStart);
		if(indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentAlbumID = Atoi(Mid(InStatus$,indexStart,Length));
			trace("current AlbumID = %u",CurrentAlbumID);
			InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));
		}
		Else {
			CurrentAlbumID = 0;			
		}
    }
	Else {CurrentAlbumID = 0;}

	
	indexStart = Find(" album%3A",InStatus$,1);
	if (indexStart > 0) {
		indexStart = indexStart + 9;
		indexEnd = Find(" ",InStatus$,indexStart);
		if(indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentTrackAlbum$ = ParsePercent(Mid(InStatus$,indexStart, Length));
			InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));
		}
		Else {
			Length = len(InStatus$) - indexStart;
			CurrentTrackAlbum$ = ParsePercent(Mid(InStatus$,indexStart, Length));
			InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));			
		}
	}
	Else {CurrentTrackAlbum$ = "<album unavailable>";}

	indexStart = Find(" url%3A",InStatus$,1);
	if (indexStart > 0) {
		indexStart = indexStart + 7;
		indexEnd = Find(" ",InStatus$,indexStart);
		if(indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentTrackURL$ = ParsePercent(Mid(InStatus$,indexStart, Length));
			InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));
		}
		Else {
			Length = len(InStatus$) - indexStart;
			CurrentTrackURL$ = ParsePercent(Mid(InStatus$,indexStart, Length));
			InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));			
		}
		If (Find("pandora",CurrentTrackURL$) > 0) {
			CurrentTrackIsPandora = 1;
			CurrentSongIsPandora = 1;
		}
		Else {
			CurrentSongIsPandora = 0;
			CurrentTrackIsPandora = 0;
		}
	}

	indexStart = Find(" artwork_url%3A",InStatus$,1);
	if (indexStart > 0) {
		indexStart = indexStart + 15;
		indexEnd = Find(" ",InStatus$,indexStart);
		if(indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentTrackRemoteCover$ = ParsePercent(Mid(InStatus$,indexStart, Length));
			CurrentsongCoverURL = CurrentTrackRemoteCover$;
			InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));
		}
		Else {
			Length = len(InStatus$) - indexStart;
			CurrentTrackRemoteCover$ = ParsePercent(Mid(InStatus$,indexStart, Length));
			CurrentsongCoverURL = CurrentTrackRemoteCover$;
			InStatus$ = Mid(InStatus$,indexEnd,(LenInStatus$ - indexEnd));			
		}
	}
	Else {indexStart = 1;}

	CurrentsongTitle = CurrentTrackTitle$;
	CurrentsongAlbum = CurrentTrackAlbum$;
	CurrentsongArtist = CurrentTrackArtist$;
	CurrentsongGenre = CurrentTrackGenre$;

 	indexEnd = Find(".",CurrentTrackTime$,1);
	If (indexEnd > 0) {
		Time_sec = Atoi(Mid(CurrentTrackTime$,1,indexEnd));
		Time_min = Time_sec / 60;
		Time_rmd = Time_sec - (Time_min * 60);
		makestring(CurrentsongTime,"%u:%02u",Time_min,Time_rmd); 
	}
	Else if (CurrentTrackTime$ = "0") {
		makestring(CurrentsongTime,"0:00");
	}
	Else {
		CurrentsongTime = CurrentTrackTime$;
	}
	
	CurrentsongRate = CurrentTrackRate$;

 	indexEnd = Find(".",CurrentTrackDuration$,1);
	If (indexEnd > 0) {
		Time_sec = Atoi(Mid(CurrentTrackDuration$,1,indexEnd));
		Time_min = Time_sec / 60;
		Time_rmd = Time_sec - (Time_min * 60);
		makestring(CurrentsongDuration,"%u:%02u",Time_min,Time_rmd); 
	}
	Else if (CurrentTrackDuration$ = "0") {
		makestring(CurrentsongDuration,"0:00");
	}
	Else if (CurrentTrackIsPandora = 1) {
		Time_sec = Atoi(CurrentTrackDuration$);
		Time_min = Time_sec / 60;
		Time_rmd = Time_sec - (Time_min * 60);
		makestring(CurrentsongDuration,"%u:%02u",Time_min,Time_rmd); 
	}
	Else if (CurrentTrackRemote = 1) {
		CurrentsongDuration = "...";
	}
	Else {
		CurrentsongDuration = CurrentTrackDuration$;
	}

	CurrentsongRemote_fb = CurrentTrackRemote;


	trace("mode$ = %s",mode$);

	if (mode$ = "play") {
		mode_pause_fb = 0;
		mode_stop_fb = 0;
		mode_play_fb = 1;				
		status_request_time = 1;
	}	
	Else if (mode$ = "pause") {
		mode_stop_fb = 0;
		mode_play_fb = 0;	
		mode_pause_fb = 1;
		status_request_time = 0;
	}
	Else {
		mode_play_fb = 0;	
		mode_pause_fb = 0;
		mode_stop_fb = 1;
		status_request_time = 0;
	}

	if (Nowplaying_refresh_enable = 1) {
		NowplayingRefresh_fn();
	}
	
	If (repeat = 2)	{
		repeat_off_fb = 0;
		repeat_track_fb = 0;
		repeat_all_fb = 1;
    }
	Else If (repeat = 1) {
		repeat_off_fb = 0;
		repeat_all_fb = 0;
		repeat_track_fb = 1;
	}
	Else {
		repeat_track_fb = 0;
		repeat_all_fb = 0;
		repeat_off_fb = 1;
	}

//	shuffle_fb = shuffle;	
	If (shuffle = 2) {
		shuffle_off_fb = 0;
		shuffle_track_fb = 0;
		shuffle_album_fb = 1;
    }
	Else If (shuffle = 1) {
		shuffle_off_fb = 0;
		shuffle_album_fb = 0;
		shuffle_track_fb = 1;
	}
	Else {
		shuffle_track_fb = 0;
		shuffle_album_fb = 0;
		shuffle_off_fb = 1;
	}
}

Else If (Find("status ",In$,1) > 0) { // Nowplaying parsing code
	trace("parsing nowplaying");
//	progNowplaying = progNowplaying + 1;
//	progLocal = progNowplaying;
	
	InNowplaying$ = In$;
	In$ = "";
	LenInNowplaying$ = Len(InNowplaying$);

	DisplayNowplaying_old = DisplayNowplaying;

//debug
/*
   	debugLocal = InNowplaying$;
    For (i = 1 to ((Len(debugLocal) / 256) + 1))
	{
		debug$[i] = Left(debugLocal,255);
		debugLocal = Mid(debugLocal,255,Len(debugLocal)-255);
    }
*/
// playlist%20index%3A[#] id%3A[#] title%3A[name] artist%3A[artist] album%3A[album]	

	indexStart = Find(" status",InNowplaying$,28) + 8;
	indexEnd = Find(" ",InNowplaying$,indexStart);
	Length = indexEnd - indexStart;
	NowplayingFirstNumber = Atoi(Mid(InNowplaying$,indexStart,Length));
	trace("NowplayingFirstNumber: %u",NowplayingFirstNumber);
	
	indexStart = Find(" playlist_cur_index%3A",InNowplaying$,indexEnd) + 22;
	indexEnd = Find(" ",InNowplaying$, indexStart);
	Length = indexEnd - IndexStart;
	CurrentsongIndex = Atoi(Mid(InNowplaying$,indexStart, Length));
//		use this to determine the individual outputs of NowplayingCurrentSong 

	trace("CurrentsongIndex: %u",CurrentsongIndex);

	indexStart = Find(" playlist_tracks%3A",InNowplaying$,indexEnd) + 19;
	indexEnd = Find(" ",InNowplaying$, indexStart);
	Length = indexEnd - indexStart;
	TotalNowplaying = Atoi(Mid(InNowplaying$,indexStart,Length));

	trace("TotalNowplaying: %u",TotalNowplaying);
	OutNowplayingCount = TotalNowplaying;
	If (TotalNowplaying > 0){
		OutNowplayingBar = 65535 - ((65535 / TotalNowplaying) * NowplayingFirstNumber );
	}
	Else {
		OutNowplayingBar = 0;
	}

	InNowplaying$ = Mid(InNowplaying$,indexEnd,(LenInNowplaying$ - indexEnd));

	If (ListType[1] = 7){
		OutListBar = OutNowplayingBar;
		OutListCount = OutNowplayingCount;
    }


	DisplayNowplaying = TotalNowplaying - NowplayingFirstNumber;
	
	If (TotalNowplaying - NowplayingFirstNumber >= NumberOfNowplaying) {
		ListLengthNowplaying = NumberOfNowplaying;
		trace("TotalNowplaying[%u] - NowplayingFirstNumber[%u] >= NumberOfNowplaying[%u]",TotalNowplaying,NowplayingFirstNumber,NumberOfNowplaying);
	}
	Else If (DisplayNowplaying < DisplayNowplaying_old)	{
		trace("blanking Nowplaying");
		trace("NOT: TotalNowplaying[%u] - NowplayingFirstNumber[%u] >= NumberOfNowplaying[%u]",TotalNowplaying,NowplayingFirstNumber,NumberOfNowplaying);
		ListLengthNowplaying = DisplayNowplaying;
		SetArray(NowplayingTitle$," ");
		SetArray(NowplayingTitle,"");
		SetArray(NowplayingArtist$," ");
		SetArray(NowplayingArtist,"");
		SetArray(NowplayingAlbum$," ");
		SetArray(NowplayingAlbum,"");
		SetArray(NowplayingCurrentSong,0);
		SetArray(NowplayingID,0);
		SetArray(NowplayingIndex,65534); //dummy value to test for disabling button action if empty
		If (ListType[1] = 7)
			SetArray(List$," ");
	}
	Else {
		ListLengthNowplaying = NumberOfNowplaying;
	}

//debug
/*
   	debugLocal = InNowplaying$;
    For (i = 1 to ((Len(debugLocal) / 256) + 1))
	{
		debug$[i] = Left(debugLocal,255);
		debugLocal = Mid(debugLocal,255,Len(debugLocal)-255);
    }
*/	
	For (i = 1 to ListLengthNowplaying)	{
//    	If ((progNowplaying != progLocal))// || (Find(" id%3A",InNowplaying$,1) = 0))
//			Break;
//		Else
//		{
//	 		debugINT = i;
//			debug = InNowplaying$;

// playlist%20index%3A[#] id%3A[#] title%3A[name] artist%3A[artist] album%3A[album]	
			
			indexStart = Find(" playlist%20index%3A",InNowplaying$,1) + 20;
			indexEnd = Find(" ",InNowplaying$,indexStart);
			If (indexEnd > indexStart){
				Length = indexEnd - indexStart;
				NowplayingIndex[i] = Atoi(Mid(InNowplaying$,indexStart,Length));
				trace("NowplayingIndex (i=%u)= %u",i,Nowplayingindex[i]); //xxx
				If (NowplayingIndex[i] = CurrentsongIndex){  // compare Index w/ CurrentsongIndex for NowplayingCurrentSong
					NowplayingCurrentSong[i] = 1;
				}
				Else {
					NowplayingCurrentSong[i] = 0;
				}
			}
			Else { // zero the remaining array elements if no more matches for index (should be unnecessary)
				For (j = i to ListLengthNowplaying){
					NowplayingCurrentSong[j] = 0;
					NowplayingID[j] = 0;
					NowplayingTitle[j] = "";
					NowplayingTitle$[j] = " ";
					NowplayingArtist[j] = "";
					NowplayingArtist$[j] = " ";
					NowplayingAlbum[j] = "";
					NowplayingAlbum$[j] = " ";
					NowplayingIndex[i] = 65534; //dummy value to test for disabling button action if empty
				}
				Break;
			}

			indexStart = Find(" id%3A",InNowplaying$,indexEnd) + 6;
			indexEnd = Find(" ",InNowplaying$, indexStart);
			Length = indexEnd - indexStart;
			NowplayingID[i] = Atoi(Mid(InNowplaying$,indexStart,Length));
			trace("NowplayingID (i=%u)= %u",i,NowplayingID[i]);

			indexStart = indexEnd + 9;
			indexEnd = Find(" ",InNowplaying$, indexStart);
			Length = indexEnd - indexStart;
			NowplayingTitle[i] = ParsePercent(Mid(InNowplaying$,indexStart,Length));
			NowplayingTitle$[i] = NowplayingTitle[i];
			If (ListType[1] = 7){
				List$[i] = NowplayingTitle[i];
			}
			indexStart = indexEnd + 10;
			indexEnd = Find(" ",InNowplaying$, indexStart);
			Length = indexEnd - indexStart;
			NowplayingArtist[i] = ParsePercent(Mid(InNowplaying$,indexStart,Length));
			NowplayingArtist$[i] = NowplayingArtist[i];
//			If (ListType[1] = 7)
//				List$[i] = NowplayingArtist[i];

			indexStart = indexEnd + 9;
			If (Find(" ",InNowplaying$, indexStart) = 0) {
				indexEnd = Len(InNowplaying$);
			}
			Else {
				indexEnd = Find(" ",InNowplaying$, indexStart);
			}
			Length = indexEnd - indexStart;
			NowplayingAlbum[i] = ParsePercent(Mid(InNowplaying$,indexStart,Length));
			NowplayingAlbum$[i] = NowplayingAlbum[i];
//			If (ListType[1] = 7)
//				List$[i] = NowplayingAlbum[i];

			InNowplaying$ = Mid(InNowplaying$,indexEnd,(LenInNowplaying$ - indexEnd));
//		}
	}
}
Else If (Find(" time",In$,1)) {
//	trace("parsing time");
	InTime$ = In$;
	In$ = "";
//	debug = InTime$;
//	00%3A04%3A20%3A05%3Ab7%3A38 time 69.227
	indexEnd = Find(".",InStatus$,34);
	Length = indexEnd - 34;
//	CurrentTrackTime$ = Atoi(Mid(InTime$,34, Length));
	Time_sec = Atoi(Mid(InTime$,34,Length));
//	trace("time_sec:%u",time_sec);
	Time_min = Time_sec / 60;
	Time_rmd = Time_sec - (Time_min * 60);
	makestring(CurrentsongTime,"%u:%02u",Time_min,Time_rmd); 

}
Else If (Find(" pandora",In$,1)) {
	trace("parsing pandora");
	InPandora$ = In$;
	In$ = "";
	LenInPandora$ = Len(InPandora$);

	indexTest = Find(" items ",InPandora$,30);
	
	If(indexTest > 1){
		indexStart = indexTest + 7;
		indexEnd = Find(" ",InPandora$,indexStart + 7);
		Length = indexEnd - indexStart;
		PandoraFirstNumber = Atoi(Mid(InPandora$,indexStart,Length));
	
		indexStart = Find(" count%3A",InPandora$,40) + 9;
		indexEnd = Find(" ",InPandora$, indexStart);
		Length = indexEnd - indexStart;
		TotalPandora = Atoi(Mid(InPandora$,indexStart,Length));
		OutPandoraCount = TotalPandora;
	
		OutPandoraBar = 65535 - ((65535 / TotalPandora) * PandoraFirstNumber );
		If (ListType[1] = 9){
			OutListBar = OutPandoraBar;
			OutListCount = OutPandoraCount;
	    }
		
		If (TotalPandora - PandoraFirstNumber >= NumberOfPandora){
			ListLengthPandora = NumberOfPandora;
		}
		Else{
			ListLengthPandora = TotalPandora - PandoraFirstNumber;
			trace("listlengthPandora = %u",ListLengthPandora);
			SetArray(PandoraType,"");
			SetArray(PandoraName,"");
			SetArray(PandoraID,"");
	
			If (ListType[1] = 9){
				SetArray(List$," ");
			}
		}
	
		indexEnd = 30;
	
		indexStart = Find(" title%3A",InPandora$,indexEnd) + 9;
		indexEnd = Find(" ",InPandora$,indexStart);
		Length = indexEnd - indexStart;
		PandoraTitle = ParsePercent(Mid(InPandora$,indexStart,Length));
		trace("pandora title: %s",PandoraTitle);
		If (ListType[1] = 9){
			ListName[1] = "Pandora: " + PandoraTitle;
		}
	
		For (i = 1 to ListLengthPandora){
				indexStart = Find(" id%3A",InPandora$,indexEnd) + 6;
				indexEnd = Find(" ",InPandora$,indexStart);
				Length = indexEnd - indexStart;
				PandoraID[i] = ParsePercent(Mid(InPandora$,indexStart,Length));
		   		trace("pandora ID[%u]: %s",i,PandoraID[i]);
				indexStart = Find(" name%3A",InPandora$,indexEnd) + 8;
				indexEnd = Find(" ",InPandora$,indexStart);
				Length = indexEnd - indexStart;
				PandoraName[i] = ParsePercent(Mid(InPandora$,indexStart,Length));
		   		trace("pandora name[%u]: %s",i,PandoraName[i]);
				If (ListType[1] = 9){
					List$[i] = PandoraName[i];
				}
				indexStart = Find(" type%3A",InPandora$,indexEnd) + 8;
				indexEnd = Find(" ",InPandora$,indexStart);
				Length = indexEnd - indexStart;
				PandoraType[i] = ParsePercent(Mid(InPandora$,indexStart,Length));
		   		trace("pandora type[%u]: %s",i,PandoraType[i]);
	
				indexStart = Find(" isaudio%3A",InPandora$,indexEnd) + 11;
				indexEnd = Find(" ",InPandora$,indexStart);
				Length = indexEnd - indexStart;
				PandoraIsAudio[i] = Atoi(Mid(InPandora$,indexStart,Length));
		   		trace("pandora IsAudio[%u]: %u",i,PandoraIsAudio[i]);
	
				indexStart = Find(" hasitems%3A",InPandora$,indexEnd) + 12;
				indexEnd = Find(" ",InPandora$,indexStart);
				Length = indexEnd - indexStart;
				PandoraHasItems[i] = Atoi(Mid(InPandora$,indexStart,Length));
		   		trace("pandora HasItems[%u]: %u",i,PandoraHasItems[i]);
	//			InPandora$ = Mid(InPandora$,indexEnd,(LenInPandora$ - indexEnd));
		}
	}	
}

Else If (Find("favorites",In$,1)){//TBD: putting a whitespace is important sometimes because the CLI is nonstandard in some regards
	trace("parsing favorites");
	InFavorites$ = In$;
	In$ = "";
	LenInFavorites$ = Len(InFavorites$);

	indexTest = Find(" items ",InFavorites$,10); //TBD: change the start position argument as appropriate to where it should start looking. The CLI is nonstandard in some regards
	
	If(indexTest > 1){
		indexStart = indexTest + 7;
		indexEnd = Find(" ",InFavorites$,indexStart + 7);
		Length = indexEnd - indexStart;
		FavoritesFirstNumber = Atoi(Mid(InFavorites$,indexStart,Length));
	
		indexStart = Find(" count%3A",InFavorites$,40) + 9;
		indexEnd = Find(" ",InFavorites$, indexStart);
		Length = indexEnd - indexStart;
		TotalFavorites = Atoi(Mid(InFavorites$,indexStart,Length));
		OutFavoritesCount = TotalFavorites;
	
		OutFavoritesBar = 65535 - ((65535 / TotalFavorites) * FavoritesFirstNumber );
		If (ListType[1] = 10){
			OutListBar = OutFavoritesBar;
			OutListCount = OutFavoritesCount;
	    }
		
		If (TotalFavorites - FavoritesFirstNumber >= NumberOfFavorites){
			ListLengthFavorites = NumberOfFavorites;
		}
		Else{
			ListLengthFavorites = TotalFavorites - FavoritesFirstNumber;
			trace("listlengthFavorites = %u",ListLengthFavorites);
			SetArray(FavoritesType,"");
			SetArray(FavoritesName,"");
			SetArray(FavoritesID,"");
	
			If (ListType[1] = 10){
				SetArray(List$," ");
			}
		}
	
		indexEnd = 30;
	
		indexStart = Find(" title%3A",InFavorites$,indexEnd) + 9;
		indexEnd = Find(" ",InFavorites$,indexStart);
		Length = indexEnd - indexStart;
		FavoritesTitle = ParsePercent(Mid(InFavorites$,indexStart,Length));
		trace("Favorites title: %s",FavoritesTitle);
		If (ListType[1] = 10){
			ListName[1] = "Favorites: " + FavoritesTitle;
		}
	
	
		For (i = 1 to ListLengthFavorites){
			indexStart = Find(" id%3A",InFavorites$,indexEnd) + 6;
			indexEnd = Find(" ",InFavorites$,indexStart);
			Length = indexEnd - indexStart;
			FavoritesID[i] = ParsePercent(Mid(InFavorites$,indexStart,Length));
	   		trace("Favorites ID[%u]: %s",i,FavoritesID[i]);
			
			indexStart = Find(" name%3A",InFavorites$,indexEnd) + 8;
			indexEnd = Find(" ",InFavorites$,indexStart);
			Length = indexEnd - indexStart;
			FavoritesName[i] = ParsePercent(Mid(InFavorites$,indexStart,Length));
	   		trace("Favorites name[%u]: %s",i,FavoritesName[i]);
			
			If (ListType[1] = 10){
				List$[i] = FavoritesName[i];
			}
			
			indexStart = Find(" type%3A",InFavorites$,indexEnd) + 8;
			indexEnd = Find(" ",InFavorites$,indexStart);
			Length = indexEnd - indexStart;
			FavoritesType[i] = ParsePercent(Mid(InFavorites$,indexStart,Length));
	   		trace("Favorites type[%u]: %s",i,FavoritesType[i]);

			indexStart = Find(" isaudio%3A",InFavorites$,indexEnd) + 11;
			indexEnd = Find(" ",InFavorites$,indexStart);
			Length = indexEnd - indexStart;
			FavoritesIsAudio[i] = Atoi(Mid(InFavorites$,indexStart,Length));
	   		trace("Favorites IsAudio[%u]: %u",i,FavoritesIsAudio[i]);

			indexStart = Find(" hasitems%3A",InFavorites$,indexEnd) + 12;
			indexEnd = Find(" ",InFavorites$,indexStart);
			Length = indexEnd - indexStart;
			FavoritesHasItems[i] = Atoi(Mid(InFavorites$,indexStart,Length));
	   		trace("Favorites HasItems[%u]: %u",i,FavoritesHasItems[i]);
//			InFavorites$ = Mid(InFavorites$,indexEnd,(LenInFavorites$ - indexEnd));
		}
	}	
}

Else If (Find("dynamicplaylist playlists",In$,1) > 0) { //dynamic playlist parsing code
	trace("parsing dynamic playlists");
	
//	progDynamic = progDynamic + 1;
//	progLocal = progDynamic;
	
	InDynamic$ = In$;
	In$ = "";
	LenInDynamic$ = Len(InDynamic$);
/*
   	debugLocal = InDynamic$;
    For (i = 1 to ((Len(debugLocal) / 256) + 1))
	{
		debug$[i] = Left(debugLocal,255);
		debugLocal = Mid(debugLocal,255,Len(debugLocal)-255);
    }
*/

	indexStart = Find(" playlists 1 ",InDynamic$,30) + 13;
	indexEnd = Find(" ",InDynamic$,indexStart + 13);
	Length = indexEnd - indexStart;
	DynamicFirstNumber = Atoi(Mid(InDynamic$,indexStart,Length));

	indexStart = Find(" count%3A",InDynamic$,40) + 9;
	indexEnd = Find(" ",InDynamic$, indexStart);
	Length = indexEnd - indexStart;
	TotalDynamic = Atoi(Mid(InDynamic$,indexStart,Length));
	OutDynamicCount = TotalDynamic;

	OutDynamicBar = 65535 - ((65535 / TotalDynamic) * DynamicFirstNumber );
	If (ListType[1] = 6){
		OutListBar = OutDynamicBar;
		OutListCount = OutDynamicCount;
    }
	
	If (TotalDynamic - DynamicFirstNumber >= NumberOfDynamic){
		ListLengthDynamic = NumberOfDynamic;
	}
	Else{
		ListLengthDynamic = TotalDynamic - DynamicFirstNumber;
//		SetArray(Dynamic$,"");
		SetArray(DynamicName,"");
		SetArray(DynamicFile,"");
		If (ListType[1] = 6)
			SetArray(List$," ");

	}

	For (i = 1 to ListLengthDynamic){
//    	If (progDynamic != progLocal)
//			Break;
//		Else
//		{
//			trace("InDynamic$= %s",InDynamic$);

			indexStart = Find("playlistid%3A",InDynamic$,1) + 13;
			indexEnd = Find(" ",InDynamic$,indexStart);
			Length = indexEnd - indexStart;
			DynamicFile[i] = ParsePercent(Mid(InDynamic$,indexStart,Length));
   	
			indexStart = indexEnd + 16;

			If (Find(" ",InDynamic$, indexStart) = 0){
				indexEnd = Len(InDynamic$);
			}
			Else{
				indexEnd = Find(" ",InDynamic$, indexStart);
			}
			Length = indexEnd - indexStart;
		
			DynamicName[i] = ParsePercent(Mid(InDynamic$,indexStart,Length));
//			Dynamic$[i] = DynamicName[i];
			If (ListType[1] = 6){
				List$[i] = DynamicName[i];
			}
			InDynamic$ = Mid(InDynamic$,indexEnd,(LenInDynamic$ - indexEnd));
//		}
	}
}
Else If (Find("search ",In$,1) > 0){ // Search parsing code
	trace("parsing search");

//	progSearch = progSearch + 1;
//	progLocal = progSearch;
	
	InSearch$ = In$;
	In$ = "";
	LenInSearch$ = Len(InSearch$);
/*
//debug line to output an array of debug$ lines with the full content of InSeach$
   	debugLocal = InSearch$;
    For (j = 1 to ((Len(debugLocal) / 256) + 1))
	{
		debug$[j] = Left(debugLocal,255);
		debugLocal = Mid(debugLocal,255,Len(debugLocal)-255);
    }
*/
	indexEnd = Find(" ",InSearch$,8);
	Length = indexEnd - 7;
	SearchFirstNumber = Atoi(Mid(InSearch$,7,Length));
	trace("searchfirstnumber: %u",SearchFirstNumber);
//search 0 20 term:al
//count:9 

	indexStart = Find("count%3A",InSearch$,1) + 8;
	indexEnd = Find(" ",InSearch$, indexStart);
	Length = indexEnd - indexStart;
	TotalSearch = Atoi(Mid(InSearch$,indexStart,Length));
	trace("TotalSearch: %u",TotalSearch);
	OutSearchCount = TotalSearch;

	If (TotalSearch > 0){
		OutSearchBar = 65535 - ((65535 / TotalSearch) * SearchFirstNumber);
	}
	Else{
		OutSearchBar = 0;
	}

	ListType[1] = 8;
	If (ListType[1] = 8){
		OutListBar = OutSearchBar;
		OutListCount = OutSearchCount;
    }
	
	If (TotalSearch - SearchFirstNumber >= NumberOfSearch){
		ListLengthSearch = NumberOfSearch;
	}
	Else{
		ListLengthSearch = TotalSearch - SearchFirstNumber;
		SetArray(Search,"");
		SetArray(SearchID,0);
		If (ListType[1] = 8){
			SetArray(List$," ");
		}
	}
//contributors_count:2 
//albums_count:1 
//tracks_count:6 

	For (i = 1 to ListLengthSearch){
//    	If ((progSearch != progLocal) || (Find("id%3A",InSearch$,1) = 0))
//		{
//			trace("breaking iteration routine");
//			Break;
//		}
//		Else
//		{
//			trace("iteration i=%u",i);
/*
			//debug to output an array of debug$ lines with the full content of InSeach$
			debugLocal = InSearch$;
			For (j = 1 to ((Len(debugLocal) / 256) + 1))
			{
				debug$[j] = Left(debugLocal,255);
				debugLocal = Mid(debugLocal,255,Len(debugLocal)-255);
			}
			//end debug
*/
			If (Find(" contributor_id",InSearch$,1)) {//parsing for artists in search results
//				trace("parsing contributor_id in search result");
				indexStart = Find(" contributor_id%3A",InSearch$,1) + 18;
				indexEnd = Find(" ",InSearch$,indexStart);
				Length = indexEnd - indexStart;
				SearchID[i] = Atoi(Mid(InSearch$,indexStart,Length));
				trace("contributor_id:%u",SearchID[i]);
				SearchIDtype[i] = 1;
				indexStart = indexEnd + 15;
				indexEnd = Find(" ",InSearch$, indexStart);
				If (indexEnd = 0){
					indexEnd = len(InSearch$);
				}
				Length = indexEnd - indexStart;
				Search[i] = ParsePercent(Mid(InSearch$,indexStart,Length));
				trace("contributor:%s",Search[i]);
			}
			Else If (Find(" album_id%3A",InSearch$,1)) {//parsing for albums in search results
//				trace("parsing album_id in search result");
				indexStart = Find(" album_id%3A",InSearch$,1) + 12;
				indexEnd = Find(" ",InSearch$,indexStart);
				Length = indexEnd - indexStart;
				SearchID[i] = Atoi(Mid(InSearch$,indexStart,Length));
				SearchIDtype[i] = 2;
				indexStart = indexEnd + 9;
				indexEnd = Find(" ",InSearch$, indexStart);
				If (indexEnd = 0) {
					indexEnd = len(InSearch$);
				}
				Length = indexEnd - indexStart;
				Search[i] = ParsePercent(Mid(InSearch$,indexStart,Length));
			}
			Else If (Find(" track_id%3A",InSearch$,1)) {//parsing for tracks in search results
//				trace("parsing track_id in search result");
				indexStart = Find(" track_id%3A",InSearch$,1) + 12;
				indexEnd = Find(" ",InSearch$,indexStart);
				Length = indexEnd - indexStart;
				SearchID[i] = Atoi(Mid(InSearch$,indexStart,Length));
				SearchIDtype[i] = 3;
				indexStart = indexEnd + 9;
				indexEnd = Find(" ",InSearch$, indexStart);
				If (indexEnd = 0) {
					indexEnd = len(InSearch$);
				}
				Length = indexEnd - indexStart;
				Search[i] = ParsePercent(Mid(InSearch$,indexStart,Length));
			}
			If (ListType[1] = 8){
	            List$[i] = Search[i];
			}
			InSearch$ = Mid(InSearch$,indexEnd,(LenInSearch$ - indexEnd));
//		}
	}
//	progSearch = progSearch - 1;
}
Else If (Find("genres ",In$,1) > 0) { // genre parsing code
	trace("parsing genres");

//	progGenres = progGenres + 1;
//	progLocal = progGenres;
	
	InGenres$ = In$;
	In$ = "";
	LenInGenres$ = Len(InGenres$);

	indexEnd = Find(" ",InGenres$,9);
	Length = indexEnd - 8;
	GenreFirstNumber = Atoi(Mid(InGenres$,8,Length));

	indexStart = Find("count%3A",InGenres$,1) + 8;
	indexEnd = Find(" ",InGenres$, indexStart);
	Length = indexEnd - indexStart;
	TotalGenres = Atoi(Mid(InGenres$,indexStart,Length));
	OutGenreCount = TotalGenres;
	If (TotalGenres > 0){
		OutGenresBar = 65535 - ((65535 / TotalGenres) * GenreFirstNumber);
	}
	Else{
		OutGenresBar = 0;
	}

	If (ListType[1] = 1){
		OutListBar = OutGenresBar;
		OutListCount = OutGenreCount;
    }
	
	If (TotalGenres - GenreFirstNumber >= NumberOfGenres){
		ListLengthGenres = NumberOfGenres;
	}
	Else{
		ListLengthGenres = TotalGenres - GenreFirstNumber;
//		SetArray(Genre$,"");
		SetArray(Genre,"");
		SetArray(GenreID,0);
		If (ListType[1] = 1){
			SetArray(List$," ");
		}
	}

	For (i = 1 to ListLengthGenres){
//    	If ((progGenres != progLocal) || (Find(" id%3A",InGenres$,1) = 0))
//			Break;
//		Else
//		{
			indexStart = Find(" id%3A",InGenres$,1) + 6;
			indexEnd = Find(" ",InGenres$,indexStart);
			Length = indexEnd - indexStart;
			GenreID[i] = Atoi(Mid(InGenres$,indexStart,Length));
   	
			indexStart = indexEnd + 9;
			indexEnd = Find(" ",InGenres$, indexStart);
			Length = indexEnd - indexStart;

			Genre[i] = ParsePercent(Mid(InGenres$,indexStart,Length));
//			Genre$[i] = Genre[i];
			If (ListType[1] = 1) {
	            List$[i] = Genre[i];
			}

			InGenres$ = Mid(InGenres$,indexEnd,(LenInGenres$ - indexEnd));
//		}
	}
//	progGenres = progGenres - 1;
}
Else If (Find("artists ",In$,1) > 0) { // Artist parsing code
	trace("parsing Artists");
//	progArtists = progArtists + 1;
//	progLocal = progArtists;
	
	InArtists$ = In$;
	In$ = "";
	LenInArtists$ = Len(InArtists$);

/*
   	debugLocal = InArtists$;
    For (i = 1 to ((Len(debugLocal) / 256) + 1))
	{
		debug$[i] = Left(debugLocal,255);
		debugLocal = Mid(debugLocal,255,Len(debugLocal)-255);
    }
*/

	indexEnd = Find(" ",InArtists$,9);
	Length = indexEnd - 8;
	ArtistFirstNumber = Atoi(Mid(InArtists$,8,Length));
	trace("ArtistFirstNumber = %u",ArtistFirstNumber);

	indexStart = Find(" count%3A",InArtists$,1);
	indexStart = indexStart + 9;
	indexEnd = Find(" ",InArtists$, indexStart);
	if(indexEnd > 0){
		Length = indexEnd - indexStart;
	}
	Else {
		Length = len(InArtists$) - indexStart;
	}
	TotalArtists = Atoi(Mid(InArtists$,indexStart,Length));
	trace("TotalArtists = %u",TotalArtists);
	OutArtistCount = TotalArtists;

	If (TotalArtists > 0){
		OutArtistsBar = 65535 - ((65535 / TotalArtists) * ArtistFirstNumber);
	}
	Else{
		OutArtistsBar = 0;
	}

	If (ListType[1] = 2){
		OutListBar = OutArtistsBar;
		OutListCount = OutArtistCount;
    }

	If (TotalArtists - ArtistFirstNumber >= NumberOfArtists){
		ListLengthArtists = NumberOfArtists;
	}
	Else{
		ListLengthArtists = TotalArtists - ArtistFirstNumber;
//		SetArray(Artist$,"");
		SetArray(Artist,"");
		SetArray(ArtistID,0);
		If (ListType[1] = 2)
			SetArray(List$," ");
	}
/*
   	debugLocal = InArtists$;
    For (i = 1 to ((Len(debugLocal) / 256) + 1))
	{
		debug$[i] = Left(debugLocal,255);
		debugLocal = Mid(debugLocal,255,Len(debugLocal)-255);
    }
*/    
	For (i = 1 to ListLengthArtists){
    	indexStart = Find(" id%3A",InArtists$,1);
//			If ((progArtists != progLocal) || (indexStart = 0))
//				Break;
//			Else
//			{
//		trace("%s",InArtists$);
		indexStart = indexStart + 6;
		indexEnd = Find(" ",InArtists$,indexStart);
		Length = indexEnd - indexStart;
		ArtistID[i] = Atoi(Mid(InArtists$,indexStart,Length));
//		trace(ArtistID[%u]=%u,i,ArtistID[i]);   	

		indexStart = Find(" artist%3A",InArtists$,indexEnd) + 10;
		indexEnd = Find(" ",InArtists$, indexStart);
		Length = indexEnd - indexStart;		
//		trace("Artist = %s",Mid(InArtists$,indexStart,Length));
		Artist[i] = ParsePercent(Mid(InArtists$,indexStart,Length));

//		Artist$[i] = Artist[i];
		If (ListType[1] = 2){
			List$[i] = Artist[i];
		}
		InArtists$ = Mid(InArtists$,indexEnd,(LenInArtists$ - indexEnd));
//		}
}
//	progArtists = progArtists - 1;
}
Else If (Find("albums ",In$,1) > 0) { // Album parsing code
	trace("parsing albums");
//	progAlbums = progAlbums + 1;
//	progLocal = progAlbums;
	
	InAlbums$ = In$;
	In$ = "";
	LenInAlbums$ = Len(InAlbums$);
/*
   	debugLocal = InAlbums$;
    For (i = 1 to ((Len(debugLocal) / 256) + 1))
	{
		debug$[i] = Left(debugLocal,255);
		debugLocal = Mid(debugLocal,255,Len(debugLocal)-255);
    }
*/
	indexEnd = Find(" ",InAlbums$,9);
	Length = indexEnd - 8;
	AlbumFirstNumber = Atoi(Mid(InAlbums$,8,Length));

	indexStart = Find("count%3A",InAlbums$,1) + 8;
	indexEnd = Find(" ",InAlbums$, indexStart);
	Length = indexEnd - indexStart;
	TotalAlbums = Atoi(Mid(InAlbums$,indexStart,Length));
	OutAlbumCount = TotalAlbums;
	If (TotalAlbums > 0){
		OutAlbumsBar = 65535 - ((65535 / TotalAlbums) * AlbumFirstNumber);
	}
	Else{
		OutAlbumsBar = 0;
	}

	If (ListType[1] = 3){
		OutListBar = OutAlbumsBar;
		OutListCount = OutAlbumCount;
    }
	
	If (TotalAlbums - AlbumFirstNumber >= NumberOfAlbums){
		ListLengthAlbums = NumberOfAlbums;
	}
	Else{
		ListLengthAlbums = TotalAlbums - AlbumFirstNumber;
//		SetArray(Album$,"");
		SetArray(Album,"");
		SetArray(AlbumID,0);
		If (ListType[1] = 3)
			SetArray(List$," ");
	}
/*
   	debugLocal = InAlbums$;
    For (i = 1 to ((Len(debugLocal) / 256) + 1))
	{
		debug$[i] = Left(debugLocal,255);
		debugLocal = Mid(debugLocal,255,Len(debugLocal)-255);
    }
*/
	If (Find(" search%3A",InAlbums$,1) > 0) {
		For (i = 1 to ListLengthAlbums) {
	    	indexStart = Find(" id%3A",InAlbums$,1);
			If (indexStart = 0){ // || (progAlbums != progLocal)
				Break;
			}
			Else {
				indexStart = indexStart + 6;
				indexEnd = Find(" ",InAlbums$,indexStart);
				Length = indexEnd - indexStart;
				AlbumID[i] = Atoi(Mid(InAlbums$,indexStart,Length));
	   	
				indexStart = indexEnd + 9;
				indexEnd = Find(" ",InAlbums$, indexStart);
				Length = indexEnd - indexStart;
			
				Album[i] = ParsePercent(Mid(InAlbums$,indexStart,Length));
//				Album$[i] = Album[i];             
//				If (ListType[1] = 3){List$[i] = Album[i];}
				ListType[1] = 3;
				List$[i] = Album[i];	
				InAlbums$ = Mid(InAlbums$,indexEnd,(LenInAlbums$ - indexEnd));  
			}
		}
	}
	Else {
		For (i = 1 to ListLengthAlbums) {
	    	indexStart = Find(" id%3A",InAlbums$,1);
			If (indexStart = 0) { // || (progAlbums != progLocal) 
				Break;
			}
			Else {
				indexStart = indexStart + 6;
				indexEnd = Find(" ",InAlbums$,indexStart);
				Length = indexEnd - indexStart;
				AlbumID[i] = Atoi(Mid(InAlbums$,indexStart,Length));
	   	
				indexStart = indexEnd + 9;
				indexEnd = Find(" ",InAlbums$, indexStart);
				Length = indexEnd - indexStart;
			
				Album[i] = ParsePercent(Mid(InAlbums$,indexStart,Length));
//				Album$[i] = Album[i];             
				If (ListType[1] = 3){List$[i] = Album[i];}
//				ListType[1] = 3;
//				List$[i] = Album[i];	
				InAlbums$ = Mid(InAlbums$,indexEnd,(LenInAlbums$ - indexEnd));  
			}
		}
    }
//	progAlbums = progAlbums - 1;
}
Else If (Find("titles ",In$,1) > 0) { // Titles (tracks) parsing code
	trace("parsing titles");
	progTitles = progTitles + 1;
	progLocal = progTitles;

	InTitles$ = In$;
	In$ = "";
	LenInTitles$ = Len(InTitles$);
/*
   	debugLocal = InTitles$;
    For (i = 1 to ((Len(debugLocal) / 256) + 1))
	{
		debug$[i] = Left(debugLocal,255);
		debugLocal = Mid(debugLocal,255,Len(debugLocal)-255);
    }
*/	
	indexEnd = Find(" ",InTitles$,9);
	Length = indexEnd - 8;
	TitleFirstNumber = Atoi(Mid(InTitles$,8,Length));

//	debug = "TitleFirstNumber";
//    debugInt = TitleFirstNumber;

	indexStart = Find("count%3A",InTitles$,1) + 8;
	indexEnd = Find(" ",InTitles$, indexStart);
	Length = indexEnd - indexStart;
	TotalTitles = Atoi(Mid(InTitles$,indexStart,Length));
	OutTitleCount = TotalTitles;
	If (TotalTitles > 0){
		OutTitlesBar = 65535 - ((65535 / TotalTitles) * TitleFirstNumber );
	}
	Else{
		OutTitlesBar = 0;
	}

	If (ListType[1] = 4){
		OutListBar = OutTitlesBar;
		OutListCount = OutTitleCount;
    }

	If (TotalTitles - TitleFirstNumber >= NumberOfTitles){
		ListLengthTitles = NumberOfTitles;
	}
	Else {
		ListLengthTitles = TotalTitles - TitleFirstNumber;
//		SetArray(Title$,"");
		SetArray(Title,"");
		SetArray(TrackID,0);
		If (ListType[1] = 4)
			SetArray(List$," ");
	}
	indexStart = Find("tags%3A",InTitles$,1) + 7;

	inTitles$ = Mid(InTitles$, indexStart,(LenInTitles$ - indexStart));

/*
   	debugLocal = InTitles$;
    For (i = 1 to ((Len(debugLocal) / 256) + 1))
	{
		debug$[i] = Left(debugLocal,255);
		debugLocal = Mid(debugLocal,255,Len(debugLocal)-255);
    }
*/
    
	For (i = 1 to ListLengthTitles){
    	If ((Find(" id%3A",InTitles$,1) = 0) || (progTitles != progLocal)) {
			Break;
		}
		Else {
//	 		debugINT = i;
//			debug = InTitles$;
		   	indexStart = Find(" id%3A",InTitles$,1) + 6;
			indexEnd = Find(" ",InTitles$,indexStart);
			Length = indexEnd - indexStart;
			TrackID[i] = Atoi(Mid(InTitles$,indexStart,Length));
   		
			indexStart = Find("title%3A",InTitles$,indexEnd) + 8;
			indexEnd = Find(" ",InTitles$, indexStart);
			Length = indexEnd - indexStart;

    		Title[i] = ParsePercent(Mid(InTitles$,indexStart,Length));
//			Title$[i] = Title[i];
			If (ListType[1] = 4){
				List$[i] = Title[i];		
			}
			If (Find("tracknum%3A",InTitles$,indexEnd) != 0){
				indexStart = Find("tracknum%3A",InTitles$,indexEnd) + 11;
				indexEnd = Find(" ",InTitles$, indexStart);
				Length = indexEnd - indexStart;
				TitleTracknum[i] = Atoi(Mid(InTitles$,indexStart,Length));
			}
			Else{
				trace("no tracknum");
			}

			If (Find("album_id%3A",InTitles$,1) != 0) {
				indexStart = Find("album_id%3A", InTitles$,IndexEnd) + 11;
				indexEnd = Find(" ",InTitles$, indexStart);
				Length = indexEnd - indexStart;
				TitleAlbumID[i] = Atoi(Mid(InTitles$, indexStart, Length));
    		}
			Else {
				trace("no album_id");
			}

			InTitles$ = Mid(InTitles$,indexEnd,(LenInTitles$ - indexEnd));
		}
	}
	progTitles = progTitles - 1;
}
Else If (Find("playlists ",In$,1) > 0) {  // Playlist parsing code
	trace("parsing playlists");
	
	InPlaylists$ = In$;
	In$ = "";
	LenInPlaylists$ = Len(InPlaylists$);

	indexEnd = Find(" ",InPlaylists$,10);
	Length = indexEnd - 9;
	PlaylistFirstNumber = Atoi(Mid(InPlaylists$,9,Length));

	indexStart = Find("count%3A",InPlaylists$,1) + 8;
	indexEnd = Find(" ",InPlaylists$, indexStart);
	Length = indexEnd - indexStart;
	TotalPlaylists = Atoi(Mid(InPlaylists$,indexStart,Length));
	OutPlaylistCount = TotalPlaylists;
	OutPlaylistsBar = 65535 - ((65535 / TotalPlaylists) * PlaylistFirstNumber );
	If (ListType[1] = 5) {
		OutListBar = OutPlaylistsBar;
		OutListCount = OutPlaylistCount;
    }
	
	If (TotalPlaylists - PlaylistFirstNumber >= NumberOfPlaylists){
		ListLengthPlaylists = NumberOfPlaylists;
	}
	Else{
		ListLengthPlaylists = TotalPlaylists - PlaylistFirstNumber;
		SetArray(Playlist,"");
		SetArray(PlaylistID,0);
		If (ListType[1] = 5){
			SetArray(List$," ");
		}
	}
	
	For (i = 1 to ListLengthPlaylists) {
    	If (Find(" id%3A",InPlaylists$,1) = 0) { 
			Break;
		}
		Else {
			indexStart = Find(" id%3A",InPlaylists$,1) + 6;
			indexEnd = Find(" ",InPlaylists$,indexStart);
			Length = indexEnd - indexStart;
			PlaylistID[i] = Atoi(Mid(InPlaylists$,indexStart,Length));
   	
			indexStart = indexEnd + 12;
			indexEnd = Find(" ",InPlaylists$, indexStart);
			Length = indexEnd - indexStart;
			PlaylistRaw[i] = Mid(InPlaylists$,indexStart,Length);
			trace("PlaylistRaw[%u] = %s",i,PlaylistRaw[i]);
			Playlist[i] = ParsePercent(Mid(InPlaylists$,indexStart,Length));
			If (ListType[1] = 5){
				List$[i] = Playlist[i];
			}

			InPlaylists$ = Mid(InPlaylists$,indexEnd,(LenInPlaylists$ - indexEnd));
		}
	}
} // end the playlist parsing
} // end the SocketReceive parsing

/*
CHANGE TCPIP_Tx$
{
    signed_integer iStatus;
    iStatus = SocketSend(TCPClient, TCPIP_Tx$ );
    if (iStatus < 0)
        Print("Error Sending to TCPClient: %d\n", iStatus);
}
*/

///////////// Initialization script
Function Main() {
    NumberOfGenres = NumberOfList;
	NumberOfArtists = NumberOfList;
	NumberOfAlbums = NumberOfList;
	NumberOfTitles = NumberOfList;
	NumberOfPlaylists = NumberOfList;
	NumberOfDynamic = NumberOfList;
	NumberOfSearch = NumberOfList;
	NumberOfPandora = NumberOfList;        
	NumberOfFavorites = NumberOfList;

	FirstGenre = 0;
	FirstArtist = 0;
	FirstAlbum = 0;
	FirstTitle = 0;
	FirstPlaylist = 0;
	FirstNowplaying = 0;
	FirstDynamic = 0;
	FirstPandora = 0;   
	FirstFavorites = 0;
	progGenres = 0;
	progArtists = 0;
	progAlbums = 0;
	progTitles = 0;
	progPlaylists = 0;
	progNowplaying = 0;
	progDynamic = 0;
	ActivePlaylist = "";
	restrictorGenres = "";
	restrictorArtists = "";
	restrictorAlbums = "";
	restrictorTitles = "tags:te";
	restrictorPlaylists = "";
	restrictorPandora = "";
	restrictorFavorites = "";
	SetArray(ListType,0);
	SetArray(ListName,"Home");
	SetArray(ListRestrictor,"");
	PlayerIDOut = FormatPlayerID(PlayerID$);
	Nowplaying_refresh_enable = 1;
	DisplayNowplaying = NumberOfNowplaying;    
	SetArray(ListHome,"");	
	ListHome[1] = "Favorites";
	ListHome[2] = "Genres";
	ListHome[3] = "Artists";
	ListHome[4] = "Albums";
	ListHome[5] = "Playlists";
	ListHome[6] = "Dynamic PL";    
	ListHome[7] = "Pandora";
	ListHome[8] = "Tracks";
 	Home_PgReset_fn();
	
	While (1) {
		If (status_request_time = 1) {
			makestring (Out$,"%s time ? \n",PlayerID$);
//			trace("sending: %s",OUT$);
			SocketSend (TCPClient,OUT$);
		}
		delay (100);
	}
} //end main function
