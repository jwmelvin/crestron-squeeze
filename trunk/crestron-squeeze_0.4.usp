/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:Harmony Home Theaters
System Name: SqueezeBox Server
System Number: 7.4
Programmer: JWM 
Comments:
	
	(c) 2009 Jason Melvin    

	This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
// ///////////////////Compiler Directives
// #SYMBOL_NAME "SqueezeBox Server 0.4"
// #HINT ""
// #CATEGORY "" 
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #HELP_PDF_FILE ""
// #DEFAULT_NONVOLATILE
#OUTPUT_SHIFT 6
#ENABLE_DYNAMIC
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#DEFINE_CONSTANT Nowplaying_refresh_enable_time 1000
#PRINT_TO_TRACE
// #ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/
// /////////  Include Libraries
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
// ///////////// Inputs & Outputs
DIGITAL_INPUT _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_;
DIGITAL_INPUT TCPIP_Connect;
DIGITAL_INPUT TCPIP_ReconnectEnable;
DIGITAL_INPUT Playlist_Save_Enable;
DIGITAL_INPUT DirectIn_Fixed_Default;
//
DIGITAL_OUTPUT TCPIP_Connected;
ANALOG_OUTPUT TCPIP_Status;
DIGITAL_INPUT Play, Pause_On, Pause_Off, Pause_Tog, Stop, Next, Prev;
DIGITAL_INPUT Pwr_On, Pwr_Off;
DIGITAL_INPUT Repeat_Off, Repeat_Track, Repeat_All;
DIGITAL_INPUT Shuffle_Off, Shuffle_Track, Shuffle_Album;
// DIGITAL_INPUT PlaylistSave;
//
// Jump inputs
DIGITAL_INPUT Jump_Home;//display the home list
DIGITAL_INPUT Jump_Genres;//, Genres_PgUp, Genres_PgDn;
DIGITAL_INPUT Jump_Artists;//, Artists_PgUp, Artists_PgDn;
DIGITAL_INPUT Jump_Albums;//, Albums_PgUp, Albums_PgDn;
DIGITAL_INPUT Jump_Tracks;//, Titles_PgUp, Titles_PgDn;
DIGITAL_INPUT Jump_Playlists;//, Playlists_PgUp, Playlists_PgDn;
DIGITAL_INPUT Jump_Dynamic;//, Dynamic_PgUp, Dynamic_PgDn;
DIGITAL_INPUT Jump_Pandora;
DIGITAL_INPUT Jump_Favorites;
// Direct Browse inputs
DIGITAL_INPUT BrowseCurrentSongGenre,BrowseCurrentSongArtist,BrowseCurrentSongAlbum;
// Direct string inputs
STRING_INPUT  PlaylistPlay$[256], PlaylistResume$[256], FavoritePlay$[16], DynamicResume$[256];
// Pandora inputs
DIGITAL_INPUT PandoraRate_Up, PandoraRate_Dn;
// Search inputs
DIGITAL_INPUT search_clear;
DIGITAL_INPUT search_backspace;
BUFFER_INPUT  search_in$[64];
// List scroll inputs
DIGITAL_INPUT List_PgUp, List_PgDn, List_Back;
DIGITAL_INPUT Nowplaying_Refresh, Nowplaying_PgUp, Nowplaying_PgDn; //
DIGITAL_INPUT Players_Refresh, Players_PgUp, Players_PgDn;
// Analog scroll inputs
ANALOG_INPUT  InPageList;
ANALOG_INPUT  InPageNowplaying;
ANALOG_INPUT  NowplayingShowPrev;
ANALOG_INPUT  InPagePlayers;
// Scroll Feedback
ANALOG_OUTPUT  OutListCount, OutListBar;
ANALOG_OUTPUT  OutNowplayingCount, OutNowplayingBar;
STRING_OUTPUT  search_in_fb;
STRING_OUTPUT  ListName$;
STRING_OUTPUT  PlayerName_Active$;
STRING_OUTPUT  PlayerID_Active$;
DIGITAL_OUTPUT CurrentPlayerMaster;
DIGITAL_OUTPUT CurrentPlayerSlave;
STRING_OUTPUT  PlayerName_Master$;
// Player feedback
DIGITAL_OUTPUT mode_play_fb;
DIGITAL_OUTPUT mode_pause_fb;
DIGITAL_OUTPUT mode_stop_fb;
DIGITAL_OUTPUT repeat_off_fb;
DIGITAL_OUTPUT repeat_track_fb;
DIGITAL_OUTPUT repeat_all_fb;
DIGITAL_OUTPUT shuffle_off_fb;
DIGITAL_OUTPUT shuffle_track_fb;
DIGITAL_OUTPUT shuffle_album_fb;
// CurrentSong feedback
DIGITAL_OUTPUT CurrentsongRemote_fb;
DIGITAL_OUTPUT CurrentsongIsPandora;
STRING_OUTPUT  CurrentsongTitle;
STRING_OUTPUT  CurrentsongTitleFormatted;
STRING_OUTPUT  CurrentsongAlbum;
STRING_OUTPUT  CurrentsongArtist;
STRING_OUTPUT  CurrentsongGenre;
STRING_OUTPUT  CurrentsongCoverURL;
STRING_OUTPUT  CurrentsongTime;
STRING_OUTPUT  CurrentsongRate;
STRING_OUTPUT  CurrentsongDuration;
// ARRAYS
// Nowplaying i/o
DIGITAL_INPUT  NowplayingPlay[10];
DIGITAL_INPUT  NowplayingRemove[10];
DIGITAL_INPUT  NowplayingMoveUp[10];
DIGITAL_INPUT  NowPlayingMoveDown[10];
DIGITAL_OUTPUT NowplayingPageFlip;
STRING_OUTPUT  NowplayingTitle$[10];
STRING_OUTPUT  NowplayingArtist$[10];
STRING_OUTPUT  NowplayingAlbum$[10];
DIGITAL_OUTPUT NowplayingCurrentSong[10];
// List i/o
DIGITAL_INPUT  ListSelect[10];
DIGITAL_INPUT  ListPlay[10];
DIGITAL_INPUT  ListAdd[10];
DIGITAL_INPUT  ListInsert[10];
STRING_OUTPUT  List$[10];
// Players i/o
DIGITAL_INPUT  PlayersSelect[10];
DIGITAL_INPUT  PlayersSyncTog[10,10];
STRING_OUTPUT  Players$[10];
STRING_OUTPUT  PlayersID$[10,10];
DIGITAL_OUTPUT PlayersSynced[10,10];
//
///////////////////////////// Parameters
STRING_PARAMETER PlayerID$_Startup[17], SqueezeCenterIPAddr$[16];   //for PlayerID please use the MAC address as found on SB Server player information page.
INTEGER_PARAMETER SqueezeCenterPort;
INTEGER_PARAMETER NumberOfList, NumberOfNowplaying, NumberOfPlayers;
// NumberOfGenres, NumberOfArtists, NumberOfAlbums, NumberOfTitles, NumberOfPlaylists, NumberOfDynamic, NumberOfSearch;
// ///////////////////////// Sockets
TCP_CLIENT TCPClient[16384];
// //////////////// Global Variables
INTEGER FirstHome, TotalHome, ListLengthHome;
INTEGER FirstGenre, TotalGenres, GenreFirstNumber, ActiveGenreID;
INTEGER FirstArtist, TotalArtists, ArtistFirstNumber, ActiveArtistID;
INTEGER FirstAlbum, TotalAlbums, AlbumFirstNumber, ActiveAlbumID;
INTEGER FirstTitle, TotalTitles, TitleFirstNumber, ActiveTrackID;
INTEGER FirstPlaylist, TotalPlaylists, PlaylistFirstNumber, ActivePlaylistID;
INTEGER FirstNowplaying, TotalNowplaying, NowplayingFirstNumber;
INTEGER FirstDynamic, TotalDynamic, DynamicFirstNumber;
INTEGER FirstSearch, TotalSearch, SearchFirstNumber;
INTEGER FirstPandora, TotalPandora, PandoraFirstNumber;
INTEGER FirstFavorites, TotalFavorites, FavoritesFirstNumber; 
INTEGER FirstApps, TotalApps, AppsFirstNumber; 
INTEGER FirstRadios, TotalRadios, RadiosFirstNumber; 
INTEGER FirstPlayers, TotalPlayers, PlayersFirstNumber, ListLengthPlayers;
//
// INTEGER progGenres, progArtists, progAlbums, progTitles, progPlaylists, progNowplaying, progDynamic, progSearch;
INTEGER CurrentsongIndex, CurrentGenreID, CurrentArtistID, CurrentAlbumID, CurrentTrackID;
INTEGER Repeat, Shuffle, CurrentTrackRemote, CurrentTrackIsPandora;
INTEGER status_request_time;
//
INTEGER NumberOfHome, NumberOfGenres, NumberOfArtists, NumberOfAlbums, NumberOfTitles;
INTEGER NumberOfPlaylists, NumberOfDynamic, NumberOfSearch;
INTEGER NumberOfPandora, NumberOfFavorites, NumberOfApps, NumberOfRadios;
//
INTEGER nextChar;
STRING	search_in[64];
//
INTEGER OutHomeCount, OutHomeBar;
INTEGER OutGenreCount, OutGenresBar;
INTEGER OutArtistCount, OutArtistsBar;
INTEGER OutAlbumCount, OutAlbumsBar;
INTEGER OutTitleCount, OutTitlesBar;
INTEGER OutPlaylistCount, OutPlaylistsBar;
INTEGER OutDynamicCount, OutDynamicBar;
INTEGER OutSearchCount, OutSearchBar; 
INTEGER OutPandoraCount,OutPandoraBar;
INTEGER OutFavoritesCount,OutFavoritesBar;
INTEGER OutAppsCount,OutAppsBar;
INTEGER OutRadiosCount,OutRadiosBar;
//
INTEGER OutPlayersCount, OutPlayersBar;
//
INTEGER Nowplaying_refresh_enable, ListLengthNowplaying_old;
//
INTEGER ListType[5], ListFirst[5];
INTEGER GenreID[10], ArtistID[10], AlbumID[10], TitleAlbumID[10], TitleTracknum[10], TrackID[10];
INTEGER PlaylistID[10], SearchID[10], SearchIDType[10];
INTEGER NowplayingIndex[10], NowplayingID[10];
INTEGER PandoraIsAudio[10], PandoraHasItems[10];
INTEGER FavoritesIsAudio[10], FavoritesHasItems[10];
//
STRING ActivePlayerID[32], StatusFind$[64], NowplayingFind$[64], TimeFind$[64];
STRING FAR_parse[32], FAR_name[32];
STRING Mode$[8],CurrentTrackTime$[32],CurrentTrackRate$[16],CurrentTrackDuration$[32];
STRING SyncMaster[32], SyncSlaves_in[512], SyncSlaves[10][32];
STRING CurrentTrackTitle$[256],CurrentTrackGenre$[256],CurrentTrackArtist$[256],CurrentTrackAlbum$[256];
STRING CurrentTrackRemoteCover$[512], CurrentTrackURL$[256];
//
STRING restrictorGenres[256], restrictorArtists[256], restrictorAlbums[256];
STRING restrictorTitles[256], restrictorPlaylists[256], restrictorSearch[256];
STRING restrictorPandora[256];
STRING restrictorFavorites[256];
STRING ListName[5][256], ListRestrictor[5][256], ListHome[10][16];
STRING ActiveGenre[128], ActiveArtist[128], ActiveAlbum[128], ActiveTitle[128], ActivePlaylist[128], ActiveDynamic[128], ActiveDynamicFile[128];
STRING ActivePandoraName[256], ActivePandoraID[256], PandoraTitle[256];
STRING ActiveFavoritesName[256], ActiveFavoritesID[256], FavoritesTitle[256];
//
STRING Genre[10][256], Artist[10][256], Album[10][256], Title[10][256], Playlist[10][256],PlaylistRaw[10][256], DynamicName[10][256], DynamicFile[10][256], Search[10][256];
STRING NowplayingTitle[10][256], NowplayingArtist[10][256], NowplayingAlbum[10][256];
STRING OUT$[1024], IN$[16384], Dynamic$Internal[256][256], DynamicID[256][256];
STRING PandoraName[10][256], PandoraID[10][64], PandoraType[10][256];
STRING FavoritesName[10][256], FavoritesID[10][64], FavoritesType[10][256];  
STRING AppsCmd[10][64],AppsName[10][64],AppsIcon[10][256],AppsType[10][64];
STRING RadiosCmd[10][64],RadiosName[10][64], RadiosIcon[10][256],RadiosType[10][64];
//
STRING  PlayerID$[32], PlayersName[10][128], PlayersID[10][32], PlayersID_raw[10][32];
INTEGER PlayersIndex[10];
// ////////////////////// FUNCTIONS
Function ListShiftFwd_fn(){
	Integer i;
	For (i = 0 to 3){
		ListType[5-i] = ListType[4-i];
		ListName[5-i] = ListName[4-i];
		ListRestrictor[5-i] = ListRestrictor[4-i];
		ListFirst[5-i] = ListFirst[4-i];
//		trace("History %u = Type: %u, Name: %s, Restr: %s, 1st: %u",5-i,ListType[4-i],ListName[4-i],ListRestrictor[4-i],ListFirst[4-i]);
	}
}
Function ListShiftBk_fn(){
	Integer i;
	For (i = 1 to 4){
		ListType[i] = ListType[i+1];
		ListName[i] = ListName[i+1];
		ListRestrictor[i] = ListRestrictor[i+1];
		ListFirst[i] = ListFirst[i+1];
//		trace("History %u = Type: %u, Name: %s, Restr: %s, 1st: %u",i,ListType[i],ListName[i],ListRestrictor[i],ListFirst[i]);
	}
	ListType[5] = 0;
	ListName[5] = "Home";
	ListRestrictor[5] = "";
	ListFirst[5] = 0;
	ListName$ = ListName[1];

	If (ListType[1] = 0){
		FirstHome = ListFirst[1];
	}
	Else If (ListType[1] = 1){
		FirstGenre = ListFirst[1];
		restrictorGenres = ListRestrictor[1];
	}
	Else If (ListType[1] = 2){
		FirstArtist = ListFirst[1];
		restrictorArtists = ListRestrictor[1];
	}
	Else If (ListType[1] = 3){
		FirstAlbum = ListFirst[1];
		restrictorAlbums = ListRestrictor[1];
	}
	Else If (ListType[1] = 4){
		FirstTitle = ListFirst[1];
		restrictorTitles = ListRestrictor[1];
	}
	Else If (ListType[1] = 5){
		FirstPlaylist = ListFirst[1];
		restrictorPlaylists = ListRestrictor[1];
	}
	Else If (ListType[1] = 6){
		FirstDynamic = ListFirst[1];
	}
//	Else If (listType[1] = 7)
//  ...some code for nowplaying list type
//
	Else If (ListType[1] = 8){
		FirstSearch = ListFirst[1];
		restrictorSearch = ListRestrictor[1];
	}
	Else If (ListType[1] = 9) {
		FirstPandora = ListFirst[1];
		restrictorPandora = ListRestrictor[1];
	} 
	Else If (ListType[1] = 10) {
		FirstFavorites = ListFirst[1];
		restrictorFavorites = ListRestrictor[1];
	}
	Else If (ListType[1] = 11) {
		FirstApps = ListFirst[1];
	}
	Else If (ListType[1] = 12) {
		FirstRadios = ListFirst[1];
	}
	// ListType[1] = 13 reserved for Players
	// not yet a possible List type
}       
Function HomeRefresh_fn(){
	integer i;
 	ListName$ = ListName[1];
	SetArray(List$," ");
	OutHomeBar = 65535 - ((65535 / TotalHome) * FirstHome );
	If (ListType[1] = 0){
		OutListBar = OutHomeBar;
		OutListCount = TotalHome;
    }
	If ((TotalHome - FirstHome) < NumberOfList) {
		ListLengthHome = TotalHome - FirstHome;
	}
	Else {
		ListLengthHome = NumberOfList;
	}
	trace("FirstHome = %u",FirstHome);
	trace("ListLengthHome = %u",ListLengthHome);
	For (i = 1 to ListLengthHome){
		List$[i] = ListHome[i + FirstHome];
	}
}
Function GenresRefresh_fn(){
	ListName$ = ListName[1];
	makestring(OUT$,"genres %u %u %s charset:ascii \n", FirstGenre, NumberOfGenres, restrictorGenres);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
//	ListType = 1;
}
Function ArtistsRefresh_fn(){
	ListName$ = ListName[1];
	makestring(OUT$,"artists %u %u %s charset:ascii \n", FirstArtist, NumberOfArtists, restrictorArtists);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
//	ListType = 2;
}
Function AlbumsRefresh_fn(){
	ListName$ = ListName[1];
	makestring(OUT$,"albums %u %u %s charset:ascii \n",FirstAlbum, NumberOfAlbums, restrictorAlbums);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
//	ListType = 3;
}
Function TitlesRefresh_fn(){
	ListName$ = ListName[1];
	makestring(OUT$,"titles %u %u %s charset:ascii \n", FirstTitle, NumberOfTitles, restrictorTitles);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
//	ListType = 4;
}
Function PlaylistsRefresh_fn(){
	ListName$ = ListName[1];
	makestring(OUT$,"playlists %u %u %s charset:ascii \n",FirstPlaylist, NumberOfPlaylists, restrictorPlaylists);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
//	ListType = 5;
}
Function DynamicRefresh_fn(){
	ListName$ = ListName[1];
	makestring(OUT$,"dynamicplaylist playlists 1 %u %u charset:ascii \n",FirstDynamic, NumberOfDynamic);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
//	ListType = 6
}
Function SearchRefresh_fn(){
	ListName$ = ListName[1];
	makestring(OUT$,"search %u %u term:%s charset:ascii \n",FirstSearch,NumberOfSearch, search_in);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
//	ListType = 8
} 
Function PandoraRefresh_fn(){
	makestring(OUT$,"pandora items %u %u %s charset:ascii \n",FirstPandora,NumberOfPandora, restrictorPandora);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}   
Function FavoritesRefresh_fn(){
	makestring(OUT$,"%s items %u %u %s charset:ascii \n", FAR_name, FirstFavorites, NumberOfFavorites, restrictorFavorites);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
Function AppsRefresh_fn(){
	makestring(OUT$,"apps %u %u charset:ascii \n",FirstApps,NumberOfApps);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
Function RadiosRefresh_fn(){
	makestring(OUT$,"radios %u %u charset:ascii \n",FirstRadios,NumberOfRadios);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
Function NowplayingRefresh_fn(){
	If (CurrentsongIndex - NowplayingShowPrev S< 0)
		FirstNowplaying = 0;
	Else
		FirstNowplaying = CurrentsongIndex - NowplayingShowPrev;
	makestring(Out$,"%s status %u %u tags:al charset:ascii \n",PlayerID$,FirstNowplaying, NumberOfNowplaying);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
Function PlayersRefresh_fn(){
	makestring(OUT$,"players %u %u \n",FirstPlayers,NumberOfPlayers);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
Function ListRefresh_fn(){
	If (ListType[1] = 0){
		HomeRefresh_fn();
	}
	Else If (ListType[1] = 1){
		GenresRefresh_fn();
	}
	Else If (ListType[1] = 2){
		ArtistsRefresh_fn();
	}
	Else If (ListType[1] = 3){
		AlbumsRefresh_fn();
	}
	Else If (ListType[1] = 4){
		TitlesRefresh_fn();
	}
	Else If (ListType[1] = 5){
		PlaylistsRefresh_fn();
	}
	Else If (ListType[1] = 6){
		DynamicRefresh_fn();
	}
//	Else If (ListType[1] = 7){
//	nowplaying
//	}
	Else If (ListType[1] = 8){
		SearchRefresh_fn();
	}
	Else If (ListType[1] = 9){
		PandoraRefresh_fn();
	}  
	Else If (ListType[1] = 10){
		FavoritesRefresh_fn();
	}
	Else If (ListType[1] = 11){
		AppsRefresh_fn();
	}
	Else If (ListType[1] = 12){
		RadiosRefresh_fn();
	}
	// ListType[1] = 13 reserved for Players
	// not yet a possible List type
}
Function Home_PgReset_fn(){
	Integer i;
	FirstHome = 0;
	ListShiftFwd_fn();
	ListType[1] = 0;
	ListName[1] = "Home";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	HomeRefresh_fn();
}
Function Genres_PgReset_fn(){
	FirstGenre = 0;
	restrictorGenres = "";
    ListShiftFwd_fn();
	ListType[1] = 1;
	ListName[1] = "All Genres";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	GenresRefresh_fn();
}
Function Artists_PgReset_fn(){
	FirstArtist = 0;
	restrictorArtists = "";
    ListShiftFwd_fn();
	ListType[1] = 2;
	ListName[1] = "All Artists";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	ArtistsRefresh_fn();
}
Function Albums_PgReset_fn(){
	FirstAlbum = 0;
	restrictorAlbums = "";
    ListShiftFwd_fn();
	ListType[1] = 3;
	ListName[1] = "All Albums";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	AlbumsRefresh_fn();
}
Function Titles_PgReset_fn(){
	FirstTitle = 0;
	restrictorTitles = "tags:te";
    ListShiftFwd_fn();
	ListType[1] = 4;
	ListName[1] = "All Titles";
	ListRestrictor[1] = "tags:te";
	ListFirst[1] = 0;
	TitlesRefresh_fn();
}
Function Playlists_PgReset_fn(){
	FirstPlaylist = 0;
	restrictorPlaylists = "";
    ListShiftFwd_fn();
	ListType[1] = 5;
	ListName[1] = "All Playlists";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	PlaylistsRefresh_fn();
}
Function Dynamic_PgReset_fn(){
	FirstDynamic = 0;
    ListShiftFwd_fn();
	ListType[1] = 6;
	ListName[1] = "All DynamicPlaylists";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	DynamicRefresh_fn();
}
Function Pandora_PgReset_fn() {
	FirstPandora = 0;
    restrictorPandora = "";
    ListShiftFwd_fn();
	ListType[1] = 9;
	ListName[1] = "Pandora";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	PandoraRefresh_fn();
	
} 
Function Favorites_PgReset_fn() {
	FAR_name = "favorites";
	FAR_parse = FAR_name + " items ";
	FirstFavorites = 0;
	restrictorFavorites = "";
    ListShiftFwd_fn();
	ListType[1] = 10;
	ListName[1] = "Favorites";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	FavoritesRefresh_fn();
}
Function Apps_PgReset_fn() {
	FirstApps = 0;
	ListShiftFwd_fn();
	ListType[1] = 11;
	ListName[1] = "Apps";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	ListName$ = ListName[1];
	AppsRefresh_fn();
}
Function Radios_PgReset_fn() {
	FirstRadios = 0;
	ListShiftFwd_fn();
	ListType[1] = 12;
	ListName[1] = "Radios";
	ListRestrictor[1] = "";
	ListFirst[1] = 0;
	ListName$ = ListName[1];
	RadiosRefresh_fn();
}
Function Nowplaying_PgReset_fn(){
	FirstNowplaying = 0;
    Nowplaying_refresh_enable = 1;
	NowplayingRefresh_fn();
	// ListType[1] = 7 reserved for Nowplaying
	// not yet a possible List type
}
Function Players_PgReset_fn(){
	FirstPlayers = 0;
	PlayersRefresh_fn();
	// ListType[1] = 13 reserved for Players
	// not yet a possible List type
}
Function Home_PgUp_fn(){
 	If (FirstHome = 0 && (NumberOfHome <= TotalHome)){
 		FirstHome = TotalHome - NumberOfHome;
 	}
 	Else If (FirstHome < NumberOfHome){
 		FirstHome = 0;
 	}
 	Else {
 		FirstHome = FirstHome - NumberOfHome;
 	}
 	ListFirst[1] = FirstHome;
 	HomeRefresh_fn();
}                     
Function Genres_PgUp_fn(){
	If (FirstGenre = 0 && (NumberOfGenres <= TotalGenres)){
		FirstGenre = TotalGenres - NumberOfGenres;
    }
    Else If (FirstGenre < NumberOfGenres){
		FirstGenre = 0;//(TotalGenres / NumberOfGenres) * NumberOfGenres;
	}
    Else {
    	FirstGenre = FirstGenre - NumberOfGenres;
    }
	ListFirst[1] = FirstGenre;
	GenresRefresh_fn();
}
Function Artists_PgUp_fn(){
	If (FirstArtist = 0 && (NumberOfArtists <= TotalArtists)){
		FirstArtist = TotalArtists - NumberOfArtists;
	}
    Else If (FirstArtist < NumberOfArtists) {		
		FirstArtist = 0;//(TotalArtists / NumberOfArtists) * NumberOfArtists;
	}
	Else {
		FirstArtist = FirstArtist - NumberOfArtists;
    }
	ListFirst[1] = FirstArtist;
	ArtistsRefresh_fn();
}
Function Albums_PgUp_fn(){
	If (FirstAlbum = 0 && (NumberOfAlbums <= TotalAlbums)){
		FirstAlbum = TotalAlbums - NumberOfAlbums;
	}
    Else If (FirstAlbum < NumberOfAlbums){
		FirstAlbum = 0;//(TotalAlbums / NumberOfAlbums) * NumberOfAlbums;
	}
	else {
		FirstAlbum = FirstAlbum - NumberOfAlbums;
    }
	ListFirst[1] = FirstAlbum;
	AlbumsRefresh_fn();
}
Function Titles_PgUp_fn(){
	If (FirstTitle = 0 && (NumberOfTitles <= TotalTitles)){
		FirstTitle = TotalTitles - NumberOfTitles;
	}
    Else If (FirstTitle < NumberOfTitles){
		FirstTitle = 0;//(TotalTitles / NumberOfTitles) * NumberOfTitles;
	}
	Else {
		FirstTitle = FirstTitle - NumberOfTitles;
    }
	ListFirst[1] = FirstTitle;
	TitlesRefresh_fn();
}
Function Playlists_PgUp_fn(){
	If (FirstPlaylist = 0 && (NumberOfPlaylists <= TotalPlaylists)){
		FirstPlaylist = TotalPlaylists - NumberOfPlaylists;
	}
    Else If (FirstPlaylist < NumberOfPlaylists){
		FirstPlaylist = 0;//(TotalPlaylists / NumberOfPlaylists) * NumberOfPlaylists;
	}
	Else {
		FirstPlaylist = FirstPlaylist - NumberOfPlaylists;
    }
	ListFirst[1] = FirstPlaylist;
	PlaylistsRefresh_fn();
}
Function Dynamic_PgUp_fn(){
	If (FirstDynamic = 0 && (NumberOfDynamic <= TotalDynamic)){
		FirstDynamic = TotalDynamic - NumberOfDynamic;
	}
    Else If (FirstDynamic < NumberOfDynamic){
		FirstDynamic = 0;//(TotalDynamic / NumberOfDynamic) * NumberOfDynamic;
	}
	Else {
		FirstDynamic = FirstDynamic - NumberOfDynamic;
    }
	ListFirst[1] = FirstDynamic;
	DynamicRefresh_fn();
}
Function Search_PgUp_fn(){
	If (FirstSearch = 0 && (NumberOfSearch <= TotalSearch)){
		FirstSearch = TotalSearch - NumberOfSearch;
	}
    Else If (FirstSearch < NumberOfSearch) {
		FirstSearch = 0;//(TotalSearch / NumberOfSearch) * NumberOfSearch;
	}
	Else {
		FirstSearch = FirstSearch - NumberOfSearch;
    }
	ListFirst[1] = FirstSearch;
	SearchRefresh_fn();
}
Function Nowplaying_PgUp_fn(){
//	Cancelwait(Nowplaying_refresh_enable_timer_pgup);
    Nowplaying_refresh_enable = 0;
	If (FirstNowplaying = 0 && (NumberOfNowplaying <= TotalNowplaying)){
		FirstNowplaying = TotalNowplaying - NumberOfNowplaying;
	}
	Else If (FirstNowplaying < NumberOfNowplaying){
		FirstNowplaying = 0;
	}
	Else {
		FirstNowplaying = FirstNowplaying - NumberOfNowplaying;
    }
	makestring(Out$,"%s status %u %u tags:al charset:ascii \n",PlayerID$,FirstNowplaying, NumberOfNowplaying);
//	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);

	Wait(Nowplaying_refresh_enable_time,Nowplaying_refresh_enable_timer_pgup){
			Nowplaying_refresh_enable = 1;
	}
}
Function Pandora_PgUp_fn(){
	If (FirstPandora = 0 && (NumberOfPandora <= TotalPandora)) {
		FirstPandora = TotalPandora - NumberOfPandora;
    }
    Else If (FirstPandora < NumberOfPandora)	{
		FirstPandora = 0; 
	}
    Else {
    	FirstPandora = FirstPandora - NumberOfPandora;
    }
	ListFirst[1] = FirstPandora;
	PandoraRefresh_fn();
}
Function Favorites_PgUp_fn() {
	If (FirstFavorites = 0 && (NumberOfFavorites <= TotalFavorites)) {
		FirstFavorites = TotalFavorites - NumberOfFavorites;
	}
    Else If (FirstFavorites < NumberOfFavorites)	{
		FirstFavorites = 0; 
	}
	Else {
		FirstFavorites = FirstFavorites - NumberOfFavorites;
    }
	ListFirst[1] = FirstFavorites;
	FavoritesRefresh_fn();
}  
Function Apps_PgUp_fn() {
	If (FirstApps = 0 && (NumberOfApps <= TotalApps)) {
		FirstApps = TotalApps - NumberOfApps;
	}
    Else If (FirstApps < NumberOfApps)	{
		FirstApps = 0; 
	}
	Else {
		FirstApps = FirstApps - NumberOfApps;
    }
	ListFirst[1] = FirstApps;
	AppsRefresh_fn();
}
Function Radios_PgUp_fn() {
	If (FirstRadios = 0 && (NumberOfRadios <= TotalRadios)) {
		FirstRadios = TotalRadios - NumberOfRadios;
	}
    Else If (FirstRadios < NumberOfRadios)	{
		FirstRadios = 0; 
	}
	Else {
		FirstRadios = FirstRadios - NumberOfRadios;
    }
	ListFirst[1] = FirstRadios;
	RadiosRefresh_fn();
}
Function Players_PgUp_fn(){
	If (FirstPlayers = 0 && (NumberOfPlayers <= TotalPlayers)){
		FirstPlayers = TotalPlayers - NumberOfPlayers;
	}
    Else If (FirstPlayers < NumberOfPlayers) {
		FirstPlayers = 0;
	}
	Else {
		FirstPlayers = FirstPlayers - NumberOfPlayers;
    }
	PlayersRefresh_fn();
}
Function Home_PgDn_fn(){
	If (FirstHome + NumberOfHome < TotalHome){
    	FirstHome = FirstHome + NumberOfHome;
	}
	else {
		FirstHome = 0;
	}
	ListFirst[1] = FirstHome;
	HomeRefresh_fn();
}
Function Genres_PgDn_fn(){
	If (FirstGenre + NumberOfGenres < TotalGenres){
    	FirstGenre = FirstGenre + NumberOfGenres;
	}
	else {
		FirstGenre = 0;
	}
	ListFirst[1] = FirstGenre;
	GenresRefresh_fn();
}
Function Artists_PgDn_fn(){
	If (FirstArtist + NumberOfArtists < TotalArtists){
    	FirstArtist = FirstArtist + NumberOfArtists;
	}
	else {
		FirstArtist = 0;
	}
	ListFirst[1] = FirstArtist;
	ArtistsRefresh_fn();
}
Function Albums_PgDn_fn(){
	If (FirstAlbum + NumberOfAlbums < TotalAlbums){
    	FirstAlbum = FirstAlbum + NumberOfAlbums;
	}
	else {
		FirstAlbum = 0;
	}
	ListFirst[1] = FirstAlbum;
	AlbumsRefresh_fn();
}
Function Titles_PgDn_fn(){
	If (FirstTitle + NumberOfTitles < TotalTitles){
    	FirstTitle = FirstTitle + NumberOfTitles;
	}
	else {
		FirstTitle = 0;
	}
	ListFirst[1] = FirstTitle;
	TitlesRefresh_fn();
}
Function Playlists_PgDn_fn(){
	If (FirstPlaylist + NumberOfPlaylists < TotalPlaylists){
    	FirstPlaylist = FirstPlaylist + NumberOfPlaylists;
	}
	else {
		FirstPlaylist = 0;
	}
	ListFirst[1] = FirstPlaylist;
	PlaylistsRefresh_fn();
}
Function Dynamic_PgDn_fn(){
	If (FirstDynamic + NumberOfDynamic < TotalDynamic){
    	FirstDynamic = FirstDynamic + NumberOfDynamic;
	}
	else {
		FirstDynamic = 0;
	}
	ListFirst[1] = FirstDynamic;
	DynamicRefresh_fn();
}
Function Search_PgDn_fn(){
	If (FirstSearch + NumberOfSearch < TotalSearch)	{
    	FirstSearch = FirstSearch + NumberOfSearch;
	}
	else {
		FirstSearch = 0;
	}
	ListFirst[1] = FirstSearch;
	SearchRefresh_fn();
}
Function Nowplaying_PgDn_fn(){
//	Cancelwait(Nowplaying_refresh_enable_timer);
    Nowplaying_refresh_enable = 0;

    If (FirstNowplaying + NumberOfNowplaying < TotalNowplaying){
		FirstNowplaying = FirstNowplaying + NumberOfNowplaying;
	}
	else {
		FirstNowplaying = 0;
    }
	makestring(Out$,"%s status %u %u tags:al charset:ascii \n",PlayerID$,FirstNowplaying, NumberOfNowplaying);
//	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);

	Wait(Nowplaying_refresh_enable_time,Nowpplaying_refresh_enable_timer_pgdn){
			Nowplaying_refresh_enable = 1;
	}
}
Function Pandora_PgDn_fn(){
	If (FirstPandora + NumberOfPandora < TotalPandora){
    	FirstPandora = FirstPandora + NumberOfPandora;
	}
	else {
		FirstPandora = 0;
	}
	ListFirst[1] = FirstPandora;
	PandoraRefresh_fn();
}   
Function Favorites_PgDn_fn(){
	If (FirstFavorites + NumberOfFavorites < TotalFavorites){
    	FirstFavorites = FirstFavorites + NumberOfFavorites;
	}
	else {
		FirstFavorites = 0;
	}
	ListFirst[1] = FirstFavorites;
	FavoritesRefresh_fn();
}  
Function Apps_PgDn_fn(){
	If (FirstApps + NumberOfApps < TotalApps){
    	FirstApps = FirstApps + NumberOfApps;
	}
	else {
		FirstApps = 0;
	}
	ListFirst[1] = FirstApps;
	AppsRefresh_fn();
}  
Function Radios_PgDn_fn(){
	If (FirstRadios + NumberOfRadios < TotalRadios){
    	FirstRadios = FirstRadios + NumberOfRadios;
	}
	else {
		FirstRadios = 0;
	}
	ListFirst[1] = FirstRadios;
	RadiosRefresh_fn();
}  
Function Players_PgDn_fn(){
	If (FirstPlayers + NumberOfPlayers < TotalPlayers)	{
    	FirstPlayers = FirstPlayers + NumberOfPlayers;
	}
	else {
		FirstPlayers = 0;
	}
	ListFirst[1] = FirstPlayers;
	PlayersRefresh_fn();
}
Function HomeListSelect_fn(integer i){
//	ListShiftFwd_fn(); 
	If (i=1){Favorites_PgReset_fn();}
	Else If (i=2){Genres_PgReset_fn();}
	Else If (i=3){Artists_PgReset_fn();}
	Else If (i=4){Albums_PgReset_fn();}
	Else If (i=5){Playlists_PgReset_fn();}
	Else If (i=6){Dynamic_PgReset_fn();}
	Else If (i=7){Radios_PgReset_fn();}  
	Else If (i=8){Apps_PgReset_fn();}
	Else If (i=9){Pandora_PgReset_fn();}
	Else If (i=10){Titles_PgReset_fn();}
}
Function GenreListSelect_fn(integer i){
    ListShiftFwd_fn();
	ListType[1] = 2;
	ListFirst[1] = 0;
	ActiveGenreID = GenreID[i];
	ActiveGenre = Genre[i];
	makestring(ListName[1], "Artists in %s",ActiveGenre);
	makestring(restrictorArtists,"genre_id:%u",GenreID[i]);
	ListRestrictor[1] = restrictorArtists;
	restrictorAlbums = restrictorArtists;
	restrictorTitles = restrictorArtists + " tags:te";
	FirstArtist = 0;
	ArtistsRefresh_fn();
/*	Wait(50,waitListGenreAlbums)
	{
		AlbumsRefresh_fn();
		Wait(50,waitListGenreTitles)
			TitlesRefresh_fn();
	}
*/
	ListName$ = ListName[1];
}
Function ArtistListSelect_fn(integer i){
	ListShiftFwd_fn();	
	ListType[1] = 3;
	ListFirst[1] = 0;
	ActiveArtistID = ArtistID[i];
	ActiveArtist = Artist[i];
/*	If (restrictorArtists != ""){
		makestring(ListName[1],"%s: Albums for %s",ActiveGenre,ActiveArtist);
	}
	Else {
		makestring(ListName[1], "Albums for %s",ActiveArtist);
	}
	makestring(restrictorAlbums,"%s artist_id:%u",restrictorArtists,ArtistID[i]);
*/
	makestring(ListName[1], "Albums for %s",ActiveArtist);			
	makestring(restrictorAlbums,"artist_id:%u",ArtistID[i]);
	ListRestrictor[1] = restrictorAlbums;
	FirstAlbum = 0;
	AlbumsRefresh_fn();
/*	restrictorTitles = restrictorAlbums + " tags:te";
	Wait(20,waitListArtistTitles)
	TitlesRefresh_fn();
*/
	ListName$ = ListName[1];
}
Function AlbumListSelect_fn(integer i){
	ListShiftFwd_fn();
	ListType[1] = 4;
	ListFirst[1] = 0;
	ActiveAlbumID = AlbumID[i];
	ActiveAlbum = Album[i];
	makestring(ListName[1],"Titles in %s",ActiveAlbum);
	makestring(restrictorTitles,"album_id:%u sort:tracknum tags:te",AlbumID[i]);
	ListRestrictor[1] = restrictorTitles;
	FirstTitle = 0;
	TitlesRefresh_fn();
	ListName$ = ListName[1];
}
Function TitleListSelect_fn(integer i){
	ActiveAlbumID = TitleAlbumID[i];
	ActiveTrackID = TrackID[i];
	ActiveTitle = Title[i];
	ActivePlaylist = "";
	makestring(OUT$,"%s playlistcontrol cmd:load album_id:%u \n",PlayerID$, TitleAlbumID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	makestring(OUT$,"%s playlist index %u \n",PlayerID$, TitleTracknum[i] - 1);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
Function PlaylistListSelect_fn(integer i){
	makestring(OUT$,"%s dynamicplaylist playlist stop\n",PlayerID$); //stop adding songs with the dynamic playlist plugin
	trace("sending: %s",OUT$);
	socketsend(TCPClient, OUT$);
	ActivePlaylistID = PlaylistID[i]; //set the active playlist ID
	trace("ActivePlaylistID = %u",PlaylistID[i]);
	ActivePlaylist = PlaylistRaw[i]; //set the active playlist name
    trace("ActivePlaylist = %s",PlaylistRaw[i]);
	makestring(OUT$,"%s playlist resume %s\n",PlayerID$,PlaylistRaw[i]); // play the selected playlist by resuming from it's last saved position
	trace("sending: %s",OUT$);
	socketsend(TCPClient, OUT$);
	pulse(20,NowplayingPageFlip);
}
Function DynamicListSelect_fn(integer i){
	ActiveDynamicFile = DynamicFile[i];
	ActiveDynamic = DynamicName[i];
	ActivePlaylist = "";
	makestring(OUT$,"%s dynamicplaylist playlist continue %s\n",PlayerID$, ActiveDynamicFile);
	trace("sending: %s",OUT$);
	socketsend(TCPClient, OUT$);
	pulse(20,NowplayingPageFlip);
}
Function SearchListSelect_fn(integer i){
	ListShiftFwd_fn();
	ListFirst[1] = 0;
	trace("SearchListSelect_fn");
	If (SearchIDType[i] = 1){ //searchID is an artist_id
		ListType[1] = 3;
		ActiveArtistID = SearchID[i];
		ActiveArtist = Search[i];
		makestring(ListName[1], "Albums for %s",ActiveArtist);
		makestring(restrictorAlbums,"artist_id:%u",SearchID[i]);
		ListRestrictor[1] = restrictorAlbums;
// zzz  look for something that is leaving the "search:" in the albums when I click on a search result
//				restrictorTitles = restrictorAlbums + " tags:te";
		FirstAlbum = 0;
		AlbumsRefresh_fn();
	}
	Else If (SearchIDType[i] = 2){ // SearchID is an album_id
		ListType[1] = 4;
		ActiveAlbumID = SearchID[i];
		ActiveAlbum = Search[i];
		makestring(ListName[1],"Titles in %s",ActiveAlbum);
		makestring(restrictorTitles,"album_id:%u sort:tracknum tags:te",SearchID[i]);
		ListRestrictor[1] = restrictorTitles;
		FirstTitle = 0;
		TitlesRefresh_fn();
	}
	Else If (SearchIDType[i] = 3){ //searchID is a track_id
		// insert then next track
		ActiveTrackID = SearchID[i];
		ActiveTitle = Search[i];
		ActivePlaylist = "";
		makestring(OUT$,"%s playlistcontrol cmd:insert track_id:%u \n",PlayerID$, SearchID[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
		delay(10);
		makestring(OUT$,"%s playlist index +1\n", PlayerID$);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
	Else If (SearchIDType[i] = 4){ //searchID is a genre_id
		ListType[1] = 2;
		ActiveGenreID = SearchID[i];
		ActiveGenre = Search[i];
		makestring(ListName[1], "Artists in %s",ActiveGenre);
		makestring(restrictorArtists,"genre_id:%u",SearchID[i]);
		ListRestrictor[1] = restrictorArtists;
		restrictorAlbums = restrictorArtists;
		restrictorTitles = restrictorArtists + " tags:te";
		FirstArtist = 0;
		ArtistsRefresh_fn();
	}
	ListName$ = ListName[1];
}
Function PandoraListSelect_fn(integer i){
	ListShiftFwd_fn();
	ListFirst[1] = 0;
	If (PandoraIsAudio[i] = 0){
		ActivePandoraID = PandoraID[i];
		ActivePandoraName = PandoraName[i];
		makestring(ListName[1],"Pandora: %s",PandoraTitle);
		makestring(restrictorPandora,"item_id:%s",PandoraID[i]);
		ListRestrictor[1] = restrictorPandora;
		FirstPandora = 0;
		PandoraRefresh_fn();
	}
	Else If (PandoraIsAudio[i] = 1){
		makestring(OUT$,"%s pandora playlist play item_id:%s\n",PlayerID$, PandoraID[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient, OUT$);
//		pulse(20,NowplayingPageFlip);
	}
	ListName$ = ListName[1];
}
Function FavoritesListSelect_fn(integer i){
	If (FavoritesIsAudio[i] = 0){
		ListShiftFwd_fn();
		FirstFavorites = 0;
		restrictorFavorites = "item_id:" + FavoritesID[i];
		ListRestrictor[1] = restrictorFavorites;
		ListFirst[1] = 0;
//		ListName[1] = FAR_name + ": " + FavoritesTitle;
		FavoritesRefresh_fn();
	}
	Else If (FavoritesIsAudio[i] = 1){
		makestring(OUT$,"%s %s playlist play item_id:%s\n",PlayerID$, FAR_name ,FavoritesID[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient, OUT$);
		pulse(20,NowplayingPageFlip);
	}
}
Function AppsListSelect_fn(integer i){
	ListShiftFwd_fn();
	ListType[1] = 10;
	ListFirst[1] = 0;
	FAR_name = AppsCmd[i];
	FAR_parse = FAR_name + " items ";
	trace("FAR_parse = %s",FAR_parse);
	restrictorFavorites = "";
	ListName[1] = AppsName[i];
	ListName$ = ListName[1];
	FirstFavorites = 0;
	FavoritesRefresh_fn();
}
Function RadiosListSelect_fn(integer i){
	ListShiftFwd_fn();
	ListType[1] = 10;
	ListFirst[1] = 0;
	FAR_name = RadiosCmd[i];
	FAR_parse = FAR_name + " items ";
	trace("FAR_parse = %s",FAR_parse);
	restrictorFavorites = "";
	ListName[1] = RadiosName[i];
	ListName$ = ListName[1];
	FirstFavorites = 0;
	FavoritesRefresh_fn();
}
Function GenreListPlay_fn(integer i){
	makestring(OUT$,"%s playlistcontrol cmd:load genre_id:%u \n",PlayerID$, GenreID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	ActiveGenreID = GenreID[i];
	ActivePlaylist = "";
}
Function ArtistListPlay_fn(integer i){
	makestring(OUT$,"%s playlistcontrol cmd:load artist_id:%u \n",PlayerID$, ArtistID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	ActiveArtistID = ArtistID[i];
	ActivePlaylist = "";
}
Function AlbumListPlay_fn(integer i){
	makestring(OUT$,"%s playlistcontrol cmd:load album_id:%u \n",PlayerID$, AlbumID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	ActiveAlbumID = AlbumID[i];
	ActivePlaylist = "";
}
Function TitleListPlay_fn(integer i){
	makestring(OUT$,"%s playlistcontrol cmd:insert track_id:%u \n",PlayerID$, TrackID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	delay(10);
	makestring(OUT$,"%s playlist index +1\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	ActiveTrackID = TrackID[i];
	ActivePlaylist = "";
}
Function PlaylistListPlay_fn(integer i){
	makestring(OUT$,"%s dynamicplaylist playlist stop\n",PlayerID$); //stop adding songs with the dynamic playlist plugin
	trace("sending: %s",OUT$);
	socketsend(TCPClient, OUT$);
	makestring(OUT$,"%s playlistcontrol cmd:load playlist_id:%u \n",PlayerID$, PlaylistID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	ActivePlaylistID = PlaylistID[i];
	ActivePlaylist = PlaylistRaw[i];
	pulse(20,NowplayingPageFlip);
}
Function DynamicListPlay_fn(integer i){
	ActiveDynamicFile = DynamicFile[i];
	ActiveDynamic = DynamicName[i];
	ActivePlaylist = "";
	makestring(OUT$,"%s dynamicplaylist playlist continue %s\n",PlayerID$, ActiveDynamicFile);
	trace("sending: %s",OUT$);
	socketsend(TCPClient, OUT$);
}
Function FavoritesListPlay_fn(integer i){
	makestring(OUT$,"%s favorites playlist insert item_id:%s\n",PlayerID$, FavoritesID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient, OUT$);
//	pulse(20,NowplayingPageFlip);
	makestring(OUT$,"%s playlist index +1\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
Function SearchListPlay_fn(integer i){
	ActivePlaylist = "";
	ListShiftFwd_fn();
	ListFirst[1] = 0;
	trace("SearchListPLay_fn");
	If (SearchIDType[i] = 1){ //searchID is an artist_id
		makestring(OUT$,"%s playlistcontrol cmd:insert artist_id:%u \n",PlayerID$, SearchID[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
		delay(10);
		makestring(OUT$,"%s playlist index +1\n", PlayerID$);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
	Else If (SearchIDType[i] = 2){ // SearchID is an album_id
		makestring(OUT$,"%s playlistcontrol cmd:insert album_id:%u \n",PlayerID$, SearchID[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
		delay(10);
		makestring(OUT$,"%s playlist index +1\n", PlayerID$);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
	Else If (SearchIDType[i] = 3){ //searchID is a track_id
		ActiveTrackID = SearchID[i];
		ActiveTitle = Search[i];
		makestring(OUT$,"%s playlistcontrol cmd:insert track_id:%u \n",PlayerID$, SearchID[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
		delay(10);
		makestring(OUT$,"%s playlist index +1\n", PlayerID$);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
	Else If (SearchIDType[i] = 4){ //searchID is a genre_id
		makestring(OUT$,"%s playlistcontrol cmd:insert genre_id:%u \n",PlayerID$, SearchID[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
		delay(10);
		makestring(OUT$,"%s playlist index +1\n", PlayerID$);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
}
Function GenreListAdd_fn(integer i){
	makestring(OUT$,"%s playlistcontrol cmd:add genre_id:%u \n",PlayerID$, GenreID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	ActiveGenreID = GenreID[i];
	ActivePlaylist = "";
}
Function ArtistListAdd_fn(integer i){
	makestring(OUT$,"%s playlistcontrol cmd:add artist_id:%u \n",PlayerID$, ArtistID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	ActiveArtistID = ArtistID[i];
	ActivePlaylist = "";
}
Function AlbumListAdd_fn(integer i){
	makestring(OUT$,"%s playlistcontrol cmd:add album_id:%u \n",PlayerID$, AlbumID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	ActiveAlbumID = AlbumID[i];
	ActivePlaylist = "";
}
Function TitleListAdd_fn(integer i){
	makestring(OUT$,"%s playlistcontrol cmd:add track_id:%u \n",PlayerID$, TrackID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	ActiveTrackID = TrackID[i];
	ActivePlaylist = "";
}
Function PlaylistListAdd_fn(integer i){
	makestring(OUT$,"%s playlistcontrol cmd:add playlist_id:%u \n",PlayerID$, PlaylistID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	ActivePlaylistID = 0; // clear the active playlist ID (used to set to PlaylistID[i])
	ActivePlaylist = ""; // clear the active playlist
}
Function FavoritesListAdd_fn(integer i){
	makestring(OUT$,"%s favorites playlist add item_id:%s\n",PlayerID$, FavoritesID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient, OUT$);
	ActivePlaylistID = 0; // clear the active playlist ID (used to set to PlaylistID[i])
	ActivePlaylist = ""; // clear the active playlist
//	pulse(20,NowplayingPageFlip);
}
Function SearchListAdd_fn(integer i){
	ActivePlaylist = "";
	ListShiftFwd_fn();
	ListFirst[1] = 0;
	trace("SearchListAdd_fn");
	If (SearchIDType[i] = 1){ //searchID is an artist_id
		makestring(OUT$,"%s playlistcontrol cmd:add artist_id:%u \n",PlayerID$, SearchID[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
	Else If (SearchIDType[i] = 2){ // SearchID is an album_id
		makestring(OUT$,"%s playlistcontrol cmd:add album_id:%u \n",PlayerID$, SearchID[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
	Else If (SearchIDType[i] = 3){ //searchID is a track_id
		ActiveTrackID = SearchID[i];
		ActiveTitle = Search[i];
		makestring(OUT$,"%s playlistcontrol cmd:add track_id:%u \n",PlayerID$, SearchID[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
	Else If (SearchIDType[i] = 4){ //searchID is a genre_id
		makestring(OUT$,"%s playlistcontrol cmd:add genre_id:%u  \n",PlayerID$, SearchID[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
}
Function GenreListInsert_fn(integer i){
	makestring(OUT$,"%s playlistcontrol cmd:insert genre_id:%u \n",PlayerID$, GenreID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	ActiveGenreID = GenreID[i];
	ActivePlaylist = "";
}
Function ArtistListInsert_fn(integer i){
	makestring(OUT$,"%s playlistcontrol cmd:insert artist_id:%u \n",PlayerID$, ArtistID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	ActiveArtistID = ArtistID[i];
	ActivePlaylist = "";
}
Function AlbumListInsert_fn(integer i){
	makestring(OUT$,"%s playlistcontrol cmd:insert album_id:%u \n",PlayerID$, AlbumID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	ActiveAlbumID = AlbumID[i];
	ActivePlaylist = "";
}
Function TitleListInsert_fn(integer i){
	makestring(OUT$,"%s playlistcontrol cmd:insert track_id:%u \n",PlayerID$, TrackID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	ActiveTrackID = TrackID[i];
	ActivePlaylist = "";
}
Function PlaylistListInsert_fn(integer i){
	makestring(OUT$,"%s playlistcontrol cmd:insert playlist_id:%u \n",PlayerID$, PlaylistID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
	ActivePlaylistID = 0; // clear the active playlist ID 
	ActivePlaylist = ""; // clear the active playlist
}
Function FavoritesListInsert_fn(integer i){
	makestring(OUT$,"%s favorites playlist insert item_id:%s\n",PlayerID$, FavoritesID[i]);
	trace("sending: %s",OUT$);
	socketsend(TCPClient, OUT$);
//	pulse(20,NowplayingPageFlip);
	ActivePlaylistID = 0; // clear the active playlist ID 
	ActivePlaylist = ""; // clear the active playlist
}
Function SearchListInsert_fn(integer i){
	ActivePlaylist = "";
	ListShiftFwd_fn();
	ListFirst[1] = 0;
	trace("SearchListInsert_fn");
	If (SearchIDType[i] = 1){ //searchID is an artist_id
		makestring(OUT$,"%s playlistcontrol cmd:insert artist_id:%u \n",PlayerID$, SearchID[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
	Else If (SearchIDType[i] = 2){ // SearchID is an album_id
		makestring(OUT$,"%s playlistcontrol cmd:insert album_id:%u \n",PlayerID$, SearchID[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
	Else If (SearchIDType[i] = 3){ //searchID is a track_id
		ActiveTrackID = SearchID[i];
		ActiveTitle = Search[i];
		makestring(OUT$,"%s playlistcontrol cmd:insert track_id:%u \n",PlayerID$, SearchID[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
	Else If (SearchIDType[i] = 4){ // SearchID is an genre_id
		makestring(OUT$,"%s playlistcontrol cmd:insert genre_id:%u \n",PlayerID$, SearchID[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
}
Function NowplayingPlay_fn(integer i){
	If (NowplayingIndex[i] = 65534){
		Nowplaying_PgReset_fn();
	}
	Else {
		makestring(OUT$,"%s playlist index %u \n",PlayerID$, NowplayingIndex[i]);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
}
Function NowplayingRemove_fn(integer i){
	Activeplaylist = "";
	makestring(OUT$,"%s playlist delete %u \n",PlayerID$, NowplayingIndex[i]);//xxx
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
Function NowplayingMoveUp_fn(integer i){
	makestring(OUT$,"%s playlist move %u %u \n",PlayerID$, NowplayingIndex[i], NowplayingIndex[i]-1);//xxx
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
Function NowplayingMoveDown_fn(integer i){
	If (NowplayingIndex[i] <> 65534){
		makestring(OUT$,"%s playlist move %u %u \n",PlayerID$, NowplayingIndex[i], NowplayingIndex[i]+1);//xxx
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
}
Function Search_fn(){
	If (ListType[1] != 8)
	{
		ListShiftFwd_fn(); // move the history forward to make room for the new entry
		ListType[1] = 8; // search list type = 8
		trace("adding search to history");
	}
	ListFirst[1]=0;
	makestring(ListName[1],"\"%s\" anywhere",search_in);
	makestring(restrictorSearch,"%s",search_in);
	ListRestrictor[1] = search_in;
	FirstSearch = 0;
	SearchRefresh_fn();
	ListName$ = ListName[1];
}
Function Search_genres_fn(){
	If (ListType[1] != 1)
	{
	    ListShiftFwd_fn();
		ListType[1] = 1;
	}
	ListFirst[1] = 0;
	makestring(ListName[1], "\"%s\" in Genres",search_in);
    makestring(restrictorGenres,"search:%s",search_in);
	ListRestrictor[1] = restrictorGenres;
	FirstGenre = 0;
	GenresRefresh_fn();
	ListName$ = ListName[1];
}
Function Search_artists_fn(){
	If (ListType[1] != 2)
	{
	    ListShiftFwd_fn();
		ListType[1] = 2;
	}
	ListFirst[1] = 0;
	makestring(ListName[1], "\"%s\" in Artists",search_in);
    makestring(restrictorArtists,"search:%s",search_in);
	ListRestrictor[1] = restrictorArtists;
	FirstArtist = 0;
	ArtistsRefresh_fn();
	ListName$ = ListName[1];
}
Function Search_albums_fn(){
	If (ListType[1] != 3){
	    ListShiftFwd_fn();
		ListType[1] = 3;
	}
	ListFirst[1] = 0;
	makestring(ListName[1], "\"%s\" in Albums",search_in);
    makestring(restrictorAlbums,"search:%s",search_in);
	ListRestrictor[1] = restrictorAlbums;
	FirstAlbum = 0;
	AlbumsRefresh_fn();
	ListName$ = ListName[1];
}
Function Search_titles_fn(){
	If (ListType[1] != 4){
	    ListShiftFwd_fn();
		ListType[1] = 4;
	}
	ListFirst[1] = 0;
	makestring(ListName[1], "\"%s\" in Titles",search_in);
    makestring(restrictorTitles,"search:%s tags:te",search_in);
	ListRestrictor[1] = restrictorTitles;
	FirstTitle = 0;
	TitlesRefresh_fn();
	ListName$ = ListName[1];
}
Function Search_playlists_fn(){
	If (ListType[1] != 5){
    	ListShiftFwd_fn();
		ListType[1] = 5;
	}
	ListFirst[1] = 0;
	makestring(ListName[1], "\"%s\" in Playlists",search_in);
    makestring(restrictorPlaylists,"search:%s",search_in);
	ListRestrictor[1] = restrictorPlaylists;
	FirstPlaylist = 0;
	PlaylistsRefresh_fn();
	ListName$ = ListName[1];
}
Function Search_Radios_fn(){
	If (ListType[1] != 10){
		ListShiftFwd_fn();
		ListType[1] = 10;
	}
	ListFirst[1] = 0;
	FAR_name = "search";
	FAR_parse = "search items ";
	restrictorFavorites = "search:" + search_in;
	FirstFavorites = 0;
	FavoritesRefresh_fn();
}
String_Function ParsePercent(STRING Parse$){
	Integer i, length, char;
	String output$[512], char$[1], chunk$[6], dump[3];
	i = 1;
	output$ = "";
	While(i <= len (parse$)) {
		char = Byte (parse$, i); // char = integer equivalent of the byte at position "in" from output$
		if (char = '%'){ // if char is the escape character, %
			if (i > 1){
				output$ = output$ + removebylength(i - 1,parse$);
			}
			output$ = output$ + chr(HexToI(mid(Parse$,2,2)));
			dump = removebylength(3,parse$);
			i = 1;
		}
		else {
			i = i + 1;
		}
	}
	output$ = output$ + parse$;
	return (output$);
}
String_Function FormatPlayerID(String PlayerID){
	Integer i, indexMatch;
	String playeridLocal[32], dump$[256], KeepL$[256], output$[256], search$[1], replace$[3];
	PlayerIDLocal = PlayerID;
	While (find(":",PlayerIDLocal))	{
     	indexMatch = find(":",PlayerIDLocal); // ##:$$ --> 3
		KeepL$ = removebylength(indexMatch - 1,PlayerIDLocal); //  keepl$ = ##
		dump$ = removebylength(1,PlayerIDLocal); // dump$ = :
		PlayerIDLocal = KeepL$ + "%3A" + PlayerIDLocal;
	}
	Return (PlayerIDLocal);
}
// //////////// PARSING FUNCTIONS
Function Parse_Status(String InStatus$){
	Integer i, j;
	Integer indexStart, indexEnd, Length;
	Integer indexStart2, indexEnd2, Length2;
	Integer CurrentPlayerSlave_local, CurrentPlayerMaster_local;
	Integer Time_min, Time_sec, Time_rmd;	
		
   	indexStart = find("mode%3A",InStatus$,26) + 7;
	indexEnd = find(" ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	Mode$ = mid(InStatus$,indexStart, Length);
	indexStart = find("remote%3A",InStatus$,indexEnd);
	if (indexStart > 0) {
		indexStart = indexStart + 9;
		indexEnd = find(" ",InStatus$,indexStart);
		Length = indexEnd - indexStart;
		CurrentTrackRemote = AtoI(mid(InStatus$,indexStart,Length));
	}
	Else {CurrentTrackRemote = 0;}
	indexStart = find("time%3A",InStatus$,indexEnd) + 7;
	indexEnd = find(" ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	CurrentTrackTime$ = mid(InStatus$,indexStart, Length);
	indexStart = find("rate%3A",InStatus$,indexEnd) + 7;
	indexEnd = find(" ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	CurrentTrackRate$ = mid(InStatus$,indexStart, Length);
	indexStart = find("duration%3A",InStatus$,indexEnd);
	if (indexStart > 0)	{
		indexStart = indexStart + 11;
		indexEnd = find(" ",InStatus$,indexStart);
		Length = indexEnd - indexStart;
		CurrentTrackDuration$ = mid(InStatus$,indexStart, Length);
	}
	Else {CurrentTrackDuration$ = "<time unavailable>";}
	// start synced player status
	CurrentPlayerMaster_local = 0;
	CurrentPlayerSlave_local = 0;
	indexStart = find(" sync_master%3A",InStatus$,indexEnd) + 15;  
	if (indexStart > 15){
		indexEnd = find(" ",InStatus$,indexStart);
		Length = indexEnd - indexStart;
		SyncMaster = parsepercent(mid(InStatus$,indexStart,Length)); 
		trace("SyncMaster=%s",SyncMaster);
		If (SyncMaster = PlayerID$){
			CurrentPlayerMaster_local = 1;
		}
		indexStart = find(" sync_slaves%3A",InStatus$,indexEnd) + 15;
		indexEnd = find(" ",InStatus$,indexStart);
		Length = indexEnd - indexStart;
		SyncSlaves_in = parsepercent(mid(InStatus$,indexStart,Length));
		indexEnd2 = 1;
		indexStart2 = 1;
		SetArray(SyncSlaves,""); //clear the SyncSlaves array 
		// SyncSlaves array: may include the current player
		If (find(",",SyncSlaves_in)){
			For (j = 1 to GetNumArrayRows(SyncSlaves)){
				indexEnd2 = find(",",SyncSlaves_in,indexStart2 + 1);
				If (indexEnd2 = 0){ // last iteration
					trace("last iteration");
					indexEnd2 = len(SyncSlaves_in) + 1;
					Length2 = indexEnd2 - indexStart2;
					SyncSlaves[j] = mid(SyncSlaves_in,indexStart2,Length2);
					If (SyncSlaves[j] = PlayerID$){
						CurrentPlayerSlave_local = 1;
					}
					trace("SyncSlaves[%u]=%s",j,SyncSlaves[j]);
					Break;
				}
				Length2 = indexEnd2 - indexStart2;
				SyncSlaves[j] = mid(SyncSlaves_in,indexStart2,Length2);
				If (SyncSlaves[j] = PlayerID$){
					CurrentPlayerSlave_local = 1;
				}
				trace("SyncSlaves[%u]=%s",j,SyncSlaves[j]);
				indexStart2 = indexEnd2 + 1;
			}
		}
		Else {
			SyncSlaves[1] = SyncSlaves_in;
			If (SyncSlaves[1] = PlayerID$){
				CurrentPlayerSlave_local = 1;
			}
		}
		// update the PlayersSynced array		
//		If (SyncMaster = PlayerID$){ // was here to only update if current player master
			trace("updating PlayersSync array");
			For (i = 1 to GetNumArrayRows(PlayersID)){ // loop through known players
				If (len(PlayersID[i]) > 0){ // if there is a player at this iteration
					For (j = 1 to GetNumArrayRows(SyncSlaves)){ // loop through known slaves
						If (PlayersID[i] = SyncSlaves[j]){ // if player is one of the slaves
							PlayersSynced[i] = 1; // set PlayersSynced high
							trace("PlayersID[%u]=SyncSlaves[%u]",i,j);
							Break; // move to next player
						}
						Else {
							PlayersSynced[i] = 0; // if not a slave, set PlayersSynced low
						} 
					}
				}
			} 
//		} // end of If condition for SyncMaster = PlayerID$
//		Else {
//			SetArray(PlayersSynced,0);
//		}
	}
	Else {
		SetArray(PlayersSynced,0);
		PlayerName_Master$ = "";
	}
	// update the CurrentPlayerMaster output
	If (CurrentPlayerMaster_local = 1){
		CurrentPlayerMaster = 1;
		For (j = 1 to GetNumArrayRows(PlayersID)){
			If (PlayersID[j] = SyncMaster) {
				PlayerName_Master$ = PlayersName[j];
				Break;
			}
		}
	}
	Else {
		CurrentPlayerMaster = 0;
	} 
	// update the CurrentPlayerSlave output
	If (CurrentPlayerSlave_local = 1){
		CurrentPlayerSlave = 1;
		For (j = 1 to GetNumArrayRows(PlayersID)){
			If (PlayersID[j] = SyncMaster) {
				PlayerName_Master$ = PlayersName[j];
				Break;
			}
		}
	}
	Else {
		CurrentPlayerSlave = 0;
	} 
//
	indexStart = find("playlist%20repeat%3A",InStatus$,indexEnd) + 20;
	indexEnd = find(" ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	Repeat = AtoI(mid(InStatus$,indexStart, Length));
	indexStart = find("playlist%20shuffle%3A",InStatus$,indexEnd) + 21;
	indexEnd = find(" ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	Shuffle = AtoI(mid(InStatus$,indexStart, Length));
	indexStart = find("playlist_cur_index%3A",InStatus$,indexEnd) + 21;
	indexEnd = find(" ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	CurrentSongIndex = AtoI(mid(InStatus$,indexStart, Length)); // use this to determine the individual outputs of NowplayingCurrentSong 
	indexStart = find(" id%3A",InStatus$,indexEnd) + 6;
	indexEnd = find( " ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	CurrentTrackID = AtoI(mid(InStatus$,indexStart, Length));
	trace("current trackID = %u",CurrentTrackID);
//	http://192.168.1.75:9000/music/154/cover.jpg
	makestring(CurrentsongCoverURL,"http://%s:9000/music/%u/cover.jpg",SqueezeCenterIPAddr$,CurrentTrackID);
	indexStart = find(" title%3A",InStatus$,indexEnd) + 9;
	indexEnd = find(" ",InStatus$,indexStart);
	Length = indexEnd - indexStart;
	CurrentTrackTitle$ = ParsePercent(mid(InStatus$,indexStart, Length));
	indexStart = find(" genre_id%3A",InStatus$,indexEnd);
	if (indexStart > 0) {
		indexStart = indexStart + 12;
		indexEnd = find(" ",InStatus$,indexStart);
		if (indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentGenreID = AtoI(mid(InStatus$,indexStart,Length));
			trace("current genreID = %u",CurrentGenreID);
		}
		Else {
			CurrentGenreID = 0;			
		}
    }
	Else {CurrentGenreID = 0;}
	indexStart = find(" genre%3A",InStatus$,indexEnd);
	if (indexStart > 0) {
		indexStart = indexStart + 9;
		indexEnd = find(" ",InStatus$,indexStart);
		if (indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentTrackGenre$ = ParsePercent(mid(InStatus$,indexStart, Length));
		}
		Else {
			Length = len(InStatus$) - indexStart;
			CurrentTrackGenre$ = ParsePercent(mid(InStatus$,indexStart, Length));
		}
    }
	Else {CurrentTrackGenre$ = "<genre unavailable>";}
	indexStart = find(" artist_id%3A",InStatus$,indexEnd);
	if (indexStart > 0) {
		indexStart = indexStart + 13;
		indexEnd = find(" ",InStatus$,indexStart);
		if (indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentArtistID = AtoI(mid(InStatus$,indexStart,Length));
			trace("current ArtistID = %u",CurrentArtistID);
		}
		Else {
			CurrentArtistID = 0;			
		}
    }
	Else {CurrentArtistID = 0;}
	indexStart = find(" artist%3A",InStatus$,indexEnd);
	if (indexStart > 0) {
		indexStart = indexStart + 10;
		indexEnd = find(" ",InStatus$,indexStart);
		if (indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentTrackArtist$ = ParsePercent(mid(InStatus$,indexStart, Length));
		}
		Else {
			Length = len(InStatus$) - indexStart;
			CurrentTrackArtist$ = ParsePercent(mid(InStatus$,indexStart, Length));
		}
	}
	Else {CurrentTrackArtist$ = "<artist unavailable>";}
	indexStart = find(" album_id%3A",InStatus$,indexEnd);
	if (indexStart > 0) {
		indexStart = indexStart + 12;
		indexEnd = find(" ",InStatus$,indexStart);
		if (indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentAlbumID = AtoI(mid(InStatus$,indexStart,Length));
			trace("current AlbumID = %u",CurrentAlbumID);
		}
		Else {
			CurrentAlbumID = 0;			
		}
    }
	Else {CurrentAlbumID = 0;}
	indexStart = find(" album%3A",InStatus$,indexEnd);
	if (indexStart > 0) {
		indexStart = indexStart + 9;
		indexEnd = find(" ",InStatus$,indexStart);
		if (indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentTrackAlbum$ = ParsePercent(mid(InStatus$,indexStart, Length));
		}
		Else {
			Length = len(InStatus$) - indexStart;
			CurrentTrackAlbum$ = ParsePercent(mid(InStatus$,indexStart, Length));
		}
	}
	Else {CurrentTrackAlbum$ = "<album unavailable>";}
	indexStart = find(" url%3A",InStatus$,indexEnd);
	if (indexStart > 0) {
		indexStart = indexStart + 7;
		indexEnd = find(" ",InStatus$,indexStart);
		if (indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentTrackURL$ = ParsePercent(mid(InStatus$,indexStart, Length));
		}
		Else {
			Length = len(InStatus$) - indexStart;
			CurrentTrackURL$ = ParsePercent(mid(InStatus$,indexStart, Length));
		}
		If (find("pandora",CurrentTrackURL$) > 0) {
			CurrentTrackIsPandora = 1;
			CurrentSongIsPandora = 1;
		}
		Else {
			CurrentSongIsPandora = 0;
			CurrentTrackIsPandora = 0;
		}
	}
	indexStart = find(" artwork_url%3A",InStatus$,indexEnd);
	if (indexStart > 0) {
		indexStart = indexStart + 15;
		indexEnd = find(" ",InStatus$,indexStart);
		if (indexEnd > 0) {
			Length = indexEnd - indexStart;
			CurrentTrackRemoteCover$ = ParsePercent(mid(InStatus$,indexStart, Length));
			CurrentsongCoverURL = CurrentTrackRemoteCover$;
		}
		Else {
			Length = len(InStatus$) - indexStart - 1; // xxx
			CurrentTrackRemoteCover$ = ParsePercent(mid(InStatus$,indexStart, Length));
			CurrentsongCoverURL = CurrentTrackRemoteCover$;
		}
	}
	Else {indexStart = 1;}
	CurrentsongTitle = CurrentTrackTitle$;
	CurrentsongAlbum = CurrentTrackAlbum$;
	CurrentsongArtist = CurrentTrackArtist$;
	CurrentsongGenre = CurrentTrackGenre$;
 	indexEnd = find(".",CurrentTrackTime$,1);
	If (indexEnd > 0) {
		Time_sec = AtoI(mid(CurrentTrackTime$,1,indexEnd));
		Time_min = Time_sec / 60;
		Time_rmd = Time_sec - (Time_min * 60);
		makestring(CurrentsongTime,"%u:%02u",Time_min,Time_rmd); 
	}
	Else if (CurrentTrackTime$ = "0") {
		makestring(CurrentsongTime,"0:00");
	}
	Else {
		CurrentsongTime = CurrentTrackTime$;
	}
	CurrentsongRate = CurrentTrackRate$;
 	indexEnd = find(".",CurrentTrackDuration$,1);
	If (indexEnd > 0) {
		Time_sec = AtoI(mid(CurrentTrackDuration$,1,indexEnd));
		Time_min = Time_sec / 60;
		Time_rmd = Time_sec - (Time_min * 60);
		makestring(CurrentsongDuration,"%u:%02u",Time_min,Time_rmd); 
	}
	Else if (CurrentTrackDuration$ = "0") {
		makestring(CurrentsongDuration,"0:00");
	}
	Else if (CurrentTrackIsPandora = 1) {
		Time_sec = AtoI(CurrentTrackDuration$);
		Time_min = Time_sec / 60;
		Time_rmd = Time_sec - (Time_min * 60);
		makestring(CurrentsongDuration,"%u:%02u",Time_min,Time_rmd); 
	}
	Else if (CurrentTrackRemote = 1) {
		CurrentsongDuration = "...";
	}
	Else {
		CurrentsongDuration = CurrentTrackDuration$;
	}
	CurrentsongRemote_fb = CurrentTrackRemote;
	trace("mode$ = %s",mode$);
	if (mode$ = "play") {
		mode_pause_fb = 0;
		mode_stop_fb = 0;
		mode_play_fb = 1;				
		status_request_time = 1;
	}	
	Else if (mode$ = "pause") {
		mode_stop_fb = 0;
		mode_play_fb = 0;	
		mode_pause_fb = 1;
		status_request_time = 0;
	}
	Else {
		mode_play_fb = 0;	
		mode_pause_fb = 0;
		mode_stop_fb = 1;
		status_request_time = 0;
	}
	if (Nowplaying_refresh_enable = 1) {
		NowplayingRefresh_fn();
	}
	If (repeat = 2)	{
		repeat_off_fb = 0;
		repeat_track_fb = 0;
		repeat_all_fb = 1;
    }
	Else If (repeat = 1) {
		repeat_off_fb = 0;
		repeat_all_fb = 0;
		repeat_track_fb = 1;
	}
	Else {
		repeat_track_fb = 0;
		repeat_all_fb = 0;
		repeat_off_fb = 1;
	}

//	shuffle_fb = shuffle;	
	If (shuffle = 2) {
		shuffle_off_fb = 0;
		shuffle_track_fb = 0;
		shuffle_album_fb = 1;
    }
	Else If (shuffle = 1) {
		shuffle_off_fb = 0;
		shuffle_album_fb = 0;
		shuffle_track_fb = 1;
	}
	Else {
		shuffle_track_fb = 0;
		shuffle_album_fb = 0;
		shuffle_off_fb = 1;
	}
}
Function Parse_Nowplaying(String InNowplaying$){
	Integer i, j;
	Integer indexStart, indexEnd, Length;
	Integer ListLengthNowplaying;

	ListLengthNowplaying_old = ListLengthNowplaying;
	indexStart = find(" status",InNowplaying$,28) + 8;
	indexEnd = find(" ",InNowplaying$,indexStart);
	Length = indexEnd - indexStart;
	NowplayingFirstNumber = AtoI(mid(InNowplaying$,indexStart,Length));
	trace("NowplayingFirstNumber: %u",NowplayingFirstNumber);
	indexStart = find(" playlist_cur_index%3A",InNowplaying$,indexEnd) + 22;
	indexEnd = find(" ",InNowplaying$, indexStart);
	Length = indexEnd - IndexStart;
	CurrentsongIndex = AtoI(mid(InNowplaying$,indexStart, Length));
	trace("CurrentsongIndex: %u",CurrentsongIndex);
	indexStart = find(" playlist_tracks%3A",InNowplaying$,indexEnd) + 19;
	indexEnd = find(" ",InNowplaying$, indexStart);
	Length = indexEnd - indexStart;
	TotalNowplaying = AtoI(mid(InNowplaying$,indexStart,Length));
	trace("TotalNowplaying: %u",TotalNowplaying);
	OutNowplayingCount = TotalNowplaying;
	If (TotalNowplaying > 0){
		OutNowplayingBar = 65535 - ((65535 / TotalNowplaying) * NowplayingFirstNumber );
	}
	Else {
		OutNowplayingBar = 0;
	}
	If (ListType[1] = 7){
		OutListBar = OutNowplayingBar;
		OutListCount = OutNowplayingCount;
    }
	ListLengthNowplaying = TotalNowplaying - NowplayingFirstNumber;
	if (NumberOfNowplaying < ListLengthNowplaying){
		ListLengthNowplaying  = NumberOfNowplaying;
		trace("TotalNowplaying[%u] - NowplayingFirstNumber[%u] >= NumberOfNowplaying[%u]",TotalNowplaying,NowplayingFirstNumber,NumberOfNowplaying);
	}
	trace("ListLengthNowplaying = %u",ListLengthNowplaying);
	If (ListLengthNowplaying < ListLengthNowplaying_old ){
		trace("blanking Nowplaying");
		SetArray(NowplayingTitle$," ");
		SetArray(NowplayingTitle,"");
		SetArray(NowplayingArtist$," ");
		SetArray(NowplayingArtist,"");
		SetArray(NowplayingAlbum$," ");
		SetArray(NowplayingAlbum,"");
		SetArray(NowplayingCurrentSong,0);
		SetArray(NowplayingID,0);
		SetArray(NowplayingIndex,65534); //dummy value to test for disabling button action if empty
		If (ListType[1] = 7)
			SetArray(List$," ");
	}
	For (i = 1 to ListLengthNowplaying)	{
		indexStart = find(" playlist%20index%3A",InNowplaying$,indexEnd);
		If (indexStart > 0){
			indexStart = indexStart + 20;
			indexEnd = find(" ",InNowplaying$,indexStart);
			Length = indexEnd - indexStart;
			NowplayingIndex[i] = AtoI(mid(InNowplaying$,indexStart,Length));
			trace("NowplayingIndex (i=%u)= %u",i,Nowplayingindex[i]); //xxx
			If (NowplayingIndex[i] = CurrentsongIndex){  // compare Index w/ CurrentsongIndex for NowplayingCurrentSong
				NowplayingCurrentSong[i] = 1;
			}
			Else {
				NowplayingCurrentSong[i] = 0;
			}
		}
		Else { // zero the remaining array elements if no more matches for index (should be unnecessary)
			For (j = i to ListLengthNowplaying){
				NowplayingCurrentSong[j] = 0;
				NowplayingID[j] = 0;
				NowplayingTitle[j] = "";
				NowplayingTitle$[j] = " ";
				NowplayingArtist[j] = "";
				NowplayingArtist$[j] = " ";
				NowplayingAlbum[j] = "";
				NowplayingAlbum$[j] = " ";
				NowplayingIndex[i] = 65534; //dummy value to test for disabling button action if empty
			}
			Break;
		}
		indexStart = find(" id%3A",InNowplaying$,indexEnd) + 6;
		indexEnd = find(" ",InNowplaying$, indexStart);
		Length = indexEnd - indexStart;
		NowplayingID[i] = AtoI(mid(InNowplaying$,indexStart,Length));
		trace("NowplayingID (i=%u)= %u",i,NowplayingID[i]);
		indexStart = indexEnd + 9;
		indexEnd = find(" ",InNowplaying$, indexStart);
		Length = indexEnd - indexStart;
		NowplayingTitle[i] = ParsePercent(mid(InNowplaying$,indexStart,Length));
		NowplayingTitle$[i] = NowplayingTitle[i];
		If (ListType[1] = 7){
			List$[i] = NowplayingTitle[i];
		}
		indexStart = indexEnd + 10;
		indexEnd = find(" ",InNowplaying$, indexStart);
		Length = indexEnd - indexStart;
		NowplayingArtist[i] = ParsePercent(mid(InNowplaying$,indexStart,Length));
		NowplayingArtist$[i] = NowplayingArtist[i];
//			If (ListType[1] = 7)
//				List$[i] = NowplayingArtist[i];
		indexStart = indexEnd + 9;
		If (find(" ",InNowplaying$, indexStart) = 0) {
			indexEnd = Len(InNowplaying$) - 1;
		}
		Else {
			indexEnd = find(" ",InNowplaying$, indexStart);
		}
		Length = indexEnd - indexStart;
		NowplayingAlbum[i] = ParsePercent(mid(InNowplaying$,indexStart,Length));
		NowplayingAlbum$[i] = NowplayingAlbum[i];
//			If (ListType[1] = 7)
//				List$[i] = NowplayingAlbum[i];
	}
}
Function Parse_Time(String InTime$){
	Integer indexEnd, Length; // indexStart
	Integer Time_min, Time_sec, Time_rmd;	

	indexEnd = find(".",InTime$,34);
	Length = indexEnd - 34;
	Time_sec = AtoI(mid(InTime$,34,Length));
	Time_min = Time_sec / 60;
	Time_rmd = Time_sec - (Time_min * 60);
	makestring(CurrentsongTime,"%u:%02u",Time_min,Time_rmd); 
}
Function Parse_Pandora(String InPandora$){
	Integer i, indexStart, indexEnd, Length;
	Integer ListLengthPandora;

	ListType[1] = 9;
	indexStart = find(" items ",InPandora$) + 7;
	indexEnd = find(" ",InPandora$,indexStart + 7);
	Length = indexEnd - indexStart;
	PandoraFirstNumber = AtoI(mid(InPandora$,indexStart,Length));
	indexStart = find(" count%3A",InPandora$,40) + 9;
	indexEnd = find(" ",InPandora$, indexStart);
	Length = indexEnd - indexStart;
	TotalPandora = AtoI(mid(InPandora$,indexStart,Length));
	OutPandoraCount = TotalPandora;
	OutPandoraBar = 65535 - ((65535 / TotalPandora) * PandoraFirstNumber );
	If (ListType[1] = 9){
		OutListBar = OutPandoraBar;
		OutListCount = OutPandoraCount;
	}
	If (TotalPandora - PandoraFirstNumber >= NumberOfPandora){
		ListLengthPandora = NumberOfPandora;
	}
	else {
		ListLengthPandora = TotalPandora - PandoraFirstNumber;
		trace("listlengthPandora = %u",ListLengthPandora);
		SetArray(PandoraType,"");
		SetArray(PandoraName,"");
		SetArray(PandoraID,"");
		If (ListType[1] = 9){
			SetArray(List$," ");
		}
	}
	indexEnd = 30;
	indexStart = find(" title%3A",InPandora$,indexEnd) + 9;
	indexEnd = find(" ",InPandora$,indexStart);
	Length = indexEnd - indexStart;
	PandoraTitle = ParsePercent(mid(InPandora$,indexStart,Length));
	trace("pandora title: %s",PandoraTitle);
	if (PandoraTitle = "Pandora"){
		PandoraTitle = "All";
	}
	If (ListType[1] = 9){
		ListName[1] = "Pandora: " + PandoraTitle;
		ListName$ = ListName[1];
	}
	For (i = 1 to ListLengthPandora){
			indexStart = find(" id%3A",InPandora$,indexEnd) + 6;
			indexEnd = find(" ",InPandora$,indexStart);
			Length = indexEnd - indexStart;
			PandoraID[i] = ParsePercent(mid(InPandora$,indexStart,Length));
			trace("pandora ID[%u]: %s",i,PandoraID[i]);
			indexStart = find(" name%3A",InPandora$,indexEnd) + 8;
			indexEnd = find(" ",InPandora$,indexStart);
			Length = indexEnd - indexStart;
			PandoraName[i] = ParsePercent(mid(InPandora$,indexStart,Length));
			trace("pandora name[%u]: %s",i,PandoraName[i]);
			If (ListType[1] = 9){
				List$[i] = PandoraName[i];
			}
			indexStart = find(" type%3A",InPandora$,indexEnd) + 8;
			indexEnd = find(" ",InPandora$,indexStart);
			Length = indexEnd - indexStart;
			PandoraType[i] = ParsePercent(mid(InPandora$,indexStart,Length));
			trace("pandora type[%u]: %s",i,PandoraType[i]);

			indexStart = find(" isaudio%3A",InPandora$,indexEnd) + 11;
			indexEnd = find(" ",InPandora$,indexStart);
			Length = indexEnd - indexStart;
			PandoraIsAudio[i] = AtoI(mid(InPandora$,indexStart,Length));
			trace("pandora IsAudio[%u]: %u",i,PandoraIsAudio[i]);

			indexStart = find(" hasitems%3A",InPandora$,indexEnd) + 12;
			indexEnd = find(" ",InPandora$,indexStart);
			Length = indexEnd - indexStart;
			PandoraHasItems[i] = AtoI(mid(InPandora$,indexStart,Length));
			trace("pandora HasItems[%u]: %u",i,PandoraHasItems[i]);
	}
}
Function Parse_FAR(String InFavorites$){
	Integer i, indexStart, indexEnd, Length;
	Integer ListLengthFavorites;

	indexStart = find(" items ",InFavorites$) + 7;
	indexEnd = find(" ",InFavorites$,indexStart);
	Length = indexEnd - indexStart;
	FavoritesFirstNumber = AtoI(mid(InFavorites$,indexStart,Length));
	trace("FavoritesFirstNumber = %u",FavoritesFirstNumber);
	indexStart = find(" count%3A",InFavorites$,30) + 9;
	indexEnd = find(" ",InFavorites$, indexStart);
	if (indexEnd = 0){
		indexEnd = len(InFavorites$) - 1;
	}
	Length = indexEnd - indexStart;
	TotalFavorites = AtoI(mid(InFavorites$,indexStart,Length));
	OutFavoritesCount = TotalFavorites;
	trace("TotalFavorites = %u",TotalFavorites);
	If (TotalFavorites = 0){
		OutFavoritesBar = 65535;
		SetArray(FavoritesType,"");
		SetArray(FavoritesName,"");
		SetArray(FavoritesID,"");
		FavoritesTitle = "Empty";
		If (ListType[1] = 10){
			OutListBar = 65535;
			OutListCount = 0;
			ListName$ = "Empty";
			ListName[1] = "Empty";
			SetArray(List$," "); 
		}
	}
	Else {
		OutFavoritesBar = 65535 - ((65535 / TotalFavorites) * FavoritesFirstNumber );
		If (ListType[1] = 10){
			OutListBar = OutFavoritesBar;
			OutListCount = OutFavoritesCount;
		}
		If (TotalFavorites - FavoritesFirstNumber >= NumberOfFavorites){
			ListLengthFavorites = NumberOfFavorites;
		}
		Else {
			ListLengthFavorites = TotalFavorites - FavoritesFirstNumber;
			trace("listlengthFavorites = %u",ListLengthFavorites);
			SetArray(FavoritesType,"");
			SetArray(FavoritesName,"");
			SetArray(FavoritesID,"");
			If (ListType[1] = 10){
				SetArray(List$," ");
			}
		}
		indexEnd = 20;
		indexStart = find(" title%3A",InFavorites$,indexEnd) + 9;
		indexEnd = find(" ",InFavorites$,indexStart);
		Length = indexEnd - indexStart;
		FavoritesTitle = ParsePercent(mid(InFavorites$,indexStart,Length));
		trace("Favorites title: %s",FavoritesTitle);
		If (ListType[1] = 10){
			ListName[1] = FavoritesTitle;
			ListName$ = FavoritesTitle;
		}
		For (i = 1 to ListLengthFavorites){
			indexStart = find(" id%3A",InFavorites$,indexEnd) + 6;
			if (indexStart = 6){
				trace("indexStart of id%3A not found; breaking.");
				break;
			}
			indexEnd = find(" ",InFavorites$,indexStart);
			Length = indexEnd - indexStart;
			FavoritesID[i] = ParsePercent(mid(InFavorites$,indexStart,Length));
			trace("Favorites ID[%u]: %s",i,FavoritesID[i]);
			
			indexStart = find(" name%3A",InFavorites$,indexEnd) + 8;
			indexEnd = find(" ",InFavorites$,indexStart);
			Length = indexEnd - indexStart;
			FavoritesName[i] = ParsePercent(mid(InFavorites$,indexStart,Length));
			trace("Favorites name[%u]: %s",i,FavoritesName[i]);
			If (ListType[1] = 10){
				List$[i] = FavoritesName[i];
			}
/*			indexStart = find(" type%3A",InFavorites$,indexEnd) + 8;
			trace("indexStart = %u",indexStart);
			indexEnd = find(" ",InFavorites$,indexStart);
			trace("indexEnd = %u",indexEnd);
			Length = indexEnd - indexStart;
			FavoritesType[i] = ParsePercent(mid(InFavorites$,indexStart,Length));
			trace("Favorites type[%u]: %s",i,FavoritesType[i]);
*/
			indexStart = find(" isaudio%3A",InFavorites$,indexEnd) + 11;
			indexEnd = find(" ",InFavorites$,indexStart);
			Length = indexEnd - indexStart;
			FavoritesIsAudio[i] = AtoI(mid(InFavorites$,indexStart,Length));
			trace("Favorites IsAudio[%u]: %u",i,FavoritesIsAudio[i]);
			
			indexStart = find(" hasitems%3A",InFavorites$,indexEnd) + 12;
			indexEnd = find(" ",InFavorites$,indexStart);
			Length = indexEnd - indexStart;
			FavoritesHasItems[i] = AtoI(mid(InFavorites$,indexStart,Length));
			trace("Favorites HasItems[%u]: %u",i,FavoritesHasItems[i]);
		}
	}
}
Function Parse_Dynamic(String InDynamic$){
	Integer i, indexStart, indexEnd, Length;
	Integer ListLengthDynamic;

	indexStart = find(" playlists 1 ",InDynamic$,30) + 13;
	indexEnd = find(" ",InDynamic$,indexStart + 13);
	Length = indexEnd - indexStart;
	DynamicFirstNumber = AtoI(mid(InDynamic$,indexStart,Length));
	indexStart = find(" count%3A",InDynamic$,40) + 9;
	indexEnd = find(" ",InDynamic$, indexStart);
	Length = indexEnd - indexStart;
	TotalDynamic = AtoI(mid(InDynamic$,indexStart,Length));
	OutDynamicCount = TotalDynamic;
	OutDynamicBar = 65535 - ((65535 / TotalDynamic) * DynamicFirstNumber );
	If (ListType[1] = 6){
		OutListBar = OutDynamicBar;
		OutListCount = OutDynamicCount;
    }
	If (TotalDynamic - DynamicFirstNumber >= NumberOfDynamic){
		ListLengthDynamic = NumberOfDynamic;
	}
	else {
		ListLengthDynamic = TotalDynamic - DynamicFirstNumber;
//		SetArray(Dynamic$,"");
		SetArray(DynamicName,"");
		SetArray(DynamicFile,"");
		If (ListType[1] = 6)
			SetArray(List$," ");
	}
	indexEnd = 1;
	For (i = 1 to ListLengthDynamic){
		indexStart = find("playlistid%3A",InDynamic$,indexEnd) + 13;
		indexEnd = find(" ",InDynamic$,indexStart);
		Length = indexEnd - indexStart;
		DynamicFile[i] = ParsePercent(mid(InDynamic$,indexStart,Length));
		indexStart = indexEnd + 16;
		If (find(" ",InDynamic$, indexStart) = 0){
			indexEnd = Len(InDynamic$);
		}
		else {
			indexEnd = find(" ",InDynamic$, indexStart);
		}
		Length = indexEnd - indexStart;
		DynamicName[i] = ParsePercent(mid(InDynamic$,indexStart,Length));
//		Dynamic$[i] = DynamicName[i];
		If (ListType[1] = 6){
			List$[i] = DynamicName[i];
		}
	}
}
Function Parse_Genres(String InGenres$){
	Integer i, indexStart, indexEnd, Length;
	Integer ListLengthGenres;

	indexEnd = find(" ",InGenres$,9);
	Length = indexEnd - 8;
	GenreFirstNumber = AtoI(mid(InGenres$,8,Length));
	indexStart = find("count%3A",InGenres$,1) + 8;
	indexEnd = find(" ",InGenres$, indexStart);
	Length = indexEnd - indexStart;
	TotalGenres = AtoI(mid(InGenres$,indexStart,Length));
	OutGenreCount = TotalGenres;
	If (TotalGenres > 0){
		OutGenresBar = 65535 - ((65535 / TotalGenres) * GenreFirstNumber);
	}
	else {
		OutGenresBar = 0;
	}
	If (ListType[1] = 1){
		OutListBar = OutGenresBar;
		OutListCount = OutGenreCount;
    }
	If (TotalGenres - GenreFirstNumber >= NumberOfGenres){
		ListLengthGenres = NumberOfGenres;
	}
	else {
		ListLengthGenres = TotalGenres - GenreFirstNumber;
//		SetArray(Genre$,"");
		SetArray(Genre,"");
		SetArray(GenreID,0);
		If (ListType[1] = 1){
			SetArray(List$," ");
		}
	}
	indexEnd = 1;
	For (i = 1 to ListLengthGenres){
		indexStart = find(" id%3A",InGenres$,indexEnd) + 6;
		If (IndexStart > 6){
			indexEnd = find(" ",InGenres$,indexStart);
			Length = indexEnd - indexStart;
			GenreID[i] = AtoI(mid(InGenres$,indexStart,Length));
			indexStart = indexEnd + 9;
			indexEnd = find(" ",InGenres$, indexStart);
			Length = indexEnd - indexStart;
			Genre[i] = ParsePercent(mid(InGenres$,indexStart,Length));
	//			Genre$[i] = Genre[i];
			If (ListType[1] = 1) {
	            List$[i] = Genre[i];
			}
		}
	}
}
Function Parse_Artists(String InArtists$){
	Integer i, indexStart, indexEnd, Length;
	Integer ListLengthArtists;

	indexEnd = find(" ",InArtists$,9);
	Length = indexEnd - 8;
	ArtistFirstNumber = AtoI(mid(InArtists$,8,Length));
	trace("ArtistFirstNumber = %u",ArtistFirstNumber);
	indexStart = find(" count%3A",InArtists$,1);
	indexStart = indexStart + 9;
	indexEnd = find(" ",InArtists$, indexStart);
	if (indexEnd > 0){
		Length = indexEnd - indexStart;
	}
	Else {
		Length = len(InArtists$) - indexStart;
	}
	TotalArtists = AtoI(mid(InArtists$,indexStart,Length));
	trace("TotalArtists = %u",TotalArtists);
	OutArtistCount = TotalArtists;
	If (TotalArtists > 0){
		OutArtistsBar = 65535 - ((65535 / TotalArtists) * ArtistFirstNumber);
	}
	else {
		OutArtistsBar = 0;
	}
	If (ListType[1] = 2){
		OutListBar = OutArtistsBar;
		OutListCount = OutArtistCount;
    }
	If (TotalArtists - ArtistFirstNumber >= NumberOfArtists){
		ListLengthArtists = NumberOfArtists;
	}
	else {
		ListLengthArtists = TotalArtists - ArtistFirstNumber;
//		SetArray(Artist$,"");
		SetArray(Artist,"");
		SetArray(ArtistID,0);
		If (ListType[1] = 2)
			SetArray(List$," ");
	}
	indexEnd = 1;  
	For (i = 1 to ListLengthArtists){
    	indexStart = find(" id%3A",InArtists$,indexEnd);
		indexStart = indexStart + 6;
		indexEnd = find(" ",InArtists$,indexStart);
		Length = indexEnd - indexStart;
		ArtistID[i] = AtoI(mid(InArtists$,indexStart,Length));
		indexStart = find(" artist%3A",InArtists$,indexEnd) + 10;
		indexEnd = find(" ",InArtists$, indexStart);
		Length = indexEnd - indexStart;		
		Artist[i] = ParsePercent(mid(InArtists$,indexStart,Length));
//		Artist$[i] = Artist[i];
		If (ListType[1] = 2){
			List$[i] = Artist[i];
		}
	}
}
Function Parse_Albums(String InAlbums$){
	Integer i, indexStart, indexEnd, Length;
	Integer ListLengthAlbums;

	indexEnd = find(" ",InAlbums$,9);
	Length = indexEnd - 8;
	AlbumFirstNumber = AtoI(mid(InAlbums$,8,Length));
	indexStart = find("count%3A",InAlbums$,1) + 8;
	indexEnd = find(" ",InAlbums$, indexStart);
	Length = indexEnd - indexStart;
	TotalAlbums = AtoI(mid(InAlbums$,indexStart,Length));
	OutAlbumCount = TotalAlbums;
	If (TotalAlbums > 0){
		OutAlbumsBar = 65535 - ((65535 / TotalAlbums) * AlbumFirstNumber);
	}
	else {
		OutAlbumsBar = 0;
	}
	If (ListType[1] = 3){
		OutListBar = OutAlbumsBar;
		OutListCount = OutAlbumCount;
    }
	If (TotalAlbums - AlbumFirstNumber >= NumberOfAlbums){
		ListLengthAlbums = NumberOfAlbums;
	}
	else {
		ListLengthAlbums = TotalAlbums - AlbumFirstNumber;
//		SetArray(Album$,"");
		SetArray(Album,"");
		SetArray(AlbumID,0);
		If (ListType[1] = 3)
			SetArray(List$," ");
	}
	indexEnd = 1;
	For (i = 1 to ListLengthAlbums) {
		If (find(" id%3A",InAlbums$,indexEnd)){
			indexStart = find(" id%3A",InAlbums$,indexEnd) + 6;
			indexEnd = find(" ",InAlbums$,indexStart);
			Length = indexEnd - indexStart;
			AlbumID[i] = AtoI(mid(InAlbums$,indexStart,Length));
			indexStart = indexEnd + 9;
			indexEnd = find(" ",InAlbums$, indexStart);
			Length = indexEnd - indexStart;
			Album[i] = ParsePercent(mid(InAlbums$,indexStart,Length));
//			Album$[i] = Album[i];             
			If (ListType[1] = 3){
				List$[i] = Album[i];
			}
		}
	}
}
Function Parse_Titles(String InTitles$){
	Integer i, indexStart, indexEnd, Length;
	Integer ListLengthTitles;

	indexEnd = find(" ",InTitles$,9);
	Length = indexEnd - 8;
	TitleFirstNumber = AtoI(mid(InTitles$,8,Length));
	indexStart = find("count%3A",InTitles$,1) + 8;
	indexEnd = find(" ",InTitles$, indexStart);
	Length = indexEnd - indexStart;
	TotalTitles = AtoI(mid(InTitles$,indexStart,Length));
	OutTitleCount = TotalTitles;
	If (TotalTitles > 0){
		OutTitlesBar = 65535 - ((65535 / TotalTitles) * TitleFirstNumber );
	}
	else {
		OutTitlesBar = 0;
	}
	If (ListType[1] = 4){
		OutListBar = OutTitlesBar;
		OutListCount = OutTitleCount;
    }
	If (TotalTitles - TitleFirstNumber >= NumberOfTitles){
		ListLengthTitles = NumberOfTitles;
	}
	Else {
		ListLengthTitles = TotalTitles - TitleFirstNumber;
//		SetArray(Title$,"");
		SetArray(Title,"");
		SetArray(TrackID,0);
		If (ListType[1] = 4)
			SetArray(List$," ");
	}
	indexEnd = 1;
	For (i = 1 to ListLengthTitles){
    	If (find(" id%3A",InTitles$,indexEnd)){
		   	indexStart = find(" id%3A",InTitles$,indexEnd) + 6;
			indexEnd = find(" ",InTitles$,indexStart);
			Length = indexEnd - indexStart;
			TrackID[i] = AtoI(mid(InTitles$,indexStart,Length));
			indexStart = find("title%3A",InTitles$,indexEnd) + 8;
			indexEnd = find(" ",InTitles$, indexStart);
			Length = indexEnd - indexStart;
    		Title[i] = ParsePercent(mid(InTitles$,indexStart,Length));
//			Title$[i] = Title[i];
			If (ListType[1] = 4){
				List$[i] = Title[i];		
			}
			If (find("tracknum%3A",InTitles$,indexEnd) != 0){
				indexStart = find("tracknum%3A",InTitles$,indexEnd) + 11;
				indexEnd = find(" ",InTitles$, indexStart);
				Length = indexEnd - indexStart;
				TitleTracknum[i] = AtoI(mid(InTitles$,indexStart,Length));
			}
			else {
				trace("no tracknum");
			}
			If (find("album_id%3A",InTitles$,1) != 0) {
				indexStart = find("album_id%3A", InTitles$,IndexEnd) + 11;
				indexEnd = find(" ",InTitles$, indexStart);
				Length = indexEnd - indexStart;
				TitleAlbumID[i] = AtoI(mid(InTitles$, indexStart, Length));
    		}
			Else {
				trace("no album_id");
			}
		}
	}
}
Function Parse_Playlists(String InPlaylists$){
	Integer i, indexStart, indexEnd, Length;
	Integer ListLengthPlaylists;

	indexEnd = find(" ",InPlaylists$,12);
	Length = indexEnd - 11;
	PlaylistFirstNumber = AtoI(mid(InPlaylists$,11,Length));
	trace("PlaylistFirstNumber = %u",PlaylistFirstNumber);

	indexStart = find("count%3A",InPlaylists$,indexEnd) + 8;
	indexEnd = find(" ",InPlaylists$, indexStart);
	Length = indexEnd - indexStart;
	TotalPlaylists = AtoI(mid(InPlaylists$,indexStart,Length));
	OutPlaylistCount = TotalPlaylists;
	OutPlaylistsBar = 65535 - ((65535 / TotalPlaylists) * PlaylistFirstNumber );
	If (ListType[1] = 5) {
		OutListBar = OutPlaylistsBar;
		OutListCount = OutPlaylistCount;
    }
	If (TotalPlaylists - PlaylistFirstNumber >= NumberOfPlaylists){
		ListLengthPlaylists = NumberOfPlaylists;
	}
	else {
		ListLengthPlaylists = TotalPlaylists - PlaylistFirstNumber;
		SetArray(Playlist,"");
		SetArray(PlaylistID,0);
		If (ListType[1] = 5){
			SetArray(List$," ");
		}
	}
	indexEnd = 1;
	For (i = 1 to ListLengthPlaylists) {
    	If (find(" id%3A",InPlaylists$,indexEnd)){ 
			indexStart = find(" id%3A",InPlaylists$,indexEnd) + 6;
			indexEnd = find(" ",InPlaylists$,indexStart);
			Length = indexEnd - indexStart;
			PlaylistID[i] = AtoI(mid(InPlaylists$,indexStart,Length));
			indexStart = indexEnd + 12;
			indexEnd = find(" ",InPlaylists$, indexStart);
			Length = indexEnd - indexStart;
			PlaylistRaw[i] = mid(InPlaylists$,indexStart,Length);
			trace("PlaylistRaw[%u] = %s",i,PlaylistRaw[i]);
			Playlist[i] = ParsePercent(mid(InPlaylists$,indexStart,Length));
			If (ListType[1] = 5){
				List$[i] = Playlist[i];
			}
		}
	}
}
Function Parse_Apps(String InApps$){
	Integer i, indexStart, indexEnd, Length;
	Integer ListLengthApps;

	indexStart = 6;
	indexEnd = find(" ",InApps$,indexStart);
	Length = indexEnd - indexStart;
	AppsFirstNumber = AtoI(mid(InApps$,indexStart,Length));
	trace("AppsFirstNumber = %u",AppsFirstNumber);
	
	indexStart = find(" count%3A",InApps$,indexEnd) + 9;
	indexEnd = find(" ",InApps$, indexStart);
	if (indexEnd = 0){
		indexEnd = len(InApps$) - 1;
	}
	Length = indexEnd - indexStart;
	TotalApps = AtoI(mid(InApps$,indexStart,Length));
	OutAppsCount = TotalApps;
	trace("TotalApps = %u",TotalApps);
	OutAppsBar = 65535 - ((65535 / TotalApps) * AppsFirstNumber );
	If (ListType[1] = 11){
		OutListBar = OutAppsBar;
		OutListCount = OutAppsCount;
	}
	If (TotalApps - AppsFirstNumber >= NumberOfApps){
		ListLengthApps = NumberOfApps;
	}
	else {
		ListLengthApps = TotalApps - AppsFirstNumber;
		SetArray(AppsIcon,"");
		SetArray(AppsCmd,"");
		SetArray(AppsName,"");
		SetArray(AppsType,"");
		If (ListType[1] = 11){
			SetArray(List$," ");
		}
	}
	trace("listlengthApps = %u",ListLengthApps);
	indexEnd = 9;

	For (i = 1 to ListLengthApps){
		indexStart = find(" icon%3A",InApps$,indexEnd) + 8;
		indexEnd = find(" ",InApps$,indexStart);
		Length = indexEnd - indexStart;
		AppsIcon[i] = ParsePercent(mid(InApps$,indexStart,Length));
		trace("Apps icon: %s",AppsIcon[i]);

		indexStart = find(" cmd%3A",InApps$,indexEnd) + 7;
		indexEnd = find(" ",InApps$,indexStart);
		Length = indexEnd - indexStart;
		AppsCmd[i] = ParsePercent(mid(InApps$,indexStart,Length));
		trace("Apps Cmd: %s",AppsCmd[i]);

		indexStart = find(" name%3A",InApps$,indexEnd) + 8;
		indexEnd = find(" ",InApps$,indexStart);
		Length = indexEnd - indexStart;
		AppsName[i] = ParsePercent(mid(InApps$,indexStart,Length));
		trace("Apps name[%u]: %s",i,AppsName[i]);
		If (ListType[1] = 11){
			List$[i] = AppsName[i];
		}

		indexStart = find(" type%3A",InApps$,indexEnd) + 8;
		indexEnd = find(" ",InApps$,indexStart);
		If (indexEnd = 0){
			indexEnd = Len(InApps$) - 1;
		}
		Length = indexEnd - indexStart;
		AppsType[i] = mid(InApps$,indexStart,Length);
	}
}
Function Parse_Radios(String InRadios$){
	Integer i, indexStart, indexEnd, Length;
	Integer ListLengthRadios;

	indexStart = 8;
	indexEnd = find(" ",InRadios$,indexStart);
	Length = indexEnd - indexStart;
	RadiosFirstNumber = AtoI(mid(InRadios$,indexStart,Length));
	trace("RadiosFirstNumber = %u",RadiosFirstNumber);
	indexStart = find(" count%3A",InRadios$,indexEnd) + 9;
	indexEnd = find(" ",InRadios$, indexStart);
	if (indexEnd = 0){
		indexEnd = len(InRadios$) - 1;
	}
	Length = indexEnd - indexStart;
	TotalRadios = AtoI(mid(InRadios$,indexStart,Length));
	OutRadiosCount = TotalRadios;
	trace("TotalRadios = %u",TotalRadios);
	OutRadiosBar = 65535 - ((65535 / TotalRadios) * RadiosFirstNumber );
	If (ListType[1] = 12){
		OutListBar = OutRadiosBar;
		OutListCount = OutRadiosCount;
	}
	If (TotalRadios - RadiosFirstNumber >= NumberOfRadios){
		ListLengthRadios = NumberOfRadios;
	}
	else {
		ListLengthRadios = TotalRadios - RadiosFirstNumber;
		SetArray(RadiosIcon,"");
		SetArray(RadiosCmd,"");
		SetArray(RadiosName,"");
		SetArray(RadiosType,"");
		If (ListType[1] = 12){
			SetArray(List$," ");
		}
	}
	trace("listlengthRadios = %u",ListLengthRadios);
	indexEnd = 9;
	For (i = 1 to ListLengthRadios){
		indexStart = find(" icon%3A",InRadios$,indexEnd) + 8;
		indexEnd = find(" ",InRadios$,indexStart);
		Length = indexEnd - indexStart;
		RadiosIcon[i] = ParsePercent(mid(InRadios$,indexStart,Length));
		trace("Radios icon: %s",RadiosIcon[i]);
		indexStart = find(" cmd%3A",InRadios$,indexEnd) + 7;
		indexEnd = find(" ",InRadios$,indexStart);
		Length = indexEnd - indexStart;
		RadiosCmd[i] = ParsePercent(mid(InRadios$,indexStart,Length));
		trace("Radios Cmd: %s",RadiosCmd[i]);
		indexStart = find(" name%3A",InRadios$,indexEnd) + 8;
		indexEnd = find(" ",InRadios$,indexStart);
		Length = indexEnd - indexStart;
		RadiosName[i] = ParsePercent(mid(InRadios$,indexStart,Length));
		trace("Radios name[%u]: %s",i,RadiosName[i]);
		If (ListType[1] = 12){
			List$[i] = RadiosName[i];
		}
		indexStart = find(" type%3A",InRadios$,indexEnd) + 8;
		indexEnd = find(" ",InRadios$,indexStart);
		If (indexEnd = 0){
			indexEnd = Len(InRadios$) - 1;
		}
		Length = indexEnd - indexStart;
		RadiosType[i] = mid(InRadios$,indexStart,Length);
	}	
}
Function Parse_Search(String InSearch$){
	Integer i, indexStart, indexEnd, Length;
	Integer ListLengthSearch;
	
	indexEnd = find(" ",InSearch$,8);
	Length = indexEnd - 7;
	SearchFirstNumber = AtoI(mid(InSearch$,7,Length));
	trace("searchfirstnumber: %u",SearchFirstNumber);
	indexStart = find("count%3A",InSearch$,1) + 8;
	indexEnd = find(" ",InSearch$, indexStart);
	Length = indexEnd - indexStart;
	TotalSearch = AtoI(mid(InSearch$,indexStart,Length));
	trace("TotalSearch: %u",TotalSearch);
	OutSearchCount = TotalSearch;
	If (TotalSearch > 0){
		OutSearchBar = 65535 - ((65535 / TotalSearch) * SearchFirstNumber);
	}
	else {
		OutSearchBar = 0;
	}
	ListType[1] = 8;
	If (ListType[1] = 8){
		OutListBar = OutSearchBar;
		OutListCount = OutSearchCount;
    }
	If (TotalSearch - SearchFirstNumber >= NumberOfSearch){
		ListLengthSearch = NumberOfSearch;
	}
	else {
		ListLengthSearch = TotalSearch - SearchFirstNumber;
		SetArray(Search,"");
		SetArray(SearchID,0);
		If (ListType[1] = 8){
			SetArray(List$," ");
		}
	}
	indexEnd = 1;
	For (i = 1 to ListLengthSearch){
		If (find(" contributor_id",InSearch$,indexEnd)) {//parsing for artists in search results
			trace("parsing contributor_id in search result");
			indexStart = find(" contributor_id%3A",InSearch$,indexEnd) + 18;
			indexEnd = find(" ",InSearch$,indexStart);
			Length = indexEnd - indexStart;
			SearchID[i] = AtoI(mid(InSearch$,indexStart,Length));
			trace("contributor_id:%u",SearchID[i]);
			SearchIDtype[i] = 1;
			indexStart = indexEnd + 15;
			indexEnd = find(" ",InSearch$, indexStart);
			If (indexEnd = 0){
				indexEnd = len(InSearch$);
			}
			Length = indexEnd - indexStart;
			Search[i] = ParsePercent(mid(InSearch$,indexStart,Length));
			trace("contributor:%s",Search[i]);
		}
		Else If (find(" album_id%3A",InSearch$,indexEnd)) {//parsing for albums in search results
			trace("parsing album_id in search result");
			indexStart = find(" album_id%3A",InSearch$,indexEnd) + 12;
			indexEnd = find(" ",InSearch$,indexStart);
			Length = indexEnd - indexStart;
			SearchID[i] = AtoI(mid(InSearch$,indexStart,Length));
			SearchIDtype[i] = 2;
			indexStart = indexEnd + 9;
			indexEnd = find(" ",InSearch$, indexStart);
			If (indexEnd = 0) {
				indexEnd = len(InSearch$);
			}
			Length = indexEnd - indexStart;
			Search[i] = ParsePercent(mid(InSearch$,indexStart,Length));
		}
		Else If (find(" genre_id%3A",InSearch$,indexEnd)) {//parsing for genres in search results
			trace("parsing genre_id in search result");
			indexStart = find(" genre_id%3A",InSearch$,indexEnd) + 12;
			indexEnd = find(" ",InSearch$,indexStart);
			Length = indexEnd - indexStart;
			SearchID[i] = AtoI(mid(InSearch$,indexStart,Length));
			SearchIDtype[i] = 4;
			indexStart = indexEnd + 9;
			indexEnd = find(" ",InSearch$, indexStart);
			If (indexEnd = 0) {
				indexEnd = len(InSearch$);
			}
			Length = indexEnd - indexStart;
			Search[i] = ParsePercent(mid(InSearch$,indexStart,Length));
		}
		Else If (find(" track_id%3A",InSearch$,indexEnd)) {//parsing for tracks in search results
			trace("parsing track_id in search result");
			indexStart = find(" track_id%3A",InSearch$,indexEnd) + 12;
			indexEnd = find(" ",InSearch$,indexStart);
			Length = indexEnd - indexStart;
			SearchID[i] = AtoI(mid(InSearch$,indexStart,Length));
			SearchIDtype[i] = 3;
			indexStart = indexEnd + 9;
			indexEnd = find(" ",InSearch$, indexStart);
			If (indexEnd = 0) {
				indexEnd = len(InSearch$);
			}
			Length = indexEnd - indexStart;
			Search[i] = ParsePercent(mid(InSearch$,indexStart,Length));
		}
		If (ListType[1] = 8){
            List$[i] = Search[i];
		}
	}
}
Function Parse_Players(String InPlayers$){
	Integer i, j, indexStart, indexEnd, Length;
	Integer ListLengthPlayers;
	
	indexEnd = find(" ",InPlayers$,10);
	Length = indexEnd - 9;
	PlayersFirstNumber = AtoI(mid(InPlayers$,9,Length));
	trace("PlayersFirstNumber = %u",PlayersFirstNumber);
	
	indexStart = find("count%3A",InPlayers$,indexEnd) + 8;
	indexEnd = find(" ",InPlayers$, indexStart);
	Length = indexEnd - indexStart;
	TotalPlayers = AtoI(mid(InPlayers$,indexStart,Length));
	trace("TotalPlayers = %u",TotalPlayers);
	
	
	OutPlayersCount = TotalPlayers;
	OutPlayersBar = 65535 - ((65535 / TotalPlayers) * PlayersFirstNumber );
	// ListType[1] = 13 reserved for Players
	// not yet a possible List type
	If (ListType[1] = 13) {
		OutListBar = OutPlayersBar;
		OutListCount = OutPlayersCount;
    }
	If (TotalPlayers - PlayersFirstNumber >= NumberOfPlayers){
		ListLengthPlayers = NumberOfPlayers;
	}
	else {
		ListLengthPlayers = TotalPlayers - PlayersFirstNumber;
		SetArray(PlayersName,"");
		SetArray(PlayersID,0);
		SetArray(PlayersIndex,0);
		// ListType[1] = 13 reserved for Players
		// not yet a possible List type
		If (ListType[1] = 13){
			SetArray(List$," ");
		}
	}
	indexEnd = 1;
	For (i = 1 to ListLengthPlayers) {
    	If (find(" playerindex%3A",InPlayers$,indexEnd)){ 
			indexStart = find(" playerindex%3A",InPlayers$,indexEnd) + 15;
			indexEnd = find(" ",Inplayers$,indexStart);
			PlayersIndex[i] = AtoI(mid(InPlayers$,indexStart,Length));
			trace("PlayersIndex[%u] = %u",i,PlayersIndex[i]);
			
			indexStart = find(" playerid%3A",InPlayers$,indexEnd) + 12;
			indexEnd = find(" ",InPlayers$,indexStart);
			Length = indexEnd - indexStart;
			PlayersID_raw[i] = mid(InPlayers$,indexStart,Length);
			PlayersID[i] = parsepercent(PlayersID_raw[i]);
			trace("PlayersID[%u] = %s",i,PlayersID[i]);
			
			indexStart = find(" name%3A",InPlayers$,indexEnd) + 8;
			indexEnd = find(" ",InPlayers$, indexStart);
			Length = indexEnd - indexStart;
			PlayersName[i] = parsepercent(mid(InPlayers$,indexStart,Length));
			trace("PlayersName[%u] = %s",i,PlayersName[i]);

			Players$[i] = PlayersName[i];
			PlayersID$[i] = PlayersID[i];
			
			// ListType[1] = 13 reserved for Players
			// not yet a possible List type
			If (ListType[1] = 13){
				List$[i] = PlayersName[i];
			}
		}
	}
	For (j = 1 to GetNumArrayRows(PlayersID)){
		If (PlayersID[j] = PlayerID$) {
			PlayerName_Active$ = PlayersName[j];
			Break;
		}
	}
	PlayerID_Active$ = PlayerID$;
}
// //////////// TCPIP Connection
PUSH TCPIP_Connect{
    SIGNED_INTEGER status;
    status = SocketConnectClient (TCPClient, SqueezeCenterIPAddr$, SqueezeCenterPort, TCPIP_ReconnectEnable);
    if (status < 0){
        print ("Error connecting socket to address %s on port  %d", 
            SqueezeCenterIPAddr$, SqueezeCenterPort);
	}
}
RELEASE TCPIP_Connect{
    SIGNED_INTEGER status;
    status = SocketDisconnectClient (TCPClient);
	if (status < 0){
    print ("Error disconnecting socket to address %s on port  %d", 
            SqueezeCenterIPAddr$, SqueezeCenterPort);
    }
}
SOCKETCONNECT TCPClient{
    SIGNED_LONG_INTEGER PortNumber;
    SIGNED_INTEGER LocalStatus;
    STRING RemoteIPAddress[20];
    STRING RequestedAddress[256];
    TCPIP_Connected = 1;
    LocalStatus = SocketGetAddressAsRequested(TCPClient, RequestedAddress);
    if (LocalStatus < 0)
        print ("Error getting remote ip address. %d\n", LocalStatus);
    print ("OnConnect: Connect call to %s successful\n", RequestedAddress);
    PortNumber = SocketGetPortNumber(TCPClient);
    if (PortNumber < 0)
        print ("Error getting client port number. %ld\n", PortNumber);
    LocalStatus = SocketGetRemoteIPAddress(TCPClient, RemoteIPAddress);
    if (LocalStatus < 0)
        print ("Error getting remote ip address. %d\n", LocalStatus);
    print ("OnConnect: Connected to port %ld on address %s\n", 
                PortNumber, RemoteIPAddress);
//	SOCKET Startup procedure
	makestring(out$,"%s status - 1 tags:pgsaeluK charset:ascii subscribe:0\n",PlayerID$);  //subscribe to status updates including currentsong (different than other subscribes)
	socketsend(TCPClient, out$);
	delay(100);
	Players_Pgreset_fn();
}
SOCKETDISCONNECT TCPClient{
    TCPIP_Connected = 0;
    if (TCPIP_Connect)
        print ("Socket disconnected remotely");
    Else
        print ("Local disconnect complete.");
}
SOCKETSTATUS TCPClient{
    SIGNED_INTEGER Status;
    Status = SocketGetStatus();
    TCPIP_Status = Status;
    print ("The SocketGetStatus returns:       %d\n", Status);
    print ("The TCPClient.SocketStatus returns: %d\n", TCPClient.SocketStatus);
}
// ////////////// Events 
PUSH Jump_Home{
 	Home_PgReset_fn();
}
PUSH Jump_Genres{
	Genres_PgReset_fn();
}
PUSH Jump_Artists{
	Artists_PgReset_fn();
}
PUSH Jump_Albums{
	Albums_PgReset_fn();
}
PUSH Jump_Tracks{
	Titles_PgReset_fn();
}
PUSH Jump_Playlists{
	Playlists_PgReset_fn();
}
PUSH Jump_Dynamic{
	Dynamic_PgReset_fn();
}
PUSH Jump_Pandora{
	Pandora_PgReset_fn();
}   
PUSH Jump_Favorites{
	Favorites_PgReset_fn();
}
PUSH List_Back{
	ListShiftBk_fn();
	ListRefresh_fn();	
}
PUSH Nowplaying_Refresh{
	Nowplaying_PgReset_fn();
}
CHANGE InPageList{
	If (ListType[1] = 0){
		FirstHome = (65535 - InPageList) * TotalHome / 65535;
		ListFirst[1] = FirstHome;
		HomeRefresh_fn();
	}
	Else If (ListType[1] = 1){
		FirstGenre = (65535 - InPageList) * TotalGenres / 65535;
		ListFirst[1] = FirstGenre;
		GenresRefresh_fn();
	}
	Else If (ListType[1] = 2){
		FirstArtist = (65535 - InPageList) * TotalArtists / 65535;
		ListFirst[1] = FirstArtist;
		ArtistsRefresh_fn();
	}
	Else If (ListType[1] = 3){
		FirstAlbum = (65535 - InPageList) * TotalAlbums / 65535;
		ListFirst[1] = FirstAlbum;
		AlbumsRefresh_fn();
	}
	Else If (ListType[1] = 4){
		FirstTitle = (65535 - InPageList) * TotalTitles / 65535;
		ListFirst[1] = FirstTitle;
		TitlesRefresh_fn();
	}
	Else If (ListType[1] = 5){
		FirstPlaylist = (65535 - InPageList) * TotalPlaylists / 65535;
		ListFirst[1] = FirstPlaylist;
		PlaylistsRefresh_fn();
	}
	Else If (ListType[1] = 6){
		FirstDynamic = (65535 - InPageList) * TotalDynamic / 65535;
		ListFirst[1] = FirstDynamic;
		DynamicRefresh_fn();
	}
	Else If (ListType[1] = 9){
		FirstPandora = (65535 - InPageList) * TotalPandora / 65535;
		ListFirst[1] = FirstPandora;
		PandoraRefresh_fn();
	}             
	Else If (ListType[1] = 10){ 
		FirstFavorites = (65535 - InPageList) * TotalFavorites / 65535;
		ListFirst[1] = FirstFavorites;
		FavoritesRefresh_fn();
	}
	Else If (ListType[1] = 11){ 
		FirstApps = (65535 - InPageList) * TotalApps / 65535;
		ListFirst[1] = FirstApps;
		AppsRefresh_fn();
	}
	Else If (ListType[1] = 12){ 
		FirstRadios = (65535 - InPageList) * TotalRadios / 65535;
		ListFirst[1] = FirstRadios;
		RadiosRefresh_fn();
	}
	// ListType[1] = 13 reserved for Players
	// not yet a possible List type
}
CHANGE InPageNowplaying{
	FirstNowplaying = (65535 - InPageNowplaying) * TotalNowplaying / 65535;
	NowplayingRefresh_fn();
}
CHANGE InPagePlayers{
	FirstPlayers = (65535 - InPagePlayers) * TotalPlayers / 65535;
	PlayersRefresh_fn();
}
PUSH List_PgUp{
	If (ListType[1] = 0){
	 	Home_PgUp_fn();
	}
	Else If (ListType[1] = 1){
		Genres_PgUp_fn(); //Genres code
	}
	Else If (ListType[1] = 2){
		Artists_PgUp_fn(); //Artists code
	}
	Else If (ListType[1] = 3){
		Albums_PgUp_fn();//Albums code
	}
	Else If (ListType[1] = 4){
		Titles_PgUp_fn();//Titles code
	}
	Else If (ListType[1] = 5){
		Playlists_PgUp_fn();//Playlists code
	}
	Else If (ListType[1] = 6){
		Dynamic_PgUp_fn();//Dynamicplaylist code
	}
	Else If (ListType[1] = 8){
		Search_PgUp_fn(); //Search results code
	}
	Else If (ListType[1] = 9){
		Pandora_PgUp_fn(); //Pandora results code
    } 
    Else If (ListType[1] = 10){
		Favorites_PgUp_fn(); //Favorites results code
    }
    Else If (ListType[1] = 11){
		Apps_PgUp_fn(); //Apps results code
    }
    Else If (ListType[1] = 12){
		Radios_PgUp_fn(); //Radios results code
    }
	// ListType[1] = 13 reserved for Players
	// not yet a possible List type
}
PUSH Nowplaying_PgUp{
	Nowplaying_PgUp_fn(); 
}                         
PUSH Players_PgUp {
	Players_PgUp_fn();
}
PUSH List_PgDn{
	If (ListType[1] = 0){
		Home_PgDn_fn();
	}
	Else If (ListType[1] = 1){
		Genres_PgDn_fn();//Genres code
	}
	Else If (ListType[1] = 2){
		Artists_PgDn_fn();//Artists code
	}
	Else If (ListType[1] = 3){
		Albums_PgDn_fn();//Albums code
	}
	Else If (ListType[1] = 4){
		Titles_PgDn_fn();//Titles code
	}
	Else If (ListType[1] = 5){
		Playlists_PgDn_fn();//Playlists code
	}
	Else If (ListType[1] = 6){
		Dynamic_PgDn_fn();//DynamicPlaylists code
	}
	Else If (ListType[1] = 8){
		Search_PgDn_fn(); //Search results code
	}
	Else If (ListType[1] = 9){
		Pandora_PgDn_fn(); //Pandora results code
    }   
    Else If (ListType[1] = 10){
		Favorites_PgDn_fn(); //Favorites results code
    }
    Else If (ListType[1] = 11){
		Apps_PgDn_fn(); 
    }
    Else If (ListType[1] = 12){
		Radios_PgDn_fn(); 
    }
	// ListType[1] = 13 reserved for Players
	// not yet a possible List type
}
PUSH Nowplaying_PgDn {
	Nowplaying_PgDn_fn();
}    
PUSH Players_PgDn {
	Players_PgDn_fn();
}
PUSH ListSelect{
	INTEGER i;
	i = GetLastModifiedArrayIndex ();
	If (ListType[1] = 0){
		If (i <= ListLengthHome){
			i = i + FirstHome;
			HomeListSelect_fn(i);//Home page code
		}
	}
	Else If (ListType[1] = 1){
		GenreListSelect_fn(i);//Genres code
	}
	Else If (ListType[1] = 2){
		ArtistListSelect_fn(i);//Artists code
	}
	Else If (ListType[1] = 3){
		AlbumListSelect_fn(i);//Albums code
	}
	Else If (ListType[1] = 4){
		TitleListSelect_fn(i);//Titles code
	}
	Else If (ListType[1] = 5){
		PlaylistListSelect_fn(i);//Playlists code
	}
	Else If (ListType[1] = 6){
		DynamicListSelect_fn(i); //DynamicPlaylists code
	}
	Else If (ListType[1] = 8){
		SearchListSelect_fn(i); //Search results code
	}
	Else If (ListType[1] = 9){
		PandoraListSelect_fn(i); //Pandora results code
    }  
    Else If (ListType[1] = 10){
		FavoritesListSelect_fn(i); //Favorites results code
    }
    Else If (ListType[1] = 11){
		AppsListSelect_fn(i); 
    }
    Else If (ListType[1] = 12){
		RadiosListSelect_fn(i); 
    }
	// ListType[1] = 13 reserved for Players
	// not yet a possible List type
}
PUSH ListPlay{
	INTEGER i;
	i = GetLastModifiedArrayIndex ();
	If (ListType[1] = 1){
		GenreListPlay_fn(i); //Genres code
	}
	Else If (ListType[1] = 2){
		ArtistListPlay_fn(i); //Artists code
	}
	Else If (ListType[1] = 3){
		AlbumListPlay_fn(i); //Albums code
	}
	Else If (ListType[1] = 4){
		TitleListPlay_fn(i); //Titles code
	}
	Else If (ListType[1] = 5){
		PlaylistListPlay_fn(i); //Playlists code
	}
	Else If (ListType[1] = 6){
		DynamicListPlay_fn(i); //DynamicPlaylists code
	}	
	Else If (ListType[1] = 8){
		SearchListPlay_fn(i); //Search results code
	}
	Else If (ListType[1] = 9){
		PandoraListSelect_fn(i); //Pandora results code
    }  
    Else If (ListType[1] = 10){
		FavoritesListPlay_fn(i); //Favorites results code
    }
	// ListType[1] = 13 reserved for Players
	// not yet a possible List type
}
PUSH ListAdd{
	INTEGER i;
	i = GetLastModifiedArrayIndex ();
	If (ListType[1] = 1){
		GenreListAdd_fn(i); //Genres code
	}
	Else If (ListType[1] = 2){
		ArtistListAdd_fn(i); //Artists code
	}
	Else If (ListType[1] = 3){
		AlbumListAdd_fn(i); //Albums code
	}
	Else If (ListType[1] = 4){
		TitleListAdd_fn(i); //Titles code
	}
	Else If (ListType[1] = 5){
		PlaylistListAdd_fn(i); //Playlists code
	}
	Else If (ListType[1] = 6){
		DynamicListPlay_fn(i); //DynamicPlaylists code
	}
	Else If (ListType[1] = 8){
		SearchListAdd_fn(i); //Search results code
	}
	Else If (ListType[1] = 9){
		PandoraListSelect_fn(i); //Pandora results code
    }  
    Else If (ListType[1] = 10){
		FavoritesListAdd_fn(i); //Favorites results code
    }
	// ListType[1] = 13 reserved for Players
	// not yet a possible List type
}
PUSH ListInsert{
	INTEGER i;
	i = GetLastModifiedArrayIndex ();
	If (ListType[1] = 1)	{
		GenreListInsert_fn(i); //Genres code
	}
	Else If (ListType[1] = 2){
		ArtistListInsert_fn(i); //Artists code
	}
	Else If (ListType[1] = 3){
		AlbumListInsert_fn(i); //Albums code
	}
	Else If (ListType[1] = 4){
		TitleListInsert_fn(i); //Titles code
	}
	Else If (ListType[1] = 5){
		PlaylistListInsert_fn(i); //Playlists code
	}
	Else If (ListType[1] = 6){
		DynamicListPlay_fn(i); //DynamicPlaylists code
	}
	Else If (ListType[1] = 8){
		SearchListInsert_fn(i); //Search results code
	}
	Else If (ListType[1] = 9){
		PandoraListSelect_fn(i); //Pandora results code
    }  
    Else If (ListType[1] = 10){
		FavoritesListInsert_fn(i); //Favorites results code
    }
	// ListType[1] = 13 reserved for Players
	// not yet a possible List type
}
PUSH NowplayingPlay {
	INTEGER i;
	i = GetLastModifiedArrayIndex ();
	NowplayingPlay_fn(i);
}
PUSH NowplayingRemove {
	INTEGER i;
	i = GetLastModifiedArrayIndex ();
	NowplayingRemove_fn(i);
}
PUSH NowplayingMoveUp {
	INTEGER i;
	i = GetLastModifiedArrayIndex ();
	NowplayingMoveUp_fn(i);
}
PUSH NowplayingMoveDown {
	INTEGER i;
	i = GetLastModifiedArrayIndex ();
	NowplayingMoveDown_fn(i);
}
PUSH Players_Refresh {
	Players_Pgreset_fn();
}
PUSH PlayersSelect {
	INTEGER i,j;
	i = GetLastModifiedArrayIndex ();
	If (i <= ListLengthPlayers){
		i = i + FirstPlayers;
		makestring(out$,"%s status - 1 charset:ascii subscribe:-\n",PlayerID$);  
		socketsend(TCPClient, out$);
		PlayerID$ = PlayersID[i];
		PlayerID_Active$ = PlayerID$;
		For (j = 1 to GetNumArrayRows(PlayersID)){
			If (PlayersID[j] = PlayerID$) {
				PlayerName_Active$ = PlayersName[j];
				Break;
			}
		}
		StatusFind$ = PlayersID_raw[i] + " status - 1";
		NowplayingFind$ = PlayersID_raw[i] + " status ";
		TimeFind$ = PlayersID_raw[i] + " time ";
		delay(20);
		makestring(out$,"%s status - 1 tags:pgsaeluK charset:ascii subscribe:0\n",PlayerID$); 
		socketsend(TCPClient, out$);
	}
}   
PUSH PlayersSyncTog {
	INTEGER i;
	i = GetLastModifiedArrayIndex ();
	If (i <= ListLengthPlayers){
		i = i + FirstPlayers;
		If (PlayersID[i] <> PlayerID$ || PlayersSynced[i] = 1){
			If (PlayersSynced[i] = 1){
				makestring(out$,"%s sync - \n",PlayersID[i]);  
				trace("sending: %s",out$);
				Socketsend(TCPClient, out$);
			}
			Else {
				makestring(out$,"%s sync %u \n",PlayerID$,PlayersIndex[i]);  
				trace("sending: %s",out$);
				Socketsend(TCPClient, out$);
			}
		}
	}     
}
PUSH Play {
	makestring(OUT$,"%s play\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
PUSH Pause_On {
	makestring(OUT$,"%s pause 1\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);

	If (ActivePlaylist != "" && Playlist_Save_Enable = 1)
	{
		makestring(OUT$,"%s playlist save %s\n",PlayerID$, ActivePlaylist);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
		trace("saved playlist: %s",ActivePlaylist);
	}
}
PUSH Pause_Off {
	makestring(OUT$,"%s pause 0\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
PUSH Pause_Tog {
	If ((ActivePlaylist != "") && (mode$ = "play") && Playlist_Save_Enable = 1)
	{
		makestring(OUT$,"%s playlist save %s\n",PlayerID$, ActivePlaylist);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
		trace("saved playlist: %s",ActivePlaylist);
	}
	makestring(OUT$,"%s pause\n",PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
PUSH Stop {
	ActivePlaylist = "";
	makestring(OUT$,"%s dynamicplaylist playlist stop\n",PlayerID$); //stop adding songs with the dynamic playlist plugin
	trace("sending: %s",OUT$);
	socketsend(TCPClient, OUT$);
	makestring(OUT$,"%s stop\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
PUSH Next {
	makestring(OUT$,"%s playlist index +1\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
PUSH Prev {          
	makestring(OUT$,"%s button rew.single\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
PUSH Pwr_On {
	makestring(OUT$,"%s power 1\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
PUSH Pwr_Off {
	makestring(OUT$,"%s power 0\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
PUSH Repeat_Off {
	makestring(OUT$,"%s playlist repeat 0\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
PUSH Repeat_Track {
	makestring(OUT$,"%s playlist repeat 1\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
PUSH Repeat_All {
	makestring(OUT$,"%s playlist repeat 2\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
PUSH Shuffle_Off {
	makestring(OUT$,"%s playlist shuffle 0\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
PUSH Shuffle_Track {
	makestring(OUT$,"%s playlist shuffle 1\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
PUSH Shuffle_Album {
	makestring(OUT$,"%s playlist shuffle 2\n", PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
CHANGE PlaylistPlay$ {
	ActivePlaylist = "";
	makestring(OUT$,"%s dynamicplaylist playlist stop\n",PlayerID$); //stop adding songs with the dynamic playlist plugin
	trace("sending: %s",OUT$);
	socketsend(TCPClient, OUT$);
    
    If (DirectIn_Fixed_Default = 1){
		makestring(OUT$,"%s playlist play %s\n",PlayerID$_Startup,PlaylistPlay$);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);    
    }
    Else {
		makestring(OUT$,"%s playlist play %s\n",PlayerID$,PlaylistPlay$);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
}
CHANGE PlaylistResume$ {
	If ((ActivePlaylist != "") && (Playlist_Save_Enable = 1)) {
		makestring(OUT$,"%s playlist save %s\n",PlayerID$, ActivePlaylist);
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
	}
	makestring(OUT$,"%s dynamicplaylist playlist stop\n",PlayerID$); //stop adding songs with the dynamic playlist plugin
	trace("sending: %s",OUT$);
	socketsend(TCPClient, OUT$);

    If (DirectIn_Fixed_Default = 1){
		makestring(OUT$,"%s playlist resume %s\n",PlayerID$_Startup, PlaylistResume$); // start the desired playlist where playing when last saved
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
		ActivePlaylist = PlaylistResume$;
		trace("active playlist: %s",ActivePlaylist);	
	}
	Else {
		makestring(OUT$,"%s playlist resume %s\n",PlayerID$, PlaylistResume$); // start the desired playlist where playing when last saved
		trace("sending: %s",OUT$);
		socketsend(TCPClient,OUT$);
		ActivePlaylist = PlaylistResume$;
		trace("active playlist: %s",ActivePlaylist);	
	}
}
/*
PUSH PlaylistSave
{
	makestring(OUT$,"%s playlist save %s\n",PlayerID$, ActivePlaylist);
	trace("sending: %s",OUT$);
	socketsend(TCPClient,OUT$);
}
*/
CHANGE FavoritePlay$ {
    If (DirectIn_Fixed_Default = 1){
		ActivePlaylist = "";
	 	makestring(OUT$,"%s favorites playlist play item_id:%s \n",PlayerID$_Startup, FavoritePlay$);
		trace("sending: %s",OUT$);
		socketsend(TCPClient, OUT$);
	}
	Else {
		ActivePlaylist = "";
	 	makestring(OUT$,"%s favorites playlist play item_id:%s \n", PlayerID$, FavoritePlay$);
		trace("sending: %s",OUT$);
		socketsend(TCPClient, OUT$);
	}
}
CHANGE DynamicResume$ {
    If (DirectIn_Fixed_Default = 1){
		ActivePlaylist = "";
		makestring(OUT$,"%s dynamicplaylist playlist continue %s\n",PlayerID$_Startup, DynamicResume$);
		trace("sending: %s",OUT$);
		socketsend(TCPClient, OUT$);
	}
	Else {
		ActivePlaylist = "";
		makestring(OUT$,"%s dynamicplaylist playlist continue %s\n",PlayerID$, DynamicResume$);
		trace("sending: %s",OUT$);
		socketsend(TCPClient, OUT$);
	}
}
PUSH BrowseCurrentSongGenre {
// set artist restrictor to CurrentGenreID
// CurrentTrackGenre$ is the name of the Genre
	If (ListType[1] != 2){
	    ListShiftFwd_fn();
		ListType[1] = 2;
	}
	ListFirst[1] = 0;
	ActiveGenreID = CurrentGenreID;
	ActiveGenre = CurrentTrackGenre$;
	makestring(ListName[1], "%s",CurrentTrackGenre$);
	makestring(restrictorArtists,"genre_id:%u",CurrentGenreID);
	ListRestrictor[1] = restrictorArtists;
	FirstArtist = 0;
	ArtistsRefresh_fn();
	ListName$ = ListName[1];
}
PUSH BrowseCurrentSongArtist {
	If (ListType[1] != 3){
	    ListShiftFwd_fn();
		ListType[1] = 3;
	}
	ListFirst[1] = 0;
	ActiveArtistID = CurrentArtistID;
	ActiveArtist = CurrentTrackArtist$;
	makestring(ListName[1], "Albums for %s",CurrentTrackArtist$);
	makestring(restrictorAlbums,"artist_id:%u",CurrentArtistID);
	ListRestrictor[1] = restrictorAlbums;
	FirstAlbum = 0;
	AlbumsRefresh_fn();
	ListName$ = ListName[1];
}
PUSH BrowseCurrentSongAlbum {
	If (ListType[1] != 4){
	    ListShiftFwd_fn();
		ListType[1] = 4;
	}
	ListFirst[1] = 0;
	ActiveAlbumID = CurrentAlbumID;
	ActiveAlbum = CurrentTrackAlbum$;
	makestring(ListName[1], "Titles in %s",CurrentTrackAlbum$);
	makestring(restrictorTitles,"album_id:%u sort:tracknum tags:te",CurrentAlbumID);
	ListRestrictor[1] = restrictorTitles;
	FirstTitle = 0;
	TitlesRefresh_fn();
	ListName$ = ListName[1];
}
PUSH PandoraRate_Up {
	makestring(OUT$,"%s pandora rate 1\n",PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient, OUT$);
}
PUSH PandoraRate_Dn {
	makestring(OUT$,"%s pandora rate 0\n",PlayerID$);
	trace("sending: %s",OUT$);
	socketsend(TCPClient, OUT$);
}
PUSH search_clear {
	clearbuffer (search_in$);
	search_in = "";
	search_in_fb = " ";
	If (ListType[1] = 0){
		ListName[1] = "\"\" anywhere";
		ListName$ = ListName[1];
	}
	If (ListType[1] = 1){
		makestring(ListName[1], "\"%s\" in Genres",search_in); //Genres code
		ListName$ = ListName[1];
	}
	Else If (ListType[1] = 2){
		makestring(ListName[1], "\"%s\" in Artists",search_in); //Artists code
		ListName$ = ListName[1];
	}
	Else If (ListType[1] = 3){
		makestring(ListName[1], "\"%s\" in Albums",search_in); //Albums code
		ListName$ = ListName[1];
	}
	Else If (ListType[1] = 4){
		makestring(ListName[1], "\"%s\" in Tracks",search_in); //Titles code
		ListName$ = ListName[1];
	}
	Else If (ListType[1] = 8){
		makestring(ListName[1],"\"%s\" anywhere",search_in); //DynamicPlaylists code
		ListName$ = ListName[1];
	}		
}
/*
PUSH search_resubmit
{
	If (ListType[1] = 1){
		search_genres_fn(); //Genres code
	}
	Else If (ListType[1] = 2){
		search_artists_fn(); //Artists code
	}
	Else If (ListType[1] = 3){
		search_albums_fn(); //Albums code
	}
	Else If (ListType[1] = 4){
		search_titles_fn(); //Titles code
	}
	Else If (ListType[1] = 5){
		search_playlists_fn(); //Playlists code
	}
	Else If (ListType[1] = 6){
		search_playlists_fn(); //DynamicPlaylists code
	}		
	Else If (ListType[1] = 8){
		search_fn();
	}
}
*/
PUSH search_backspace {
	search_in = left(search_in,len(search_in)-1); //take the left portion of search_in, leaving out one character
	makestring(search_in_fb,"%s",search_in); // copy the search_in variable to the feedback output
	If (ListType[1] = 1){
		search_genres_fn(); //Genres search code
	}
	Else If (ListType[1] = 2){
		search_artists_fn(); //Artists search code
	}
	Else If (ListType[1] = 3){
		search_albums_fn(); //Albums search code
	}
	Else If (ListType[1] = 4){
		search_titles_fn(); //Titles search code
	}
	Else If (ListType[1] = 5){
		search_playlists_fn(); //Playlists search code
	}
	Else If (ListType[1] = 6){
		search_playlists_fn(); //DynamicPlaylists search code
	}
	Else If (ListType[1] = 0 || ListType[1] = 8){
		search_fn(); //General Search function //yyy
	}
}
CHANGE search_in$ {
	do {
		nextChar = getc(search_in$);  //get the next character
		search_in = search_in + chr(nextChar); //add that character to the search_in variable
	} 
	until (len(search_in$) = 0);  //empty the buffer
	trace("search_in = %s",search_in);
	search_in_fb = search_in; // search_in > feedback output
	If (ListType[1] = 0 || ListType[1] = 8){
		search_fn(); // General Search
	}
	Else If (ListType[1] = 1){
		search_genres_fn(); // Genres search
	}
	Else If (ListType[1] = 2){
		search_artists_fn(); // Artists search
	}
	Else If (ListType[1] = 3){
		search_albums_fn(); // Albums search
	}
	Else If (ListType[1] = 4){
		search_titles_fn(); // Titles search
	}
	Else If (ListType[1] = 5){
		search_playlists_fn(); // Playlists search
	}
	Else If (ListType[1] = 6){
		search_playlists_fn(); // DynamicPlaylists search
	}
	Else If (ListType[1] = 10){
		Search_Radios_fn(); // fav/apps/radio search
	}
}
SOCKETRECEIVE TCPClient {
	String In$[16384],Find$[64];

	In$ = Gather("\n",TCPClient.SocketRxBuf);
	clearbuffer (TCPClient.SocketRxBuf);
	Find$ = left(In$,64);
//	debug = left (in$,255);  

If (find(StatusFind$,Find$)) { // status parsing
	trace("parsing status");
	Parse_Status(In$);
	In$ = "";
} 
Else If (Find(NowplayingFind$,Find$)) { // Nowplaying parsing
	trace("parsing nowplaying");
	Parse_Nowplaying(In$);
	In$ = "";
}
Else If (find(" time",Find$)) { // time parsing
//	trace("parsing time");
	Parse_Time(In$);
	In$ = "";
}
Else If (find(" pandora items ",Find$)) { // pandora parsing
	trace("parsing pandora");
	Parse_Pandora(In$);
	In$ = "";
}
Else If (find(FAR_parse,Find$)){ // Favorites/Apps/Radios parsing
	trace("parsing favorites, apps, or radios");
	Parse_FAR(In$);
	In$ = "";
}
Else If (find("dynamicplaylist playlists",Find$)) { // dynamic playlist parsing
	trace("parsing dynamic playlists");
	Parse_Dynamic(In$);
	In$ = "";
}
Else If (find("genres ",Find$)) { // genre parsing
	trace("parsing genres");
	Parse_Genres(In$);
	In$ = "";
}
Else If (find("artists ",Find$)) { // Artist parsing
	trace("parsing Artists");
	Parse_Artists(In$);
	In$ = "";
}
Else If (find("albums ",Find$)) { // Album parsing
	trace("parsing albums");
	Parse_Albums(In$);
	In$ = "";
}
Else If (find("titles ",Find$)) { // Titles (tracks) parsing
	trace("parsing titles");
	Parse_Titles(In$);
	In$ = "";
}
Else If (find("playlists ",Find$)) {  // Playlist parsing
	trace("parsing playlists");
	Parse_Playlists(In$);
	In$ = "";
}
Else If (find("apps ",Find$)){ // Top-level Apps parsing
	trace("parsing apps");
	Parse_Apps(In$);
	In$ = "";
}
Else If (find("radios ",Find$)){ // Top-level Radios parsing
	trace("parsing radios");
	Parse_Radios(In$);
	In$ = "";
}
Else If (find("search ",Find$)){  // Search parsing
	trace("parsing search");
	Parse_Search(In$);
	In$ = "";
}
Else If (find("players ",Find$)) { // Players parsing
	trace("parsing players");
	Parse_Players(In$);
	In$ = "";
}
} // end of SocketReceive parsing
/*
CHANGE TCPIP_Tx$ {
    signed_integer iStatus;
    iStatus = socketsend(TCPClient, TCPIP_Tx$ );
    if (iStatus < 0)
        print ("Error Sending to TCPClient: %d\n", iStatus);
}
*/
// /////////// Initialization script
Function Main() {
	PlayerID$ = PlayerID$_Startup;
	PlayerID_Active$ = PlayerID$;
	PlayersID_raw[0] = FormatPlayerID(PlayerID$);

	StatusFind$ = PlayersID_raw[0] + " status - 1";
	NowplayingFind$ = PlayersID_raw[0] + " status ";
	TimeFind$ = PlayersID_raw[0] + " time ";
    FAR_parse = "favorites items ";
    NumberOfHome = NumberOfList;
    NumberOfGenres = NumberOfList;
	NumberOfArtists = NumberOfList;
	NumberOfAlbums = NumberOfList;
	NumberOfTitles = NumberOfList;
	NumberOfPlaylists = NumberOfList;
	NumberOfDynamic = NumberOfList;
	NumberOfSearch = NumberOfList;
	NumberOfPandora = NumberOfList;        
	NumberOfFavorites = NumberOfList;    
	NumberOfApps = NumberOfList;
	NumberOfRadios = NumberOfList;
	FirstGenre = 0;
	FirstArtist = 0;
	FirstAlbum = 0;
	FirstTitle = 0;
	FirstPlaylist = 0;
	FirstNowplaying = 0;
	FirstDynamic = 0;
	FirstPandora = 0;   
	FirstFavorites = 0; 
	FirstPlayers = 0;
	ActivePlaylist = "";
	restrictorGenres = "";
	restrictorArtists = "";
	restrictorAlbums = "";
	restrictorTitles = "tags:te";
	restrictorPlaylists = "";
	restrictorPandora = "";
	restrictorFavorites = "";
	SetArray(ListType,0);
	SetArray(ListName,"Home");
	SetArray(ListRestrictor,"");
	Nowplaying_refresh_enable = 1;
	SetArray(ListHome,"");	
	ListHome[1] = "Favorites";
	ListHome[2] = "Genres";
	ListHome[3] = "Artists";
	ListHome[4] = "Albums";
	ListHome[5] = "Playlists";
	ListHome[6] = "Dynamic PL";    
	ListHome[7] = "Radios";
	ListHome[8] = "Apps";
	ListHome[9] = "Pandora";
	ListHome[10] = "Tracks";
 	TotalHome = 10;
 	Home_PgReset_fn();

	While (1) {
		If (status_request_time = 1) {
			makestring(Out$,"%s time ? \n",PlayerID$);
//			trace("sending: %s",OUT$);
			socketsend(TCPClient,OUT$);
		}
		delay(100);
	}
} // end main function
